//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoWrapper.Samples.WrappersForDirectoryServices
{
	using System;
	
	
	// Interface for ActiveDirectorySecurityWrapper
	internal interface IActiveDirectorySecurityWrapper
	{
		
		System.Type AccessRightType
		{
			get;
		}
		
		System.Type AccessRuleType
		{
			get;
		}
		
		System.Type AuditRuleType
		{
			get;
		}
		
		bool AreAccessRulesProtected
		{
			get;
		}
		
		bool AreAuditRulesProtected
		{
			get;
		}
		
		bool AreAccessRulesCanonical
		{
			get;
		}
		
		bool AreAuditRulesCanonical
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurity Wrapped
		{
			get;
		}
		
		void AddAccessRule(System.DirectoryServices.ActiveDirectoryAccessRule rule);
		
		void SetAccessRule(System.DirectoryServices.ActiveDirectoryAccessRule rule);
		
		void ResetAccessRule(System.DirectoryServices.ActiveDirectoryAccessRule rule);
		
		void RemoveAccess(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.AccessControlType type);
		
		bool RemoveAccessRule(System.DirectoryServices.ActiveDirectoryAccessRule rule);
		
		void RemoveAccessRuleSpecific(System.DirectoryServices.ActiveDirectoryAccessRule rule);
		
		bool ModifyAccessRule(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, out bool modified);
		
		void PurgeAccessRules(System.Security.Principal.IdentityReference identity);
		
		void AddAuditRule(System.DirectoryServices.ActiveDirectoryAuditRule rule);
		
		void SetAuditRule(System.DirectoryServices.ActiveDirectoryAuditRule rule);
		
		void RemoveAudit(System.Security.Principal.IdentityReference identity);
		
		bool RemoveAuditRule(System.DirectoryServices.ActiveDirectoryAuditRule rule);
		
		void RemoveAuditRuleSpecific(System.DirectoryServices.ActiveDirectoryAuditRule rule);
		
		bool ModifyAuditRule(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AuditRule rule, out bool modified);
		
		void PurgeAuditRules(System.Security.Principal.IdentityReference identity);
		
		System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
		
		System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type, System.Guid objectGuid, System.Guid inheritedObjectGuid);
		
		System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);
		
		System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags, System.Guid objectGuid, System.Guid inheritedObjectGuid);
		
		System.Security.AccessControl.AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, System.Type targetType);
		
		System.Security.AccessControl.AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, System.Type targetType);
		
		byte[] GetSecurityDescriptorBinaryForm();
		
		System.Security.Principal.IdentityReference GetOwner(System.Type targetType);
		
		void SetOwner(System.Security.Principal.IdentityReference identity);
		
		System.Security.Principal.IdentityReference GetGroup(System.Type targetType);
		
		void SetGroup(System.Security.Principal.IdentityReference identity);
		
		void SetAccessRuleProtection(bool isProtected, bool preserveInheritance);
		
		void SetAuditRuleProtection(bool isProtected, bool preserveInheritance);
		
		string GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections includeSections);
		
		void SetSecurityDescriptorSddlForm(string sddlForm);
		
		void SetSecurityDescriptorSddlForm(string sddlForm, System.Security.AccessControl.AccessControlSections includeSections);
		
		void SetSecurityDescriptorBinaryForm(byte[] binaryForm);
		
		void SetSecurityDescriptorBinaryForm(byte[] binaryForm, System.Security.AccessControl.AccessControlSections includeSections);
	}
	
	// Interface for ActiveDirectoryAccessRuleWrapper
	internal interface IActiveDirectoryAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectoryAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for ListChildrenAccessRuleWrapper
	internal interface IListChildrenAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.ListChildrenAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for CreateChildAccessRuleWrapper
	internal interface ICreateChildAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.CreateChildAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for DeleteChildAccessRuleWrapper
	internal interface IDeleteChildAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.DeleteChildAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for PropertyAccessRuleWrapper
	internal interface IPropertyAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.PropertyAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for PropertySetAccessRuleWrapper
	internal interface IPropertySetAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.PropertySetAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for ExtendedRightAccessRuleWrapper
	internal interface IExtendedRightAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.ExtendedRightAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for DeleteTreeAccessRuleWrapper
	internal interface IDeleteTreeAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.DeleteTreeAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for ActiveDirectoryAuditRuleWrapper
	internal interface IActiveDirectoryAuditRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AuditFlags AuditFlags
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectoryAuditRule Wrapped
		{
			get;
		}
	}
	
	// Interface for DSDescriptionAttributeWrapper
	internal interface IDSDescriptionAttributeWrapper
	{
		
		string Description
		{
			get;
		}
		
		object TypeId
		{
			get;
		}
		
		System.DirectoryServices.DSDescriptionAttribute Wrapped
		{
			get;
		}
		
		bool Equals(object obj);
		
		int GetHashCode();
		
		bool IsDefaultAttribute();
		
		bool Match(object obj);
	}
	
	// Interface for DirectoryEntriesWrapper
	internal interface IDirectoryEntriesWrapper
	{
		
		System.DirectoryServices.SchemaNameCollection SchemaFilter
		{
			get;
		}
		
		System.DirectoryServices.DirectoryEntries Wrapped
		{
			get;
		}
		
		System.DirectoryServices.DirectoryEntry Add(string name, string schemaClassName);
		
		System.DirectoryServices.DirectoryEntry Find(string name);
		
		System.DirectoryServices.DirectoryEntry Find(string name, string schemaClassName);
		
		void Remove(System.DirectoryServices.DirectoryEntry entry);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for DirectoryEntryWrapper
	internal interface IDirectoryEntryWrapper
	{
		
		System.DirectoryServices.AuthenticationTypes AuthenticationType
		{
			get;
			set;
		}
		
		System.DirectoryServices.DirectoryEntries Children
		{
			get;
		}
		
		System.Guid Guid
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurity ObjectSecurity
		{
			get;
			set;
		}
		
		string Name
		{
			get;
		}
		
		string NativeGuid
		{
			get;
		}
		
		object NativeObject
		{
			get;
		}
		
		System.DirectoryServices.DirectoryEntry Parent
		{
			get;
		}
		
		string Password
		{
			set;
		}
		
		string Path
		{
			get;
			set;
		}
		
		System.DirectoryServices.PropertyCollection Properties
		{
			get;
		}
		
		string SchemaClassName
		{
			get;
		}
		
		System.DirectoryServices.DirectoryEntry SchemaEntry
		{
			get;
		}
		
		bool UsePropertyCache
		{
			get;
			set;
		}
		
		string Username
		{
			get;
			set;
		}
		
		System.DirectoryServices.DirectoryEntryConfiguration Options
		{
			get;
		}
		
		System.ComponentModel.ISite Site
		{
			get;
			set;
		}
		
		System.ComponentModel.IContainer Container
		{
			get;
		}
		
		System.DirectoryServices.DirectoryEntry Wrapped
		{
			get;
		}
		
		void Close();
		
		void CommitChanges();
		
		System.DirectoryServices.DirectoryEntry CopyTo(System.DirectoryServices.DirectoryEntry newParent);
		
		System.DirectoryServices.DirectoryEntry CopyTo(System.DirectoryServices.DirectoryEntry newParent, string newName);
		
		void DeleteTree();
		
		object Invoke(string methodName, object[] args);
		
		object InvokeGet(string propertyName);
		
		void InvokeSet(string propertyName, object[] args);
		
		void MoveTo(System.DirectoryServices.DirectoryEntry newParent);
		
		void MoveTo(System.DirectoryServices.DirectoryEntry newParent, string newName);
		
		void RefreshCache();
		
		void RefreshCache(string[] propertyNames);
		
		void Rename(string newName);
		
		void Dispose();
		
		string ToString();
		
		object GetLifetimeService();
		
		object InitializeLifetimeService();
		
		System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
	}
	
	// Interface for DirectoryEntryConfigurationWrapper
	internal interface IDirectoryEntryConfigurationWrapper
	{
		
		System.DirectoryServices.ReferralChasingOption Referral
		{
			get;
			set;
		}
		
		System.DirectoryServices.SecurityMasks SecurityMasks
		{
			get;
			set;
		}
		
		int PageSize
		{
			get;
			set;
		}
		
		int PasswordPort
		{
			get;
			set;
		}
		
		System.DirectoryServices.PasswordEncodingMethod PasswordEncoding
		{
			get;
			set;
		}
		
		System.DirectoryServices.DirectoryEntryConfiguration Wrapped
		{
			get;
		}
		
		string GetCurrentServerName();
		
		bool IsMutuallyAuthenticated();
		
		void SetUserNameQueryQuota(string accountName);
	}
	
	// Interface for DirectorySearcherWrapper
	internal interface IDirectorySearcherWrapper
	{
		
		bool CacheResults
		{
			get;
			set;
		}
		
		System.TimeSpan ClientTimeout
		{
			get;
			set;
		}
		
		bool PropertyNamesOnly
		{
			get;
			set;
		}
		
		string Filter
		{
			get;
			set;
		}
		
		int PageSize
		{
			get;
			set;
		}
		
		System.Collections.Specialized.StringCollection PropertiesToLoad
		{
			get;
		}
		
		System.DirectoryServices.ReferralChasingOption ReferralChasing
		{
			get;
			set;
		}
		
		System.DirectoryServices.SearchScope SearchScope
		{
			get;
			set;
		}
		
		System.TimeSpan ServerPageTimeLimit
		{
			get;
			set;
		}
		
		System.TimeSpan ServerTimeLimit
		{
			get;
			set;
		}
		
		int SizeLimit
		{
			get;
			set;
		}
		
		System.DirectoryServices.DirectoryEntry SearchRoot
		{
			get;
			set;
		}
		
		System.DirectoryServices.SortOption Sort
		{
			get;
			set;
		}
		
		bool Asynchronous
		{
			get;
			set;
		}
		
		bool Tombstone
		{
			get;
			set;
		}
		
		string AttributeScopeQuery
		{
			get;
			set;
		}
		
		System.DirectoryServices.DereferenceAlias DerefAlias
		{
			get;
			set;
		}
		
		System.DirectoryServices.SecurityMasks SecurityMasks
		{
			get;
			set;
		}
		
		System.DirectoryServices.ExtendedDN ExtendedDN
		{
			get;
			set;
		}
		
		System.DirectoryServices.DirectorySynchronization DirectorySynchronization
		{
			get;
			set;
		}
		
		System.DirectoryServices.DirectoryVirtualListView VirtualListView
		{
			get;
			set;
		}
		
		System.ComponentModel.ISite Site
		{
			get;
			set;
		}
		
		System.ComponentModel.IContainer Container
		{
			get;
		}
		
		System.DirectoryServices.DirectorySearcher Wrapped
		{
			get;
		}
		
		System.DirectoryServices.SearchResult FindOne();
		
		System.DirectoryServices.SearchResultCollection FindAll();
		
		void Dispose();
		
		string ToString();
		
		object GetLifetimeService();
		
		object InitializeLifetimeService();
		
		System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
	}
	
	// Interface for DirectoryServicesPermissionWrapper
	internal interface IDirectoryServicesPermissionWrapper
	{
		
		System.DirectoryServices.DirectoryServicesPermissionEntryCollection PermissionEntries
		{
			get;
		}
		
		System.DirectoryServices.DirectoryServicesPermission Wrapped
		{
			get;
		}
		
		System.Security.IPermission Copy();
		
		void FromXml(System.Security.SecurityElement securityElement);
		
		System.Security.IPermission Intersect(System.Security.IPermission target);
		
		bool IsSubsetOf(System.Security.IPermission target);
		
		bool IsUnrestricted();
		
		System.Security.SecurityElement ToXml();
		
		System.Security.IPermission Union(System.Security.IPermission target);
		
		void Demand();
		
		void Assert();
		
		void Deny();
		
		void PermitOnly();
		
		string ToString();
		
		bool Equals(object obj);
		
		int GetHashCode();
	}
	
	// Interface for DirectoryServicesPermissionAttributeWrapper
	internal interface IDirectoryServicesPermissionAttributeWrapper
	{
		
		string Path
		{
			get;
			set;
		}
		
		System.DirectoryServices.DirectoryServicesPermissionAccess PermissionAccess
		{
			get;
			set;
		}
		
		System.Security.Permissions.SecurityAction Action
		{
			get;
			set;
		}
		
		bool Unrestricted
		{
			get;
			set;
		}
		
		object TypeId
		{
			get;
		}
		
		System.DirectoryServices.DirectoryServicesPermissionAttribute Wrapped
		{
			get;
		}
		
		System.Security.IPermission CreatePermission();
		
		bool Equals(object obj);
		
		int GetHashCode();
		
		bool Match(object obj);
		
		bool IsDefaultAttribute();
	}
	
	// Interface for DirectoryServicesPermissionEntryWrapper
	internal interface IDirectoryServicesPermissionEntryWrapper
	{
		
		string Path
		{
			get;
		}
		
		System.DirectoryServices.DirectoryServicesPermissionAccess PermissionAccess
		{
			get;
		}
		
		System.DirectoryServices.DirectoryServicesPermissionEntry Wrapped
		{
			get;
		}
	}
	
	// Interface for DirectoryServicesPermissionEntryCollectionWrapper
	internal interface IDirectoryServicesPermissionEntryCollectionWrapper
	{
		
		System.DirectoryServices.DirectoryServicesPermissionEntry this[int index]
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.DirectoryServicesPermissionEntryCollection Wrapped
		{
			get;
		}
		
		int Add(System.DirectoryServices.DirectoryServicesPermissionEntry value);
		
		void AddRange(System.DirectoryServices.DirectoryServicesPermissionEntry[] value);
		
		void AddRange(System.DirectoryServices.DirectoryServicesPermissionEntryCollection value);
		
		bool Contains(System.DirectoryServices.DirectoryServicesPermissionEntry value);
		
		void CopyTo(System.DirectoryServices.DirectoryServicesPermissionEntry[] array, int index);
		
		int IndexOf(System.DirectoryServices.DirectoryServicesPermissionEntry value);
		
		void Insert(int index, System.DirectoryServices.DirectoryServicesPermissionEntry value);
		
		void Remove(System.DirectoryServices.DirectoryServicesPermissionEntry value);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for DirectorySynchronizationWrapper
	internal interface IDirectorySynchronizationWrapper
	{
		
		System.DirectoryServices.DirectorySynchronizationOptions Option
		{
			get;
			set;
		}
		
		System.DirectoryServices.DirectorySynchronization Wrapped
		{
			get;
		}
		
		byte[] GetDirectorySynchronizationCookie();
		
		void ResetDirectorySynchronizationCookie();
		
		void ResetDirectorySynchronizationCookie(byte[] cookie);
		
		System.DirectoryServices.DirectorySynchronization Copy();
	}
	
	// Interface for DirectoryVirtualListViewWrapper
	internal interface IDirectoryVirtualListViewWrapper
	{
		
		int BeforeCount
		{
			get;
			set;
		}
		
		int AfterCount
		{
			get;
			set;
		}
		
		int Offset
		{
			get;
			set;
		}
		
		int TargetPercentage
		{
			get;
			set;
		}
		
		string Target
		{
			get;
			set;
		}
		
		int ApproximateTotal
		{
			get;
			set;
		}
		
		System.DirectoryServices.DirectoryVirtualListViewContext DirectoryVirtualListViewContext
		{
			get;
			set;
		}
		
		System.DirectoryServices.DirectoryVirtualListView Wrapped
		{
			get;
		}
	}
	
	// Interface for DirectoryVirtualListViewContextWrapper
	internal interface IDirectoryVirtualListViewContextWrapper
	{
		
		System.DirectoryServices.DirectoryVirtualListViewContext Wrapped
		{
			get;
		}
		
		System.DirectoryServices.DirectoryVirtualListViewContext Copy();
	}
	
	// Interface for PropertyCollectionWrapper
	internal interface IPropertyCollectionWrapper
	{
		
		System.DirectoryServices.PropertyValueCollection this[string propertyName]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.Collections.ICollection PropertyNames
		{
			get;
		}
		
		System.Collections.ICollection Values
		{
			get;
		}
		
		System.DirectoryServices.PropertyCollection Wrapped
		{
			get;
		}
		
		bool Contains(string propertyName);
		
		void CopyTo(System.DirectoryServices.PropertyValueCollection[] array, int index);
		
		System.Collections.IDictionaryEnumerator GetEnumerator();
	}
	
	// Interface for PropertyValueCollectionWrapper
	internal interface IPropertyValueCollectionWrapper
	{
		
		object this[int index]
		{
			get;
			set;
		}
		
		string PropertyName
		{
			get;
		}
		
		object Value
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.PropertyValueCollection Wrapped
		{
			get;
		}
		
		int Add(object value);
		
		void AddRange(object[] value);
		
		void AddRange(System.DirectoryServices.PropertyValueCollection value);
		
		bool Contains(object value);
		
		void CopyTo(object[] array, int index);
		
		int IndexOf(object value);
		
		void Insert(int index, object value);
		
		void Remove(object value);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ResultPropertyCollectionWrapper
	internal interface IResultPropertyCollectionWrapper
	{
		
		System.DirectoryServices.ResultPropertyValueCollection this[string name]
		{
			get;
		}
		
		System.Collections.ICollection PropertyNames
		{
			get;
		}
		
		System.Collections.ICollection Values
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ResultPropertyCollection Wrapped
		{
			get;
		}
		
		bool Contains(string propertyName);
		
		void CopyTo(System.DirectoryServices.ResultPropertyValueCollection[] array, int index);
		
		void CopyTo(System.Array array, int index);
		
		void Clear();
		
		System.Collections.IDictionaryEnumerator GetEnumerator();
	}
	
	// Interface for ResultPropertyValueCollectionWrapper
	internal interface IResultPropertyValueCollectionWrapper
	{
		
		object this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ResultPropertyValueCollection Wrapped
		{
			get;
		}
		
		bool Contains(object value);
		
		int IndexOf(object value);
		
		void CopyTo(object[] values, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for SchemaNameCollectionWrapper
	internal interface ISchemaNameCollectionWrapper
	{
		
		string this[int index]
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.SchemaNameCollection Wrapped
		{
			get;
		}
		
		int Add(string value);
		
		void AddRange(string[] value);
		
		void AddRange(System.DirectoryServices.SchemaNameCollection value);
		
		void Clear();
		
		bool Contains(string value);
		
		void CopyTo(string[] stringArray, int index);
		
		System.Collections.IEnumerator GetEnumerator();
		
		int IndexOf(string value);
		
		void Insert(int index, string value);
		
		void Remove(string value);
		
		void RemoveAt(int index);
	}
	
	// Interface for SearchResultWrapper
	internal interface ISearchResultWrapper
	{
		
		string Path
		{
			get;
		}
		
		System.DirectoryServices.ResultPropertyCollection Properties
		{
			get;
		}
		
		System.DirectoryServices.SearchResult Wrapped
		{
			get;
		}
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
	}
	
	// Interface for SearchResultCollectionWrapper
	internal interface ISearchResultCollectionWrapper
	{
		
		System.DirectoryServices.SearchResult this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.IntPtr Handle
		{
			get;
		}
		
		string[] PropertiesLoaded
		{
			get;
		}
		
		System.DirectoryServices.SearchResultCollection Wrapped
		{
			get;
		}
		
		void Dispose();
		
		System.Collections.IEnumerator GetEnumerator();
		
		bool Contains(System.DirectoryServices.SearchResult result);
		
		void CopyTo(System.DirectoryServices.SearchResult[] results, int index);
		
		int IndexOf(System.DirectoryServices.SearchResult result);
		
		object GetLifetimeService();
		
		object InitializeLifetimeService();
		
		System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
	}
	
	// Interface for SortOptionWrapper
	internal interface ISortOptionWrapper
	{
		
		string PropertyName
		{
			get;
			set;
		}
		
		System.DirectoryServices.SortDirection Direction
		{
			get;
			set;
		}
		
		System.DirectoryServices.SortOption Wrapped
		{
			get;
		}
	}
	
	// Interface for DirectoryServicesCOMExceptionWrapper
	internal interface IDirectoryServicesCOMExceptionWrapper
	{
		
		int ExtendedError
		{
			get;
		}
		
		string ExtendedErrorMessage
		{
			get;
		}
		
		int ErrorCode
		{
			get;
		}
		
		string Message
		{
			get;
		}
		
		System.Collections.IDictionary Data
		{
			get;
		}
		
		System.Exception InnerException
		{
			get;
		}
		
		System.Reflection.MethodBase TargetSite
		{
			get;
		}
		
		string StackTrace
		{
			get;
		}
		
		string HelpLink
		{
			get;
			set;
		}
		
		string Source
		{
			get;
			set;
		}
		
		int HResult
		{
			get;
		}
		
		System.DirectoryServices.DirectoryServicesCOMException Wrapped
		{
			get;
		}
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
		
		string ToString();
		
		System.Exception GetBaseException();
		
		System.Type GetType();
	}
	
	// Interface for ActiveDirectoryReplicationMetadataWrapper
	internal interface IActiveDirectoryReplicationMetadataWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.AttributeMetadata this[string name]
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection AttributeNames
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection Values
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata Wrapped
		{
			get;
		}
		
		bool Contains(string attributeName);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.AttributeMetadata[] array, int index);
		
		void CopyTo(System.Array array, int index);
		
		void Clear();
		
		System.Collections.IDictionaryEnumerator GetEnumerator();
	}
	
	// Interface for ActiveDirectoryScheduleWrapper
	internal interface IActiveDirectoryScheduleWrapper
	{
		
		bool[,,] RawSchedule
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule Wrapped
		{
			get;
		}
		
		void SetSchedule(System.DayOfWeek day, System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute);
		
		void SetSchedule(System.DayOfWeek[] days, System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute);
		
		void SetDailySchedule(System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute);
		
		void ResetSchedule();
	}
	
	// Interface for ActiveDirectorySchemaWrapper
	internal interface IActiveDirectorySchemaWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer SchemaRoleOwner
		{
			get;
		}
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema Wrapped
		{
			get;
		}
		
		void RefreshSchema();
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass FindClass(string ldapDisplayName);
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass FindDefunctClass(string commonName);
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection FindAllClasses();
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection FindAllClasses(System.DirectoryServices.ActiveDirectory.SchemaClassType type);
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection FindAllDefunctClasses();
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty FindProperty(string ldapDisplayName);
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty FindDefunctProperty(string commonName);
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties();
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties(System.DirectoryServices.ActiveDirectory.PropertyTypes type);
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection FindAllDefunctProperties();
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
		
		void Dispose();
		
		string ToString();
	}
	
	// Interface for ActiveDirectorySchemaClassWrapper
	internal interface IActiveDirectorySchemaClassWrapper
	{
		
		string Name
		{
			get;
		}
		
		string CommonName
		{
			get;
			set;
		}
		
		string Oid
		{
			get;
			set;
		}
		
		string Description
		{
			get;
			set;
		}
		
		bool IsDefunct
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection PossibleSuperiors
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection PossibleInferiors
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection MandatoryProperties
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection OptionalProperties
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection AuxiliaryClasses
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass SubClassOf
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.SchemaClassType Type
		{
			get;
			set;
		}
		
		System.Guid SchemaGuid
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectorySecurity DefaultObjectSecurityDescriptor
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass Wrapped
		{
			get;
		}
		
		void Dispose();
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection GetAllProperties();
		
		void Save();
		
		string ToString();
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
	}
	
	// Interface for ActiveDirectorySchemaClassCollectionWrapper
	internal interface IActiveDirectorySchemaClassCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass this[int index]
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection Wrapped
		{
			get;
		}
		
		int Add(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass schemaClass);
		
		void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass[] schemaClasses);
		
		void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection schemaClasses);
		
		void AddRange(System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection schemaClasses);
		
		void Remove(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass schemaClass);
		
		void Insert(int index, System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass schemaClass);
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass schemaClass);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass[] schemaClasses, int index);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass schemaClass);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ActiveDirectorySchemaPropertyWrapper
	internal interface IActiveDirectorySchemaPropertyWrapper
	{
		
		string Name
		{
			get;
		}
		
		string CommonName
		{
			get;
			set;
		}
		
		string Oid
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax Syntax
		{
			get;
			set;
		}
		
		string Description
		{
			get;
			set;
		}
		
		bool IsSingleValued
		{
			get;
			set;
		}
		
		bool IsIndexed
		{
			get;
			set;
		}
		
		bool IsIndexedOverContainer
		{
			get;
			set;
		}
		
		bool IsInAnr
		{
			get;
			set;
		}
		
		bool IsOnTombstonedObject
		{
			get;
			set;
		}
		
		bool IsTupleIndexed
		{
			get;
			set;
		}
		
		bool IsInGlobalCatalog
		{
			get;
			set;
		}
		
		System.Nullable<int> RangeLower
		{
			get;
			set;
		}
		
		System.Nullable<int> RangeUpper
		{
			get;
			set;
		}
		
		bool IsDefunct
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty Link
		{
			get;
		}
		
		System.Nullable<int> LinkId
		{
			get;
			set;
		}
		
		System.Guid SchemaGuid
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty Wrapped
		{
			get;
		}
		
		void Dispose();
		
		void Save();
		
		string ToString();
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
	}
	
	// Interface for ActiveDirectorySchemaPropertyCollectionWrapper
	internal interface IActiveDirectorySchemaPropertyCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty this[int index]
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection Wrapped
		{
			get;
		}
		
		int Add(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty schemaProperty);
		
		void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty[] properties);
		
		void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection properties);
		
		void AddRange(System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection properties);
		
		void Remove(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty schemaProperty);
		
		void Insert(int index, System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty schemaProperty);
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty schemaProperty);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty[] properties, int index);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty schemaProperty);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ActiveDirectorySiteWrapper
	internal interface IActiveDirectorySiteWrapper
	{
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainCollection Domains
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection Subnets
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection Servers
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection AdjacentSites
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection SiteLinks
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer InterSiteTopologyGenerator
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteOptions Options
		{
			get;
			set;
		}
		
		string Location
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection BridgeheadServers
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DirectoryServerCollection PreferredSmtpBridgeheadServers
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DirectoryServerCollection PreferredRpcBridgeheadServers
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule IntraSiteReplicationSchedule
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySite Wrapped
		{
			get;
		}
		
		void Save();
		
		void Delete();
		
		string ToString();
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
		
		void Dispose();
	}
	
	// Interface for ActiveDirectorySiteCollectionWrapper
	internal interface IActiveDirectorySiteCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySite this[int index]
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection Wrapped
		{
			get;
		}
		
		int Add(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite site);
		
		void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite[] sites);
		
		void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection sites);
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite site);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite[] array, int index);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite site);
		
		void Insert(int index, System.DirectoryServices.ActiveDirectory.ActiveDirectorySite site);
		
		void Remove(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite site);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ActiveDirectorySiteLinkWrapper
	internal interface IActiveDirectorySiteLinkWrapper
	{
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection Sites
		{
			get;
		}
		
		int Cost
		{
			get;
			set;
		}
		
		System.TimeSpan ReplicationInterval
		{
			get;
			set;
		}
		
		bool ReciprocalReplicationEnabled
		{
			get;
			set;
		}
		
		bool NotificationEnabled
		{
			get;
			set;
		}
		
		bool DataCompressionEnabled
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule InterSiteReplicationSchedule
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink Wrapped
		{
			get;
		}
		
		void Save();
		
		void Delete();
		
		string ToString();
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
		
		void Dispose();
	}
	
	// Interface for ActiveDirectorySiteLinkBridgeWrapper
	internal interface IActiveDirectorySiteLinkBridgeWrapper
	{
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection SiteLinks
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge Wrapped
		{
			get;
		}
		
		void Save();
		
		void Delete();
		
		string ToString();
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
		
		void Dispose();
	}
	
	// Interface for ActiveDirectorySiteLinkCollectionWrapper
	internal interface IActiveDirectorySiteLinkCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink this[int index]
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection Wrapped
		{
			get;
		}
		
		int Add(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink link);
		
		void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink[] links);
		
		void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection links);
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink link);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink[] array, int index);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink link);
		
		void Insert(int index, System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink link);
		
		void Remove(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink link);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ActiveDirectorySubnetWrapper
	internal interface IActiveDirectorySubnetWrapper
	{
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySite Site
		{
			get;
			set;
		}
		
		string Location
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet Wrapped
		{
			get;
		}
		
		void Save();
		
		void Delete();
		
		string ToString();
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
		
		void Dispose();
	}
	
	// Interface for ActiveDirectorySubnetCollectionWrapper
	internal interface IActiveDirectorySubnetCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet this[int index]
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection Wrapped
		{
			get;
		}
		
		int Add(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet subnet);
		
		void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet[] subnets);
		
		void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection subnets);
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet subnet);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet[] array, int index);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet subnet);
		
		void Insert(int index, System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet subnet);
		
		void Remove(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet subnet);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for AdamInstanceWrapper
	internal interface IAdamInstanceWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ConfigurationSet ConfigurationSet
		{
			get;
		}
		
		string HostName
		{
			get;
		}
		
		int LdapPort
		{
			get;
		}
		
		int SslPort
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AdamRoleCollection Roles
		{
			get;
		}
		
		string DefaultPartition
		{
			get;
			set;
		}
		
		string IPAddress
		{
			get;
		}
		
		string SiteName
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.SyncUpdateCallback SyncFromAllServersCallback
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection InboundConnections
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection OutboundConnections
		{
			get;
		}
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection Partitions
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AdamInstance Wrapped
		{
			get;
		}
		
		void TransferRoleOwnership(System.DirectoryServices.ActiveDirectory.AdamRole role);
		
		void SeizeRoleOwnership(System.DirectoryServices.ActiveDirectory.AdamRole role);
		
		void CheckReplicationConsistency();
		
		System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection GetReplicationCursors(string partition);
		
		System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation GetReplicationOperationInformation();
		
		System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection GetReplicationNeighbors(string partition);
		
		System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection GetAllReplicationNeighbors();
		
		System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection GetReplicationConnectionFailures();
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath);
		
		void SyncReplicaFromServer(string partition, string sourceServer);
		
		void TriggerSyncReplicaFromNeighbors(string partition);
		
		void SyncReplicaFromAllServers(string partition, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions options);
		
		void Save();
		
		void Dispose();
		
		string ToString();
		
		void MoveToAnotherSite(string siteName);
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
	}
	
	// Interface for AdamInstanceCollectionWrapper
	internal interface IAdamInstanceCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.AdamInstance this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AdamInstanceCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.AdamInstance adamInstance);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.AdamInstance adamInstance);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.AdamInstance[] adamInstances, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ApplicationPartitionWrapper
	internal interface IApplicationPartitionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.DirectoryServerCollection DirectoryServers
		{
			get;
		}
		
		string SecurityReferenceDomain
		{
			get;
			set;
		}
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ApplicationPartition Wrapped
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer();
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer(string siteName);
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer(bool forceRediscovery);
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer(string siteName, bool forceRediscovery);
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection FindAllDirectoryServers();
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection FindAllDirectoryServers(string siteName);
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection FindAllDiscoverableDirectoryServers();
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection FindAllDiscoverableDirectoryServers(string siteName);
		
		void Delete();
		
		void Save();
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
		
		void Dispose();
		
		string ToString();
	}
	
	// Interface for ApplicationPartitionCollectionWrapper
	internal interface IApplicationPartitionCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ApplicationPartition this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ApplicationPartition applicationPartition);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ApplicationPartition applicationPartition);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ApplicationPartition[] applicationPartitions, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for AttributeMetadataWrapper
	internal interface IAttributeMetadataWrapper
	{
		
		string Name
		{
			get;
		}
		
		int Version
		{
			get;
		}
		
		System.DateTime LastOriginatingChangeTime
		{
			get;
		}
		
		System.Guid LastOriginatingInvocationId
		{
			get;
		}
		
		long OriginatingChangeUsn
		{
			get;
		}
		
		long LocalChangeUsn
		{
			get;
		}
		
		string OriginatingServer
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AttributeMetadata Wrapped
		{
			get;
		}
	}
	
	// Interface for AttributeMetadataCollectionWrapper
	internal interface IAttributeMetadataCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.AttributeMetadata this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.AttributeMetadata metadata);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.AttributeMetadata metadata);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.AttributeMetadata[] metadata, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ConfigurationSetWrapper
	internal interface IConfigurationSetWrapper
	{
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection Sites
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AdamInstanceCollection AdamInstances
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection ApplicationPartitions
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema Schema
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AdamInstance SchemaRoleOwner
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AdamInstance NamingRoleOwner
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ConfigurationSet Wrapped
		{
			get;
		}
		
		void Dispose();
		
		System.DirectoryServices.ActiveDirectory.AdamInstance FindAdamInstance();
		
		System.DirectoryServices.ActiveDirectory.AdamInstance FindAdamInstance(string partitionName);
		
		System.DirectoryServices.ActiveDirectory.AdamInstance FindAdamInstance(string partitionName, string siteName);
		
		System.DirectoryServices.ActiveDirectory.AdamInstanceCollection FindAllAdamInstances();
		
		System.DirectoryServices.ActiveDirectory.AdamInstanceCollection FindAllAdamInstances(string partitionName);
		
		System.DirectoryServices.ActiveDirectory.AdamInstanceCollection FindAllAdamInstances(string partitionName, string siteName);
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
		
		System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel GetSecurityLevel();
		
		void SetSecurityLevel(System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel securityLevel);
		
		string ToString();
	}
	
	// Interface for DirectoryContextWrapper
	internal interface IDirectoryContextWrapper
	{
		
		string Name
		{
			get;
		}
		
		string UserName
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DirectoryContextType ContextType
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DirectoryContext Wrapped
		{
			get;
		}
	}
	
	// Interface for DirectoryServerCollectionWrapper
	internal interface IDirectoryServerCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer this[int index]
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DirectoryServerCollection Wrapped
		{
			get;
		}
		
		int Add(System.DirectoryServices.ActiveDirectory.DirectoryServer server);
		
		void AddRange(System.DirectoryServices.ActiveDirectory.DirectoryServer[] servers);
		
		bool Contains(System.DirectoryServices.ActiveDirectory.DirectoryServer server);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.DirectoryServer[] array, int index);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.DirectoryServer server);
		
		void Insert(int index, System.DirectoryServices.ActiveDirectory.DirectoryServer server);
		
		void Remove(System.DirectoryServices.ActiveDirectory.DirectoryServer server);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for DomainWrapper
	internal interface IDomainWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.Forest Forest
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainControllerCollection DomainControllers
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainCollection Children
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainMode DomainMode
		{
			get;
		}
		
		int DomainModeLevel
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.Domain Parent
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainController PdcRoleOwner
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainController RidRoleOwner
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainController InfrastructureRoleOwner
		{
			get;
		}
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.Domain Wrapped
		{
			get;
		}
		
		void RaiseDomainFunctionalityLevel(int domainMode);
		
		void RaiseDomainFunctionality(System.DirectoryServices.ActiveDirectory.DomainMode domainMode);
		
		System.DirectoryServices.ActiveDirectory.DomainController FindDomainController();
		
		System.DirectoryServices.ActiveDirectory.DomainController FindDomainController(string siteName);
		
		System.DirectoryServices.ActiveDirectory.DomainController FindDomainController(System.DirectoryServices.ActiveDirectory.LocatorOptions flag);
		
		System.DirectoryServices.ActiveDirectory.DomainController FindDomainController(string siteName, System.DirectoryServices.ActiveDirectory.LocatorOptions flag);
		
		System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDomainControllers();
		
		System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDomainControllers(string siteName);
		
		System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDiscoverableDomainControllers();
		
		System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDiscoverableDomainControllers(string siteName);
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
		
		System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection GetAllTrustRelationships();
		
		System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation GetTrustRelationship(string targetDomainName);
		
		bool GetSelectiveAuthenticationStatus(string targetDomainName);
		
		void SetSelectiveAuthenticationStatus(string targetDomainName, bool enable);
		
		bool GetSidFilteringStatus(string targetDomainName);
		
		void SetSidFilteringStatus(string targetDomainName, bool enable);
		
		void DeleteLocalSideOfTrustRelationship(string targetDomainName);
		
		void DeleteTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain targetDomain);
		
		void VerifyOutboundTrustRelationship(string targetDomainName);
		
		void VerifyTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection direction);
		
		void CreateLocalSideOfTrustRelationship(string targetDomainName, System.DirectoryServices.ActiveDirectory.TrustDirection direction, string trustPassword);
		
		void CreateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection direction);
		
		void UpdateLocalSideOfTrustRelationship(string targetDomainName, string newTrustPassword);
		
		void UpdateLocalSideOfTrustRelationship(string targetDomainName, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection, string newTrustPassword);
		
		void UpdateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection);
		
		void RepairTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain targetDomain);
		
		void Dispose();
		
		string ToString();
	}
	
	// Interface for DomainCollectionWrapper
	internal interface IDomainCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.Domain this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.Domain domain);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.Domain domain);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.Domain[] domains, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for SyncUpdateCallbackWrapper
	internal interface ISyncUpdateCallbackWrapper
	{
		
		System.Reflection.MethodInfo Method
		{
			get;
		}
		
		object Target
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.SyncUpdateCallback Wrapped
		{
			get;
		}
		
		bool Invoke(System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent eventType, string targetServer, string sourceServer, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException exception);
		
		System.IAsyncResult BeginInvoke(System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent eventType, string targetServer, string sourceServer, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException exception, System.AsyncCallback callback, object @object);
		
		bool EndInvoke(System.IAsyncResult result);
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		
		bool Equals(object obj);
		
		System.Delegate[] GetInvocationList();
		
		int GetHashCode();
		
		object DynamicInvoke(object[] args);
		
		object Clone();
	}
	
	// Interface for DomainControllerWrapper
	internal interface IDomainControllerWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.Forest Forest
		{
			get;
		}
		
		System.DateTime CurrentTime
		{
			get;
		}
		
		long HighestCommittedUsn
		{
			get;
		}
		
		string OSVersion
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection Roles
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.Domain Domain
		{
			get;
		}
		
		string IPAddress
		{
			get;
		}
		
		string SiteName
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.SyncUpdateCallback SyncFromAllServersCallback
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection InboundConnections
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection OutboundConnections
		{
			get;
		}
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection Partitions
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainController Wrapped
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalog EnableGlobalCatalog();
		
		bool IsGlobalCatalog();
		
		void TransferRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role);
		
		void SeizeRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role);
		
		System.DirectoryServices.DirectorySearcher GetDirectorySearcher();
		
		void CheckReplicationConsistency();
		
		System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection GetReplicationCursors(string partition);
		
		System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation GetReplicationOperationInformation();
		
		System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection GetReplicationNeighbors(string partition);
		
		System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection GetAllReplicationNeighbors();
		
		System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection GetReplicationConnectionFailures();
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath);
		
		void SyncReplicaFromServer(string partition, string sourceServer);
		
		void TriggerSyncReplicaFromNeighbors(string partition);
		
		void SyncReplicaFromAllServers(string partition, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions options);
		
		void Dispose();
		
		string ToString();
		
		void MoveToAnotherSite(string siteName);
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
	}
	
	// Interface for DomainControllerCollectionWrapper
	internal interface IDomainControllerCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.DomainController this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainControllerCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.DomainController domainController);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.DomainController domainController);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.DomainController[] domainControllers, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for SyncFromAllServersErrorInformationWrapper
	internal interface ISyncFromAllServersErrorInformationWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorCategory ErrorCategory
		{
			get;
		}
		
		int ErrorCode
		{
			get;
		}
		
		string ErrorMessage
		{
			get;
		}
		
		string TargetServer
		{
			get;
		}
		
		string SourceServer
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation Wrapped
		{
			get;
		}
	}
	
	// Interface for ActiveDirectoryObjectNotFoundExceptionWrapper
	internal interface IActiveDirectoryObjectNotFoundExceptionWrapper
	{
		
		System.Type Type
		{
			get;
		}
		
		string Name
		{
			get;
		}
		
		string Message
		{
			get;
		}
		
		System.Collections.IDictionary Data
		{
			get;
		}
		
		System.Exception InnerException
		{
			get;
		}
		
		System.Reflection.MethodBase TargetSite
		{
			get;
		}
		
		string StackTrace
		{
			get;
		}
		
		string HelpLink
		{
			get;
			set;
		}
		
		string Source
		{
			get;
			set;
		}
		
		int HResult
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException Wrapped
		{
			get;
		}
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
		
		System.Exception GetBaseException();
		
		string ToString();
		
		System.Type GetType();
	}
	
	// Interface for ActiveDirectoryOperationExceptionWrapper
	internal interface IActiveDirectoryOperationExceptionWrapper
	{
		
		int ErrorCode
		{
			get;
		}
		
		string Message
		{
			get;
		}
		
		System.Collections.IDictionary Data
		{
			get;
		}
		
		System.Exception InnerException
		{
			get;
		}
		
		System.Reflection.MethodBase TargetSite
		{
			get;
		}
		
		string StackTrace
		{
			get;
		}
		
		string HelpLink
		{
			get;
			set;
		}
		
		string Source
		{
			get;
			set;
		}
		
		int HResult
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException Wrapped
		{
			get;
		}
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
		
		System.Exception GetBaseException();
		
		string ToString();
		
		System.Type GetType();
	}
	
	// Interface for ActiveDirectoryServerDownExceptionWrapper
	internal interface IActiveDirectoryServerDownExceptionWrapper
	{
		
		int ErrorCode
		{
			get;
		}
		
		string Name
		{
			get;
		}
		
		string Message
		{
			get;
		}
		
		System.Collections.IDictionary Data
		{
			get;
		}
		
		System.Exception InnerException
		{
			get;
		}
		
		System.Reflection.MethodBase TargetSite
		{
			get;
		}
		
		string StackTrace
		{
			get;
		}
		
		string HelpLink
		{
			get;
			set;
		}
		
		string Source
		{
			get;
			set;
		}
		
		int HResult
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException Wrapped
		{
			get;
		}
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
		
		System.Exception GetBaseException();
		
		string ToString();
		
		System.Type GetType();
	}
	
	// Interface for ActiveDirectoryObjectExistsExceptionWrapper
	internal interface IActiveDirectoryObjectExistsExceptionWrapper
	{
		
		string Message
		{
			get;
		}
		
		System.Collections.IDictionary Data
		{
			get;
		}
		
		System.Exception InnerException
		{
			get;
		}
		
		System.Reflection.MethodBase TargetSite
		{
			get;
		}
		
		string StackTrace
		{
			get;
		}
		
		string HelpLink
		{
			get;
			set;
		}
		
		string Source
		{
			get;
			set;
		}
		
		int HResult
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException Wrapped
		{
			get;
		}
		
		System.Exception GetBaseException();
		
		string ToString();
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		
		System.Type GetType();
	}
	
	// Interface for SyncFromAllServersOperationExceptionWrapper
	internal interface ISyncFromAllServersOperationExceptionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation[] ErrorInformation
		{
			get;
		}
		
		int ErrorCode
		{
			get;
		}
		
		string Message
		{
			get;
		}
		
		System.Collections.IDictionary Data
		{
			get;
		}
		
		System.Exception InnerException
		{
			get;
		}
		
		System.Reflection.MethodBase TargetSite
		{
			get;
		}
		
		string StackTrace
		{
			get;
		}
		
		string HelpLink
		{
			get;
			set;
		}
		
		string Source
		{
			get;
			set;
		}
		
		int HResult
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException Wrapped
		{
			get;
		}
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
		
		System.Exception GetBaseException();
		
		string ToString();
		
		System.Type GetType();
	}
	
	// Interface for ForestTrustCollisionExceptionWrapper
	internal interface IForestTrustCollisionExceptionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection Collisions
		{
			get;
		}
		
		int ErrorCode
		{
			get;
		}
		
		string Message
		{
			get;
		}
		
		System.Collections.IDictionary Data
		{
			get;
		}
		
		System.Exception InnerException
		{
			get;
		}
		
		System.Reflection.MethodBase TargetSite
		{
			get;
		}
		
		string StackTrace
		{
			get;
		}
		
		string HelpLink
		{
			get;
			set;
		}
		
		string Source
		{
			get;
			set;
		}
		
		int HResult
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException Wrapped
		{
			get;
		}
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
		
		System.Exception GetBaseException();
		
		string ToString();
		
		System.Type GetType();
	}
	
	// Interface for ForestWrapper
	internal interface IForestWrapper
	{
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection Sites
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainCollection Domains
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection GlobalCatalogs
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection ApplicationPartitions
		{
			get;
		}
		
		int ForestModeLevel
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestMode ForestMode
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.Domain RootDomain
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema Schema
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainController SchemaRoleOwner
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainController NamingRoleOwner
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.Forest Wrapped
		{
			get;
		}
		
		void Dispose();
		
		void RaiseForestFunctionalityLevel(int forestMode);
		
		void RaiseForestFunctionality(System.DirectoryServices.ActiveDirectory.ForestMode forestMode);
		
		string ToString();
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalog FindGlobalCatalog();
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalog FindGlobalCatalog(string siteName);
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalog FindGlobalCatalog(System.DirectoryServices.ActiveDirectory.LocatorOptions flag);
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalog FindGlobalCatalog(string siteName, System.DirectoryServices.ActiveDirectory.LocatorOptions flag);
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection FindAllGlobalCatalogs();
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection FindAllGlobalCatalogs(string siteName);
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection FindAllDiscoverableGlobalCatalogs();
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection FindAllDiscoverableGlobalCatalogs(string siteName);
		
		System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection GetAllTrustRelationships();
		
		System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation GetTrustRelationship(string targetForestName);
		
		bool GetSelectiveAuthenticationStatus(string targetForestName);
		
		void SetSelectiveAuthenticationStatus(string targetForestName, bool enable);
		
		bool GetSidFilteringStatus(string targetForestName);
		
		void SetSidFilteringStatus(string targetForestName, bool enable);
		
		void DeleteLocalSideOfTrustRelationship(string targetForestName);
		
		void DeleteTrustRelationship(System.DirectoryServices.ActiveDirectory.Forest targetForest);
		
		void VerifyOutboundTrustRelationship(string targetForestName);
		
		void VerifyTrustRelationship(System.DirectoryServices.ActiveDirectory.Forest targetForest, System.DirectoryServices.ActiveDirectory.TrustDirection direction);
		
		void CreateLocalSideOfTrustRelationship(string targetForestName, System.DirectoryServices.ActiveDirectory.TrustDirection direction, string trustPassword);
		
		void CreateTrustRelationship(System.DirectoryServices.ActiveDirectory.Forest targetForest, System.DirectoryServices.ActiveDirectory.TrustDirection direction);
		
		void UpdateLocalSideOfTrustRelationship(string targetForestName, string newTrustPassword);
		
		void UpdateLocalSideOfTrustRelationship(string targetForestName, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection, string newTrustPassword);
		
		void UpdateTrustRelationship(System.DirectoryServices.ActiveDirectory.Forest targetForest, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection);
		
		void RepairTrustRelationship(System.DirectoryServices.ActiveDirectory.Forest targetForest);
	}
	
	// Interface for ForestTrustRelationshipCollisionWrapper
	internal interface IForestTrustRelationshipCollisionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ForestTrustCollisionType CollisionType
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TopLevelNameCollisionOptions TopLevelNameCollisionOption
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainCollisionOptions DomainCollisionOption
		{
			get;
		}
		
		string CollisionRecord
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision Wrapped
		{
			get;
		}
	}
	
	// Interface for ForestTrustRelationshipCollisionCollectionWrapper
	internal interface IForestTrustRelationshipCollisionCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision collision);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision collision);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision[] array, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ForestTrustDomainInfoCollectionWrapper
	internal interface IForestTrustDomainInfoCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation information);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation information);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation[] array, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ForestTrustDomainInformationWrapper
	internal interface IForestTrustDomainInformationWrapper
	{
		
		string DnsName
		{
			get;
		}
		
		string NetBiosName
		{
			get;
		}
		
		string DomainSid
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustDomainStatus Status
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation Wrapped
		{
			get;
		}
	}
	
	// Interface for ForestTrustRelationshipInformationWrapper
	internal interface IForestTrustRelationshipInformationWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.TopLevelNameCollection TopLevelNames
		{
			get;
		}
		
		System.Collections.Specialized.StringCollection ExcludedTopLevelNames
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection TrustedDomainInformation
		{
			get;
		}
		
		string SourceName
		{
			get;
		}
		
		string TargetName
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TrustType TrustType
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TrustDirection TrustDirection
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation Wrapped
		{
			get;
		}
		
		void Save();
	}
	
	// Interface for GlobalCatalogWrapper
	internal interface IGlobalCatalogWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.Forest Forest
		{
			get;
		}
		
		System.DateTime CurrentTime
		{
			get;
		}
		
		long HighestCommittedUsn
		{
			get;
		}
		
		string OSVersion
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection Roles
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.Domain Domain
		{
			get;
		}
		
		string IPAddress
		{
			get;
		}
		
		string SiteName
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.SyncUpdateCallback SyncFromAllServersCallback
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection InboundConnections
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection OutboundConnections
		{
			get;
		}
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection Partitions
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalog Wrapped
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalog EnableGlobalCatalog();
		
		System.DirectoryServices.ActiveDirectory.DomainController DisableGlobalCatalog();
		
		bool IsGlobalCatalog();
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties();
		
		System.DirectoryServices.DirectorySearcher GetDirectorySearcher();
		
		void TransferRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role);
		
		void SeizeRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role);
		
		void CheckReplicationConsistency();
		
		System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection GetReplicationCursors(string partition);
		
		System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation GetReplicationOperationInformation();
		
		System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection GetReplicationNeighbors(string partition);
		
		System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection GetAllReplicationNeighbors();
		
		System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection GetReplicationConnectionFailures();
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath);
		
		void SyncReplicaFromServer(string partition, string sourceServer);
		
		void TriggerSyncReplicaFromNeighbors(string partition);
		
		void SyncReplicaFromAllServers(string partition, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions options);
		
		void Dispose();
		
		string ToString();
		
		void MoveToAnotherSite(string siteName);
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
	}
	
	// Interface for GlobalCatalogCollectionWrapper
	internal interface IGlobalCatalogCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalog this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.GlobalCatalog globalCatalog);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.GlobalCatalog globalCatalog);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.GlobalCatalog[] globalCatalogs, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReadOnlyActiveDirectorySchemaClassCollectionWrapper
	internal interface IReadOnlyActiveDirectorySchemaClassCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass schemaClass);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass schemaClass);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass[] classes, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReadOnlyActiveDirectorySchemaPropertyCollectionWrapper
	internal interface IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty schemaProperty);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty schemaProperty);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty[] properties, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReadOnlyDirectoryServerCollectionWrapper
	internal interface IReadOnlyDirectoryServerCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.DirectoryServer directoryServer);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.DirectoryServer directoryServer);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.DirectoryServer[] directoryServers, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReadOnlySiteCollectionWrapper
	internal interface IReadOnlySiteCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySite this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite site);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite site);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite[] sites, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReadOnlySiteLinkBridgeCollectionWrapper
	internal interface IReadOnlySiteLinkBridgeCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge bridge);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge bridge);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge[] bridges, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReadOnlySiteLinkCollectionWrapper
	internal interface IReadOnlySiteLinkCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink link);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink link);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink[] links, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReadOnlyStringCollectionWrapper
	internal interface IReadOnlyStringCollectionWrapper
	{
		
		string this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection Wrapped
		{
			get;
		}
		
		bool Contains(string value);
		
		int IndexOf(string value);
		
		void CopyTo(string[] values, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReplicationConnectionWrapper
	internal interface IReplicationConnectionWrapper
	{
		
		string Name
		{
			get;
		}
		
		string SourceServer
		{
			get;
		}
		
		string DestinationServer
		{
			get;
		}
		
		bool Enabled
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get;
		}
		
		bool GeneratedByKcc
		{
			get;
			set;
		}
		
		bool ReciprocalReplicationEnabled
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.NotificationStatus ChangeNotificationStatus
		{
			get;
			set;
		}
		
		bool DataCompressionEnabled
		{
			get;
			set;
		}
		
		bool ReplicationScheduleOwnedByUser
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationSpan ReplicationSpan
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule ReplicationSchedule
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationConnection Wrapped
		{
			get;
		}
		
		void Dispose();
		
		void Delete();
		
		void Save();
		
		string ToString();
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
	}
	
	// Interface for ReplicationConnectionCollectionWrapper
	internal interface IReplicationConnectionCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ReplicationConnection this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ReplicationConnection connection);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ReplicationConnection connection);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ReplicationConnection[] connections, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReplicationCursorWrapper
	internal interface IReplicationCursorWrapper
	{
		
		string PartitionName
		{
			get;
		}
		
		System.Guid SourceInvocationId
		{
			get;
		}
		
		long UpToDatenessUsn
		{
			get;
		}
		
		string SourceServer
		{
			get;
		}
		
		System.DateTime LastSuccessfulSyncTime
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationCursor Wrapped
		{
			get;
		}
	}
	
	// Interface for ReplicationCursorCollectionWrapper
	internal interface IReplicationCursorCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ReplicationCursor this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ReplicationCursor cursor);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ReplicationCursor cursor);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ReplicationCursor[] values, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReplicationFailureWrapper
	internal interface IReplicationFailureWrapper
	{
		
		string SourceServer
		{
			get;
		}
		
		System.DateTime FirstFailureTime
		{
			get;
		}
		
		int ConsecutiveFailureCount
		{
			get;
		}
		
		int LastErrorCode
		{
			get;
		}
		
		string LastErrorMessage
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationFailure Wrapped
		{
			get;
		}
	}
	
	// Interface for ReplicationFailureCollectionWrapper
	internal interface IReplicationFailureCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ReplicationFailure this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ReplicationFailure failure);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ReplicationFailure failure);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ReplicationFailure[] failures, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReplicationNeighborWrapper
	internal interface IReplicationNeighborWrapper
	{
		
		string PartitionName
		{
			get;
		}
		
		string SourceServer
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationNeighbor.ReplicationNeighborOptions ReplicationNeighborOption
		{
			get;
		}
		
		System.Guid SourceInvocationId
		{
			get;
		}
		
		long UsnLastObjectChangeSynced
		{
			get;
		}
		
		long UsnAttributeFilter
		{
			get;
		}
		
		System.DateTime LastSuccessfulSync
		{
			get;
		}
		
		System.DateTime LastAttemptedSync
		{
			get;
		}
		
		int LastSyncResult
		{
			get;
		}
		
		string LastSyncMessage
		{
			get;
		}
		
		int ConsecutiveFailureCount
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationNeighbor Wrapped
		{
			get;
		}
	}
	
	// Interface for ReplicationNeighborCollectionWrapper
	internal interface IReplicationNeighborCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ReplicationNeighbor this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ReplicationNeighbor neighbor);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ReplicationNeighbor neighbor);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ReplicationNeighbor[] neighbors, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReplicationOperationWrapper
	internal interface IReplicationOperationWrapper
	{
		
		System.DateTime TimeEnqueued
		{
			get;
		}
		
		int OperationNumber
		{
			get;
		}
		
		int Priority
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationOperationType OperationType
		{
			get;
		}
		
		string PartitionName
		{
			get;
		}
		
		string SourceServer
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationOperation Wrapped
		{
			get;
		}
	}
	
	// Interface for ReplicationOperationCollectionWrapper
	internal interface IReplicationOperationCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ReplicationOperation this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ReplicationOperation operation);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ReplicationOperation operation);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ReplicationOperation[] operations, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReplicationOperationInformationWrapper
	internal interface IReplicationOperationInformationWrapper
	{
		
		System.DateTime OperationStartTime
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationOperation CurrentOperation
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection PendingOperations
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation Wrapped
		{
			get;
		}
	}
	
	// Interface for ActiveDirectoryInterSiteTransportWrapper
	internal interface IActiveDirectoryInterSiteTransportWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get;
		}
		
		bool IgnoreReplicationSchedule
		{
			get;
			set;
		}
		
		bool BridgeAllSiteLinks
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection SiteLinks
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection SiteLinkBridges
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport Wrapped
		{
			get;
		}
		
		void Save();
		
		System.DirectoryServices.DirectoryEntry GetDirectoryEntry();
		
		void Dispose();
		
		string ToString();
	}
	
	// Interface for ActiveDirectoryRoleCollectionWrapper
	internal interface IActiveDirectoryRoleCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole[] roles, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for AdamRoleCollectionWrapper
	internal interface IAdamRoleCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.AdamRole this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AdamRoleCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.AdamRole role);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.AdamRole role);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.AdamRole[] roles, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for TopLevelNameWrapper
	internal interface ITopLevelNameWrapper
	{
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TopLevelNameStatus Status
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.TopLevelName Wrapped
		{
			get;
		}
	}
	
	// Interface for TopLevelNameCollectionWrapper
	internal interface ITopLevelNameCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.TopLevelName this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TopLevelNameCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.TopLevelName name);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.TopLevelName name);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.TopLevelName[] names, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for TrustRelationshipInformationWrapper
	internal interface ITrustRelationshipInformationWrapper
	{
		
		string SourceName
		{
			get;
		}
		
		string TargetName
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TrustType TrustType
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TrustDirection TrustDirection
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation Wrapped
		{
			get;
		}
	}
	
	// Interface for TrustRelationshipInformationCollectionWrapper
	internal interface ITrustRelationshipInformationCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation information);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation information);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation[] array, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	public sealed partial class ActiveDirectorySecurityWrapper : IActiveDirectorySecurityWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectorySecurity _wrapped;
		
		public ActiveDirectorySecurityWrapper(System.DirectoryServices.ActiveDirectorySecurity wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.Type AccessRightType
		{
			get
			{
				return this._wrapped.AccessRightType;
			}
		}
		
		public System.Type AccessRuleType
		{
			get
			{
				return this._wrapped.AccessRuleType;
			}
		}
		
		public System.Type AuditRuleType
		{
			get
			{
				return this._wrapped.AuditRuleType;
			}
		}
		
		public bool AreAccessRulesProtected
		{
			get
			{
				return this._wrapped.AreAccessRulesProtected;
			}
		}
		
		public bool AreAuditRulesProtected
		{
			get
			{
				return this._wrapped.AreAuditRulesProtected;
			}
		}
		
		public bool AreAccessRulesCanonical
		{
			get
			{
				return this._wrapped.AreAccessRulesCanonical;
			}
		}
		
		public bool AreAuditRulesCanonical
		{
			get
			{
				return this._wrapped.AreAuditRulesCanonical;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurity Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void AddAccessRule(System.DirectoryServices.ActiveDirectoryAccessRule rule)
		{
			this._wrapped.AddAccessRule(rule);
		}
		
		public void SetAccessRule(System.DirectoryServices.ActiveDirectoryAccessRule rule)
		{
			this._wrapped.SetAccessRule(rule);
		}
		
		public void ResetAccessRule(System.DirectoryServices.ActiveDirectoryAccessRule rule)
		{
			this._wrapped.ResetAccessRule(rule);
		}
		
		public void RemoveAccess(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.AccessControlType type)
		{
			this._wrapped.RemoveAccess(identity, type);
		}
		
		public bool RemoveAccessRule(System.DirectoryServices.ActiveDirectoryAccessRule rule)
		{
			return this._wrapped.RemoveAccessRule(rule);
		}
		
		public void RemoveAccessRuleSpecific(System.DirectoryServices.ActiveDirectoryAccessRule rule)
		{
			this._wrapped.RemoveAccessRuleSpecific(rule);
		}
		
		public bool ModifyAccessRule(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, out bool modified)
		{
			return this._wrapped.ModifyAccessRule(modification, rule, out modified);
		}
		
		public void PurgeAccessRules(System.Security.Principal.IdentityReference identity)
		{
			this._wrapped.PurgeAccessRules(identity);
		}
		
		public void AddAuditRule(System.DirectoryServices.ActiveDirectoryAuditRule rule)
		{
			this._wrapped.AddAuditRule(rule);
		}
		
		public void SetAuditRule(System.DirectoryServices.ActiveDirectoryAuditRule rule)
		{
			this._wrapped.SetAuditRule(rule);
		}
		
		public void RemoveAudit(System.Security.Principal.IdentityReference identity)
		{
			this._wrapped.RemoveAudit(identity);
		}
		
		public bool RemoveAuditRule(System.DirectoryServices.ActiveDirectoryAuditRule rule)
		{
			return this._wrapped.RemoveAuditRule(rule);
		}
		
		public void RemoveAuditRuleSpecific(System.DirectoryServices.ActiveDirectoryAuditRule rule)
		{
			this._wrapped.RemoveAuditRuleSpecific(rule);
		}
		
		public bool ModifyAuditRule(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AuditRule rule, out bool modified)
		{
			return this._wrapped.ModifyAuditRule(modification, rule, out modified);
		}
		
		public void PurgeAuditRules(System.Security.Principal.IdentityReference identity)
		{
			this._wrapped.PurgeAuditRules(identity);
		}
		
		public System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type)
		{
			return this._wrapped.AccessRuleFactory(identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type);
		}
		
		public System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type, System.Guid objectGuid, System.Guid inheritedObjectGuid)
		{
			return this._wrapped.AccessRuleFactory(identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type, objectGuid, inheritedObjectGuid);
		}
		
		public System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags)
		{
			return this._wrapped.AuditRuleFactory(identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags);
		}
		
		public System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags, System.Guid objectGuid, System.Guid inheritedObjectGuid)
		{
			return this._wrapped.AuditRuleFactory(identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags, objectGuid, inheritedObjectGuid);
		}
		
		public System.Security.AccessControl.AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, System.Type targetType)
		{
			return this._wrapped.GetAccessRules(includeExplicit, includeInherited, targetType);
		}
		
		public System.Security.AccessControl.AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, System.Type targetType)
		{
			return this._wrapped.GetAuditRules(includeExplicit, includeInherited, targetType);
		}
		
		public byte[] GetSecurityDescriptorBinaryForm()
		{
			return this._wrapped.GetSecurityDescriptorBinaryForm();
		}
		
		public System.Security.Principal.IdentityReference GetOwner(System.Type targetType)
		{
			return this._wrapped.GetOwner(targetType);
		}
		
		public void SetOwner(System.Security.Principal.IdentityReference identity)
		{
			this._wrapped.SetOwner(identity);
		}
		
		public System.Security.Principal.IdentityReference GetGroup(System.Type targetType)
		{
			return this._wrapped.GetGroup(targetType);
		}
		
		public void SetGroup(System.Security.Principal.IdentityReference identity)
		{
			this._wrapped.SetGroup(identity);
		}
		
		public void SetAccessRuleProtection(bool isProtected, bool preserveInheritance)
		{
			this._wrapped.SetAccessRuleProtection(isProtected, preserveInheritance);
		}
		
		public void SetAuditRuleProtection(bool isProtected, bool preserveInheritance)
		{
			this._wrapped.SetAuditRuleProtection(isProtected, preserveInheritance);
		}
		
		public string GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections includeSections)
		{
			return this._wrapped.GetSecurityDescriptorSddlForm(includeSections);
		}
		
		public void SetSecurityDescriptorSddlForm(string sddlForm)
		{
			this._wrapped.SetSecurityDescriptorSddlForm(sddlForm);
		}
		
		public void SetSecurityDescriptorSddlForm(string sddlForm, System.Security.AccessControl.AccessControlSections includeSections)
		{
			this._wrapped.SetSecurityDescriptorSddlForm(sddlForm, includeSections);
		}
		
		public void SetSecurityDescriptorBinaryForm(byte[] binaryForm)
		{
			this._wrapped.SetSecurityDescriptorBinaryForm(binaryForm);
		}
		
		public void SetSecurityDescriptorBinaryForm(byte[] binaryForm, System.Security.AccessControl.AccessControlSections includeSections)
		{
			this._wrapped.SetSecurityDescriptorBinaryForm(binaryForm, includeSections);
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectoryAccessRuleWrapper : IActiveDirectoryAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectoryAccessRule _wrapped;
		
		public ActiveDirectoryAccessRuleWrapper(System.DirectoryServices.ActiveDirectoryAccessRule wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return this._wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return this._wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return this._wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return this._wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return this._wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return this._wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return this._wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return this._wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return this._wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return this._wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.ActiveDirectoryAccessRule Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ListChildrenAccessRuleWrapper : IListChildrenAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.ListChildrenAccessRule _wrapped;
		
		public ListChildrenAccessRuleWrapper(System.DirectoryServices.ListChildrenAccessRule wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return this._wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return this._wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return this._wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return this._wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return this._wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return this._wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return this._wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return this._wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return this._wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return this._wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.ListChildrenAccessRule Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class CreateChildAccessRuleWrapper : ICreateChildAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.CreateChildAccessRule _wrapped;
		
		public CreateChildAccessRuleWrapper(System.DirectoryServices.CreateChildAccessRule wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return this._wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return this._wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return this._wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return this._wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return this._wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return this._wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return this._wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return this._wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return this._wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return this._wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.CreateChildAccessRule Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DeleteChildAccessRuleWrapper : IDeleteChildAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.DeleteChildAccessRule _wrapped;
		
		public DeleteChildAccessRuleWrapper(System.DirectoryServices.DeleteChildAccessRule wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return this._wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return this._wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return this._wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return this._wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return this._wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return this._wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return this._wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return this._wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return this._wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return this._wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.DeleteChildAccessRule Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class PropertyAccessRuleWrapper : IPropertyAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.PropertyAccessRule _wrapped;
		
		public PropertyAccessRuleWrapper(System.DirectoryServices.PropertyAccessRule wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return this._wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return this._wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return this._wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return this._wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return this._wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return this._wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return this._wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return this._wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return this._wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return this._wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.PropertyAccessRule Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class PropertySetAccessRuleWrapper : IPropertySetAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.PropertySetAccessRule _wrapped;
		
		public PropertySetAccessRuleWrapper(System.DirectoryServices.PropertySetAccessRule wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return this._wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return this._wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return this._wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return this._wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return this._wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return this._wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return this._wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return this._wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return this._wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return this._wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.PropertySetAccessRule Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ExtendedRightAccessRuleWrapper : IExtendedRightAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.ExtendedRightAccessRule _wrapped;
		
		public ExtendedRightAccessRuleWrapper(System.DirectoryServices.ExtendedRightAccessRule wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return this._wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return this._wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return this._wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return this._wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return this._wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return this._wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return this._wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return this._wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return this._wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return this._wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.ExtendedRightAccessRule Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DeleteTreeAccessRuleWrapper : IDeleteTreeAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.DeleteTreeAccessRule _wrapped;
		
		public DeleteTreeAccessRuleWrapper(System.DirectoryServices.DeleteTreeAccessRule wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return this._wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return this._wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return this._wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return this._wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return this._wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return this._wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return this._wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return this._wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return this._wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return this._wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.DeleteTreeAccessRule Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectoryAuditRuleWrapper : IActiveDirectoryAuditRuleWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectoryAuditRule _wrapped;
		
		public ActiveDirectoryAuditRuleWrapper(System.DirectoryServices.ActiveDirectoryAuditRule wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return this._wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return this._wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return this._wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return this._wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return this._wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AuditFlags AuditFlags
		{
			get
			{
				return this._wrapped.AuditFlags;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return this._wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return this._wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return this._wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return this._wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.ActiveDirectoryAuditRule Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DSDescriptionAttributeWrapper : IDSDescriptionAttributeWrapper
	{
		
		private readonly System.DirectoryServices.DSDescriptionAttribute _wrapped;
		
		public DSDescriptionAttributeWrapper(System.DirectoryServices.DSDescriptionAttribute wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Description
		{
			get
			{
				return this._wrapped.Description;
			}
		}
		
		public object TypeId
		{
			get
			{
				return this._wrapped.TypeId;
			}
		}
		
		public System.DirectoryServices.DSDescriptionAttribute Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
		
		public bool IsDefaultAttribute()
		{
			return this._wrapped.IsDefaultAttribute();
		}
		
		public bool Match(object obj)
		{
			return this._wrapped.Match(obj);
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
	}
	
	public sealed partial class DirectoryEntriesWrapper : IDirectoryEntriesWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryEntries _wrapped;
		
		public DirectoryEntriesWrapper(System.DirectoryServices.DirectoryEntries wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.SchemaNameCollection SchemaFilter
		{
			get
			{
				return this._wrapped.SchemaFilter;
			}
		}
		
		public System.DirectoryServices.DirectoryEntries Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public System.DirectoryServices.DirectoryEntry Add(string name, string schemaClassName)
		{
			return this._wrapped.Add(name, schemaClassName);
		}
		
		public System.DirectoryServices.DirectoryEntry Find(string name)
		{
			return this._wrapped.Find(name);
		}
		
		public System.DirectoryServices.DirectoryEntry Find(string name, string schemaClassName)
		{
			return this._wrapped.Find(name, schemaClassName);
		}
		
		public void Remove(System.DirectoryServices.DirectoryEntry entry)
		{
			this._wrapped.Remove(entry);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DirectoryEntryWrapper : IDirectoryEntryWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryEntry _wrapped;
		
		public DirectoryEntryWrapper(System.DirectoryServices.DirectoryEntry wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.AuthenticationTypes AuthenticationType
		{
			get
			{
				return this._wrapped.AuthenticationType;
			}
			set
			{
				this._wrapped.AuthenticationType = value;
			}
		}
		
		public System.DirectoryServices.DirectoryEntries Children
		{
			get
			{
				return this._wrapped.Children;
			}
		}
		
		public System.Guid Guid
		{
			get
			{
				return this._wrapped.Guid;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurity ObjectSecurity
		{
			get
			{
				return this._wrapped.ObjectSecurity;
			}
			set
			{
				this._wrapped.ObjectSecurity = value;
			}
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public string NativeGuid
		{
			get
			{
				return this._wrapped.NativeGuid;
			}
		}
		
		public object NativeObject
		{
			get
			{
				return this._wrapped.NativeObject;
			}
		}
		
		public System.DirectoryServices.DirectoryEntry Parent
		{
			get
			{
				return this._wrapped.Parent;
			}
		}
		
		public string Password
		{
			set
			{
				this._wrapped.Password = value;
			}
		}
		
		public string Path
		{
			get
			{
				return this._wrapped.Path;
			}
			set
			{
				this._wrapped.Path = value;
			}
		}
		
		public System.DirectoryServices.PropertyCollection Properties
		{
			get
			{
				return this._wrapped.Properties;
			}
		}
		
		public string SchemaClassName
		{
			get
			{
				return this._wrapped.SchemaClassName;
			}
		}
		
		public System.DirectoryServices.DirectoryEntry SchemaEntry
		{
			get
			{
				return this._wrapped.SchemaEntry;
			}
		}
		
		public bool UsePropertyCache
		{
			get
			{
				return this._wrapped.UsePropertyCache;
			}
			set
			{
				this._wrapped.UsePropertyCache = value;
			}
		}
		
		public string Username
		{
			get
			{
				return this._wrapped.Username;
			}
			set
			{
				this._wrapped.Username = value;
			}
		}
		
		public System.DirectoryServices.DirectoryEntryConfiguration Options
		{
			get
			{
				return this._wrapped.Options;
			}
		}
		
		public System.ComponentModel.ISite Site
		{
			get
			{
				return this._wrapped.Site;
			}
			set
			{
				this._wrapped.Site = value;
			}
		}
		
		public System.ComponentModel.IContainer Container
		{
			get
			{
				return this._wrapped.Container;
			}
		}
		
		public System.DirectoryServices.DirectoryEntry Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void Close()
		{
			this._wrapped.Close();
		}
		
		public void CommitChanges()
		{
			this._wrapped.CommitChanges();
		}
		
		public System.DirectoryServices.DirectoryEntry CopyTo(System.DirectoryServices.DirectoryEntry newParent)
		{
			return this._wrapped.CopyTo(newParent);
		}
		
		public System.DirectoryServices.DirectoryEntry CopyTo(System.DirectoryServices.DirectoryEntry newParent, string newName)
		{
			return this._wrapped.CopyTo(newParent, newName);
		}
		
		public void DeleteTree()
		{
			this._wrapped.DeleteTree();
		}
		
		public object Invoke(string methodName, object[] args)
		{
			return this._wrapped.Invoke(methodName, args);
		}
		
		public object InvokeGet(string propertyName)
		{
			return this._wrapped.InvokeGet(propertyName);
		}
		
		public void InvokeSet(string propertyName, object[] args)
		{
			this._wrapped.InvokeSet(propertyName, args);
		}
		
		public void MoveTo(System.DirectoryServices.DirectoryEntry newParent)
		{
			this._wrapped.MoveTo(newParent);
		}
		
		public void MoveTo(System.DirectoryServices.DirectoryEntry newParent, string newName)
		{
			this._wrapped.MoveTo(newParent, newName);
		}
		
		public void RefreshCache()
		{
			this._wrapped.RefreshCache();
		}
		
		public void RefreshCache(string[] propertyNames)
		{
			this._wrapped.RefreshCache(propertyNames);
		}
		
		public void Rename(string newName)
		{
			this._wrapped.Rename(newName);
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public object GetLifetimeService()
		{
			return this._wrapped.GetLifetimeService();
		}
		
		public object InitializeLifetimeService()
		{
			return this._wrapped.InitializeLifetimeService();
		}
		
		public System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType)
		{
			return this._wrapped.CreateObjRef(requestedType);
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DirectoryEntryConfigurationWrapper : IDirectoryEntryConfigurationWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryEntryConfiguration _wrapped;
		
		public DirectoryEntryConfigurationWrapper(System.DirectoryServices.DirectoryEntryConfiguration wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ReferralChasingOption Referral
		{
			get
			{
				return this._wrapped.Referral;
			}
			set
			{
				this._wrapped.Referral = value;
			}
		}
		
		public System.DirectoryServices.SecurityMasks SecurityMasks
		{
			get
			{
				return this._wrapped.SecurityMasks;
			}
			set
			{
				this._wrapped.SecurityMasks = value;
			}
		}
		
		public int PageSize
		{
			get
			{
				return this._wrapped.PageSize;
			}
			set
			{
				this._wrapped.PageSize = value;
			}
		}
		
		public int PasswordPort
		{
			get
			{
				return this._wrapped.PasswordPort;
			}
			set
			{
				this._wrapped.PasswordPort = value;
			}
		}
		
		public System.DirectoryServices.PasswordEncodingMethod PasswordEncoding
		{
			get
			{
				return this._wrapped.PasswordEncoding;
			}
			set
			{
				this._wrapped.PasswordEncoding = value;
			}
		}
		
		public System.DirectoryServices.DirectoryEntryConfiguration Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public string GetCurrentServerName()
		{
			return this._wrapped.GetCurrentServerName();
		}
		
		public bool IsMutuallyAuthenticated()
		{
			return this._wrapped.IsMutuallyAuthenticated();
		}
		
		public void SetUserNameQueryQuota(string accountName)
		{
			this._wrapped.SetUserNameQueryQuota(accountName);
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DirectorySearcherWrapper : IDirectorySearcherWrapper
	{
		
		private readonly System.DirectoryServices.DirectorySearcher _wrapped;
		
		public DirectorySearcherWrapper(System.DirectoryServices.DirectorySearcher wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public bool CacheResults
		{
			get
			{
				return this._wrapped.CacheResults;
			}
			set
			{
				this._wrapped.CacheResults = value;
			}
		}
		
		public System.TimeSpan ClientTimeout
		{
			get
			{
				return this._wrapped.ClientTimeout;
			}
			set
			{
				this._wrapped.ClientTimeout = value;
			}
		}
		
		public bool PropertyNamesOnly
		{
			get
			{
				return this._wrapped.PropertyNamesOnly;
			}
			set
			{
				this._wrapped.PropertyNamesOnly = value;
			}
		}
		
		public string Filter
		{
			get
			{
				return this._wrapped.Filter;
			}
			set
			{
				this._wrapped.Filter = value;
			}
		}
		
		public int PageSize
		{
			get
			{
				return this._wrapped.PageSize;
			}
			set
			{
				this._wrapped.PageSize = value;
			}
		}
		
		public System.Collections.Specialized.StringCollection PropertiesToLoad
		{
			get
			{
				return this._wrapped.PropertiesToLoad;
			}
		}
		
		public System.DirectoryServices.ReferralChasingOption ReferralChasing
		{
			get
			{
				return this._wrapped.ReferralChasing;
			}
			set
			{
				this._wrapped.ReferralChasing = value;
			}
		}
		
		public System.DirectoryServices.SearchScope SearchScope
		{
			get
			{
				return this._wrapped.SearchScope;
			}
			set
			{
				this._wrapped.SearchScope = value;
			}
		}
		
		public System.TimeSpan ServerPageTimeLimit
		{
			get
			{
				return this._wrapped.ServerPageTimeLimit;
			}
			set
			{
				this._wrapped.ServerPageTimeLimit = value;
			}
		}
		
		public System.TimeSpan ServerTimeLimit
		{
			get
			{
				return this._wrapped.ServerTimeLimit;
			}
			set
			{
				this._wrapped.ServerTimeLimit = value;
			}
		}
		
		public int SizeLimit
		{
			get
			{
				return this._wrapped.SizeLimit;
			}
			set
			{
				this._wrapped.SizeLimit = value;
			}
		}
		
		public System.DirectoryServices.DirectoryEntry SearchRoot
		{
			get
			{
				return this._wrapped.SearchRoot;
			}
			set
			{
				this._wrapped.SearchRoot = value;
			}
		}
		
		public System.DirectoryServices.SortOption Sort
		{
			get
			{
				return this._wrapped.Sort;
			}
			set
			{
				this._wrapped.Sort = value;
			}
		}
		
		public bool Asynchronous
		{
			get
			{
				return this._wrapped.Asynchronous;
			}
			set
			{
				this._wrapped.Asynchronous = value;
			}
		}
		
		public bool Tombstone
		{
			get
			{
				return this._wrapped.Tombstone;
			}
			set
			{
				this._wrapped.Tombstone = value;
			}
		}
		
		public string AttributeScopeQuery
		{
			get
			{
				return this._wrapped.AttributeScopeQuery;
			}
			set
			{
				this._wrapped.AttributeScopeQuery = value;
			}
		}
		
		public System.DirectoryServices.DereferenceAlias DerefAlias
		{
			get
			{
				return this._wrapped.DerefAlias;
			}
			set
			{
				this._wrapped.DerefAlias = value;
			}
		}
		
		public System.DirectoryServices.SecurityMasks SecurityMasks
		{
			get
			{
				return this._wrapped.SecurityMasks;
			}
			set
			{
				this._wrapped.SecurityMasks = value;
			}
		}
		
		public System.DirectoryServices.ExtendedDN ExtendedDN
		{
			get
			{
				return this._wrapped.ExtendedDN;
			}
			set
			{
				this._wrapped.ExtendedDN = value;
			}
		}
		
		public System.DirectoryServices.DirectorySynchronization DirectorySynchronization
		{
			get
			{
				return this._wrapped.DirectorySynchronization;
			}
			set
			{
				this._wrapped.DirectorySynchronization = value;
			}
		}
		
		public System.DirectoryServices.DirectoryVirtualListView VirtualListView
		{
			get
			{
				return this._wrapped.VirtualListView;
			}
			set
			{
				this._wrapped.VirtualListView = value;
			}
		}
		
		public System.ComponentModel.ISite Site
		{
			get
			{
				return this._wrapped.Site;
			}
			set
			{
				this._wrapped.Site = value;
			}
		}
		
		public System.ComponentModel.IContainer Container
		{
			get
			{
				return this._wrapped.Container;
			}
		}
		
		public System.DirectoryServices.DirectorySearcher Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public System.DirectoryServices.SearchResult FindOne()
		{
			return this._wrapped.FindOne();
		}
		
		public System.DirectoryServices.SearchResultCollection FindAll()
		{
			return this._wrapped.FindAll();
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public object GetLifetimeService()
		{
			return this._wrapped.GetLifetimeService();
		}
		
		public object InitializeLifetimeService()
		{
			return this._wrapped.InitializeLifetimeService();
		}
		
		public System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType)
		{
			return this._wrapped.CreateObjRef(requestedType);
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DirectoryServicesPermissionWrapper : IDirectoryServicesPermissionWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryServicesPermission _wrapped;
		
		public DirectoryServicesPermissionWrapper(System.DirectoryServices.DirectoryServicesPermission wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.DirectoryServicesPermissionEntryCollection PermissionEntries
		{
			get
			{
				return this._wrapped.PermissionEntries;
			}
		}
		
		public System.DirectoryServices.DirectoryServicesPermission Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public System.Security.IPermission Copy()
		{
			return this._wrapped.Copy();
		}
		
		public void FromXml(System.Security.SecurityElement securityElement)
		{
			this._wrapped.FromXml(securityElement);
		}
		
		public System.Security.IPermission Intersect(System.Security.IPermission target)
		{
			return this._wrapped.Intersect(target);
		}
		
		public bool IsSubsetOf(System.Security.IPermission target)
		{
			return this._wrapped.IsSubsetOf(target);
		}
		
		public bool IsUnrestricted()
		{
			return this._wrapped.IsUnrestricted();
		}
		
		public System.Security.SecurityElement ToXml()
		{
			return this._wrapped.ToXml();
		}
		
		public System.Security.IPermission Union(System.Security.IPermission target)
		{
			return this._wrapped.Union(target);
		}
		
		public void Demand()
		{
			this._wrapped.Demand();
		}
		
		public void Assert()
		{
			this._wrapped.Assert();
		}
		
		public void Deny()
		{
			this._wrapped.Deny();
		}
		
		public void PermitOnly()
		{
			this._wrapped.PermitOnly();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DirectoryServicesPermissionAttributeWrapper : IDirectoryServicesPermissionAttributeWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryServicesPermissionAttribute _wrapped;
		
		public DirectoryServicesPermissionAttributeWrapper(System.DirectoryServices.DirectoryServicesPermissionAttribute wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Path
		{
			get
			{
				return this._wrapped.Path;
			}
			set
			{
				this._wrapped.Path = value;
			}
		}
		
		public System.DirectoryServices.DirectoryServicesPermissionAccess PermissionAccess
		{
			get
			{
				return this._wrapped.PermissionAccess;
			}
			set
			{
				this._wrapped.PermissionAccess = value;
			}
		}
		
		public System.Security.Permissions.SecurityAction Action
		{
			get
			{
				return this._wrapped.Action;
			}
			set
			{
				this._wrapped.Action = value;
			}
		}
		
		public bool Unrestricted
		{
			get
			{
				return this._wrapped.Unrestricted;
			}
			set
			{
				this._wrapped.Unrestricted = value;
			}
		}
		
		public object TypeId
		{
			get
			{
				return this._wrapped.TypeId;
			}
		}
		
		public System.DirectoryServices.DirectoryServicesPermissionAttribute Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public System.Security.IPermission CreatePermission()
		{
			return this._wrapped.CreatePermission();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
		
		public bool Match(object obj)
		{
			return this._wrapped.Match(obj);
		}
		
		public bool IsDefaultAttribute()
		{
			return this._wrapped.IsDefaultAttribute();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
	}
	
	public sealed partial class DirectoryServicesPermissionEntryWrapper : IDirectoryServicesPermissionEntryWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryServicesPermissionEntry _wrapped;
		
		public DirectoryServicesPermissionEntryWrapper(System.DirectoryServices.DirectoryServicesPermissionEntry wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Path
		{
			get
			{
				return this._wrapped.Path;
			}
		}
		
		public System.DirectoryServices.DirectoryServicesPermissionAccess PermissionAccess
		{
			get
			{
				return this._wrapped.PermissionAccess;
			}
		}
		
		public System.DirectoryServices.DirectoryServicesPermissionEntry Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DirectoryServicesPermissionEntryCollectionWrapper : IDirectoryServicesPermissionEntryCollectionWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryServicesPermissionEntryCollection _wrapped;
		
		public DirectoryServicesPermissionEntryCollectionWrapper(System.DirectoryServices.DirectoryServicesPermissionEntryCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.DirectoryServicesPermissionEntry this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
			set
			{
				this._wrapped[index] = value;
			}
		}
		
		public int Capacity
		{
			get
			{
				return this._wrapped.Capacity;
			}
			set
			{
				this._wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.DirectoryServicesPermissionEntryCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public int Add(System.DirectoryServices.DirectoryServicesPermissionEntry value)
		{
			return this._wrapped.Add(value);
		}
		
		public void AddRange(System.DirectoryServices.DirectoryServicesPermissionEntry[] value)
		{
			this._wrapped.AddRange(value);
		}
		
		public void AddRange(System.DirectoryServices.DirectoryServicesPermissionEntryCollection value)
		{
			this._wrapped.AddRange(value);
		}
		
		public bool Contains(System.DirectoryServices.DirectoryServicesPermissionEntry value)
		{
			return this._wrapped.Contains(value);
		}
		
		public void CopyTo(System.DirectoryServices.DirectoryServicesPermissionEntry[] array, int index)
		{
			this._wrapped.CopyTo(array, index);
		}
		
		public int IndexOf(System.DirectoryServices.DirectoryServicesPermissionEntry value)
		{
			return this._wrapped.IndexOf(value);
		}
		
		public void Insert(int index, System.DirectoryServices.DirectoryServicesPermissionEntry value)
		{
			this._wrapped.Insert(index, value);
		}
		
		public void Remove(System.DirectoryServices.DirectoryServicesPermissionEntry value)
		{
			this._wrapped.Remove(value);
		}
		
		public void Clear()
		{
			this._wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			this._wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DirectorySynchronizationWrapper : IDirectorySynchronizationWrapper
	{
		
		private readonly System.DirectoryServices.DirectorySynchronization _wrapped;
		
		public DirectorySynchronizationWrapper(System.DirectoryServices.DirectorySynchronization wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.DirectorySynchronizationOptions Option
		{
			get
			{
				return this._wrapped.Option;
			}
			set
			{
				this._wrapped.Option = value;
			}
		}
		
		public System.DirectoryServices.DirectorySynchronization Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public byte[] GetDirectorySynchronizationCookie()
		{
			return this._wrapped.GetDirectorySynchronizationCookie();
		}
		
		public void ResetDirectorySynchronizationCookie()
		{
			this._wrapped.ResetDirectorySynchronizationCookie();
		}
		
		public void ResetDirectorySynchronizationCookie(byte[] cookie)
		{
			this._wrapped.ResetDirectorySynchronizationCookie(cookie);
		}
		
		public System.DirectoryServices.DirectorySynchronization Copy()
		{
			return this._wrapped.Copy();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DirectoryVirtualListViewWrapper : IDirectoryVirtualListViewWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryVirtualListView _wrapped;
		
		public DirectoryVirtualListViewWrapper(System.DirectoryServices.DirectoryVirtualListView wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public int BeforeCount
		{
			get
			{
				return this._wrapped.BeforeCount;
			}
			set
			{
				this._wrapped.BeforeCount = value;
			}
		}
		
		public int AfterCount
		{
			get
			{
				return this._wrapped.AfterCount;
			}
			set
			{
				this._wrapped.AfterCount = value;
			}
		}
		
		public int Offset
		{
			get
			{
				return this._wrapped.Offset;
			}
			set
			{
				this._wrapped.Offset = value;
			}
		}
		
		public int TargetPercentage
		{
			get
			{
				return this._wrapped.TargetPercentage;
			}
			set
			{
				this._wrapped.TargetPercentage = value;
			}
		}
		
		public string Target
		{
			get
			{
				return this._wrapped.Target;
			}
			set
			{
				this._wrapped.Target = value;
			}
		}
		
		public int ApproximateTotal
		{
			get
			{
				return this._wrapped.ApproximateTotal;
			}
			set
			{
				this._wrapped.ApproximateTotal = value;
			}
		}
		
		public System.DirectoryServices.DirectoryVirtualListViewContext DirectoryVirtualListViewContext
		{
			get
			{
				return this._wrapped.DirectoryVirtualListViewContext;
			}
			set
			{
				this._wrapped.DirectoryVirtualListViewContext = value;
			}
		}
		
		public System.DirectoryServices.DirectoryVirtualListView Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DirectoryVirtualListViewContextWrapper : IDirectoryVirtualListViewContextWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryVirtualListViewContext _wrapped;
		
		public DirectoryVirtualListViewContextWrapper(System.DirectoryServices.DirectoryVirtualListViewContext wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.DirectoryVirtualListViewContext Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public System.DirectoryServices.DirectoryVirtualListViewContext Copy()
		{
			return this._wrapped.Copy();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class PropertyCollectionWrapper : IPropertyCollectionWrapper
	{
		
		private readonly System.DirectoryServices.PropertyCollection _wrapped;
		
		public PropertyCollectionWrapper(System.DirectoryServices.PropertyCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.PropertyValueCollection this[string propertyName]
		{
			get
			{
				return this._wrapped[propertyName];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.Collections.ICollection PropertyNames
		{
			get
			{
				return this._wrapped.PropertyNames;
			}
		}
		
		public System.Collections.ICollection Values
		{
			get
			{
				return this._wrapped.Values;
			}
		}
		
		public System.DirectoryServices.PropertyCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(string propertyName)
		{
			return this._wrapped.Contains(propertyName);
		}
		
		public void CopyTo(System.DirectoryServices.PropertyValueCollection[] array, int index)
		{
			this._wrapped.CopyTo(array, index);
		}
		
		public System.Collections.IDictionaryEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class PropertyValueCollectionWrapper : IPropertyValueCollectionWrapper
	{
		
		private readonly System.DirectoryServices.PropertyValueCollection _wrapped;
		
		public PropertyValueCollectionWrapper(System.DirectoryServices.PropertyValueCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public object this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
			set
			{
				this._wrapped[index] = value;
			}
		}
		
		public string PropertyName
		{
			get
			{
				return this._wrapped.PropertyName;
			}
		}
		
		public object Value
		{
			get
			{
				return this._wrapped.Value;
			}
			set
			{
				this._wrapped.Value = value;
			}
		}
		
		public int Capacity
		{
			get
			{
				return this._wrapped.Capacity;
			}
			set
			{
				this._wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.PropertyValueCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public int Add(object value)
		{
			return this._wrapped.Add(value);
		}
		
		public void AddRange(object[] value)
		{
			this._wrapped.AddRange(value);
		}
		
		public void AddRange(System.DirectoryServices.PropertyValueCollection value)
		{
			this._wrapped.AddRange(value);
		}
		
		public bool Contains(object value)
		{
			return this._wrapped.Contains(value);
		}
		
		public void CopyTo(object[] array, int index)
		{
			this._wrapped.CopyTo(array, index);
		}
		
		public int IndexOf(object value)
		{
			return this._wrapped.IndexOf(value);
		}
		
		public void Insert(int index, object value)
		{
			this._wrapped.Insert(index, value);
		}
		
		public void Remove(object value)
		{
			this._wrapped.Remove(value);
		}
		
		public void Clear()
		{
			this._wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			this._wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ResultPropertyCollectionWrapper : IResultPropertyCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ResultPropertyCollection _wrapped;
		
		public ResultPropertyCollectionWrapper(System.DirectoryServices.ResultPropertyCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ResultPropertyValueCollection this[string name]
		{
			get
			{
				return this._wrapped[name];
			}
		}
		
		public System.Collections.ICollection PropertyNames
		{
			get
			{
				return this._wrapped.PropertyNames;
			}
		}
		
		public System.Collections.ICollection Values
		{
			get
			{
				return this._wrapped.Values;
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ResultPropertyCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(string propertyName)
		{
			return this._wrapped.Contains(propertyName);
		}
		
		public void CopyTo(System.DirectoryServices.ResultPropertyValueCollection[] array, int index)
		{
			this._wrapped.CopyTo(array, index);
		}
		
		public void CopyTo(System.Array array, int index)
		{
			this._wrapped.CopyTo(array, index);
		}
		
		public void Clear()
		{
			this._wrapped.Clear();
		}
		
		public System.Collections.IDictionaryEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ResultPropertyValueCollectionWrapper : IResultPropertyValueCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ResultPropertyValueCollection _wrapped;
		
		public ResultPropertyValueCollectionWrapper(System.DirectoryServices.ResultPropertyValueCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public object this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ResultPropertyValueCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(object value)
		{
			return this._wrapped.Contains(value);
		}
		
		public int IndexOf(object value)
		{
			return this._wrapped.IndexOf(value);
		}
		
		public void CopyTo(object[] values, int index)
		{
			this._wrapped.CopyTo(values, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class SchemaNameCollectionWrapper : ISchemaNameCollectionWrapper
	{
		
		private readonly System.DirectoryServices.SchemaNameCollection _wrapped;
		
		public SchemaNameCollectionWrapper(System.DirectoryServices.SchemaNameCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
			set
			{
				this._wrapped[index] = value;
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.SchemaNameCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public int Add(string value)
		{
			return this._wrapped.Add(value);
		}
		
		public void AddRange(string[] value)
		{
			this._wrapped.AddRange(value);
		}
		
		public void AddRange(System.DirectoryServices.SchemaNameCollection value)
		{
			this._wrapped.AddRange(value);
		}
		
		public void Clear()
		{
			this._wrapped.Clear();
		}
		
		public bool Contains(string value)
		{
			return this._wrapped.Contains(value);
		}
		
		public void CopyTo(string[] stringArray, int index)
		{
			this._wrapped.CopyTo(stringArray, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public int IndexOf(string value)
		{
			return this._wrapped.IndexOf(value);
		}
		
		public void Insert(int index, string value)
		{
			this._wrapped.Insert(index, value);
		}
		
		public void Remove(string value)
		{
			this._wrapped.Remove(value);
		}
		
		public void RemoveAt(int index)
		{
			this._wrapped.RemoveAt(index);
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class SearchResultWrapper : ISearchResultWrapper
	{
		
		private readonly System.DirectoryServices.SearchResult _wrapped;
		
		public SearchResultWrapper(System.DirectoryServices.SearchResult wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Path
		{
			get
			{
				return this._wrapped.Path;
			}
		}
		
		public System.DirectoryServices.ResultPropertyCollection Properties
		{
			get
			{
				return this._wrapped.Properties;
			}
		}
		
		public System.DirectoryServices.SearchResult Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class SearchResultCollectionWrapper : ISearchResultCollectionWrapper
	{
		
		private readonly System.DirectoryServices.SearchResultCollection _wrapped;
		
		public SearchResultCollectionWrapper(System.DirectoryServices.SearchResultCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.SearchResult this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.IntPtr Handle
		{
			get
			{
				return this._wrapped.Handle;
			}
		}
		
		public string[] PropertiesLoaded
		{
			get
			{
				return this._wrapped.PropertiesLoaded;
			}
		}
		
		public System.DirectoryServices.SearchResultCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public bool Contains(System.DirectoryServices.SearchResult result)
		{
			return this._wrapped.Contains(result);
		}
		
		public void CopyTo(System.DirectoryServices.SearchResult[] results, int index)
		{
			this._wrapped.CopyTo(results, index);
		}
		
		public int IndexOf(System.DirectoryServices.SearchResult result)
		{
			return this._wrapped.IndexOf(result);
		}
		
		public object GetLifetimeService()
		{
			return this._wrapped.GetLifetimeService();
		}
		
		public object InitializeLifetimeService()
		{
			return this._wrapped.InitializeLifetimeService();
		}
		
		public System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType)
		{
			return this._wrapped.CreateObjRef(requestedType);
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class SortOptionWrapper : ISortOptionWrapper
	{
		
		private readonly System.DirectoryServices.SortOption _wrapped;
		
		public SortOptionWrapper(System.DirectoryServices.SortOption wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string PropertyName
		{
			get
			{
				return this._wrapped.PropertyName;
			}
			set
			{
				this._wrapped.PropertyName = value;
			}
		}
		
		public System.DirectoryServices.SortDirection Direction
		{
			get
			{
				return this._wrapped.Direction;
			}
			set
			{
				this._wrapped.Direction = value;
			}
		}
		
		public System.DirectoryServices.SortOption Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DirectoryServicesCOMExceptionWrapper : IDirectoryServicesCOMExceptionWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryServicesCOMException _wrapped;
		
		public DirectoryServicesCOMExceptionWrapper(System.DirectoryServices.DirectoryServicesCOMException wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public int ExtendedError
		{
			get
			{
				return this._wrapped.ExtendedError;
			}
		}
		
		public string ExtendedErrorMessage
		{
			get
			{
				return this._wrapped.ExtendedErrorMessage;
			}
		}
		
		public int ErrorCode
		{
			get
			{
				return this._wrapped.ErrorCode;
			}
		}
		
		public string Message
		{
			get
			{
				return this._wrapped.Message;
			}
		}
		
		public System.Collections.IDictionary Data
		{
			get
			{
				return this._wrapped.Data;
			}
		}
		
		public System.Exception InnerException
		{
			get
			{
				return this._wrapped.InnerException;
			}
		}
		
		public System.Reflection.MethodBase TargetSite
		{
			get
			{
				return this._wrapped.TargetSite;
			}
		}
		
		public string StackTrace
		{
			get
			{
				return this._wrapped.StackTrace;
			}
		}
		
		public string HelpLink
		{
			get
			{
				return this._wrapped.HelpLink;
			}
			set
			{
				this._wrapped.HelpLink = value;
			}
		}
		
		public string Source
		{
			get
			{
				return this._wrapped.Source;
			}
			set
			{
				this._wrapped.Source = value;
			}
		}
		
		public int HResult
		{
			get
			{
				return this._wrapped.HResult;
			}
		}
		
		public System.DirectoryServices.DirectoryServicesCOMException Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
		{
			this._wrapped.GetObjectData(serializationInfo, streamingContext);
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public System.Exception GetBaseException()
		{
			return this._wrapped.GetBaseException();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectoryReplicationMetadataWrapper : IActiveDirectoryReplicationMetadataWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata _wrapped;
		
		public ActiveDirectoryReplicationMetadataWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.AttributeMetadata this[string name]
		{
			get
			{
				return this._wrapped[name];
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection AttributeNames
		{
			get
			{
				return this._wrapped.AttributeNames;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection Values
		{
			get
			{
				return this._wrapped.Values;
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(string attributeName)
		{
			return this._wrapped.Contains(attributeName);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.AttributeMetadata[] array, int index)
		{
			this._wrapped.CopyTo(array, index);
		}
		
		public void CopyTo(System.Array array, int index)
		{
			this._wrapped.CopyTo(array, index);
		}
		
		public void Clear()
		{
			this._wrapped.Clear();
		}
		
		public System.Collections.IDictionaryEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectoryScheduleWrapper : IActiveDirectoryScheduleWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule _wrapped;
		
		public ActiveDirectoryScheduleWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public bool[,,] RawSchedule
		{
			get
			{
				return this._wrapped.RawSchedule;
			}
			set
			{
				this._wrapped.RawSchedule = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void SetSchedule(System.DayOfWeek day, System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute)
		{
			this._wrapped.SetSchedule(day, fromHour, fromMinute, toHour, toMinute);
		}
		
		public void SetSchedule(System.DayOfWeek[] days, System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute)
		{
			this._wrapped.SetSchedule(days, fromHour, fromMinute, toHour, toMinute);
		}
		
		public void SetDailySchedule(System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute)
		{
			this._wrapped.SetDailySchedule(fromHour, fromMinute, toHour, toMinute);
		}
		
		public void ResetSchedule()
		{
			this._wrapped.ResetSchedule();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectorySchemaWrapper : IActiveDirectorySchemaWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema _wrapped;
		
		public ActiveDirectorySchemaWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer SchemaRoleOwner
		{
			get
			{
				return this._wrapped.SchemaRoleOwner;
			}
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void RefreshSchema()
		{
			this._wrapped.RefreshSchema();
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass FindClass(string ldapDisplayName)
		{
			return this._wrapped.FindClass(ldapDisplayName);
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass FindDefunctClass(string commonName)
		{
			return this._wrapped.FindDefunctClass(commonName);
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection FindAllClasses()
		{
			return this._wrapped.FindAllClasses();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection FindAllClasses(System.DirectoryServices.ActiveDirectory.SchemaClassType type)
		{
			return this._wrapped.FindAllClasses(type);
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection FindAllDefunctClasses()
		{
			return this._wrapped.FindAllDefunctClasses();
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty FindProperty(string ldapDisplayName)
		{
			return this._wrapped.FindProperty(ldapDisplayName);
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty FindDefunctProperty(string commonName)
		{
			return this._wrapped.FindDefunctProperty(commonName);
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties()
		{
			return this._wrapped.FindAllProperties();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties(System.DirectoryServices.ActiveDirectory.PropertyTypes type)
		{
			return this._wrapped.FindAllProperties(type);
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection FindAllDefunctProperties()
		{
			return this._wrapped.FindAllDefunctProperties();
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectorySchemaClassWrapper : IActiveDirectorySchemaClassWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass _wrapped;
		
		public ActiveDirectorySchemaClassWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public string CommonName
		{
			get
			{
				return this._wrapped.CommonName;
			}
			set
			{
				this._wrapped.CommonName = value;
			}
		}
		
		public string Oid
		{
			get
			{
				return this._wrapped.Oid;
			}
			set
			{
				this._wrapped.Oid = value;
			}
		}
		
		public string Description
		{
			get
			{
				return this._wrapped.Description;
			}
			set
			{
				this._wrapped.Description = value;
			}
		}
		
		public bool IsDefunct
		{
			get
			{
				return this._wrapped.IsDefunct;
			}
			set
			{
				this._wrapped.IsDefunct = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection PossibleSuperiors
		{
			get
			{
				return this._wrapped.PossibleSuperiors;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection PossibleInferiors
		{
			get
			{
				return this._wrapped.PossibleInferiors;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection MandatoryProperties
		{
			get
			{
				return this._wrapped.MandatoryProperties;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection OptionalProperties
		{
			get
			{
				return this._wrapped.OptionalProperties;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection AuxiliaryClasses
		{
			get
			{
				return this._wrapped.AuxiliaryClasses;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass SubClassOf
		{
			get
			{
				return this._wrapped.SubClassOf;
			}
			set
			{
				this._wrapped.SubClassOf = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.SchemaClassType Type
		{
			get
			{
				return this._wrapped.Type;
			}
			set
			{
				this._wrapped.Type = value;
			}
		}
		
		public System.Guid SchemaGuid
		{
			get
			{
				return this._wrapped.SchemaGuid;
			}
			set
			{
				this._wrapped.SchemaGuid = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurity DefaultObjectSecurityDescriptor
		{
			get
			{
				return this._wrapped.DefaultObjectSecurityDescriptor;
			}
			set
			{
				this._wrapped.DefaultObjectSecurityDescriptor = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection GetAllProperties()
		{
			return this._wrapped.GetAllProperties();
		}
		
		public void Save()
		{
			this._wrapped.Save();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectorySchemaClassCollectionWrapper : IActiveDirectorySchemaClassCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection _wrapped;
		
		public ActiveDirectorySchemaClassCollectionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
			set
			{
				this._wrapped[index] = value;
			}
		}
		
		public int Capacity
		{
			get
			{
				return this._wrapped.Capacity;
			}
			set
			{
				this._wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public int Add(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass schemaClass)
		{
			return this._wrapped.Add(schemaClass);
		}
		
		public void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass[] schemaClasses)
		{
			this._wrapped.AddRange(schemaClasses);
		}
		
		public void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection schemaClasses)
		{
			this._wrapped.AddRange(schemaClasses);
		}
		
		public void AddRange(System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection schemaClasses)
		{
			this._wrapped.AddRange(schemaClasses);
		}
		
		public void Remove(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass schemaClass)
		{
			this._wrapped.Remove(schemaClass);
		}
		
		public void Insert(int index, System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass schemaClass)
		{
			this._wrapped.Insert(index, schemaClass);
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass schemaClass)
		{
			return this._wrapped.Contains(schemaClass);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass[] schemaClasses, int index)
		{
			this._wrapped.CopyTo(schemaClasses, index);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass schemaClass)
		{
			return this._wrapped.IndexOf(schemaClass);
		}
		
		public void Clear()
		{
			this._wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			this._wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectorySchemaPropertyWrapper : IActiveDirectorySchemaPropertyWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty _wrapped;
		
		public ActiveDirectorySchemaPropertyWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public string CommonName
		{
			get
			{
				return this._wrapped.CommonName;
			}
			set
			{
				this._wrapped.CommonName = value;
			}
		}
		
		public string Oid
		{
			get
			{
				return this._wrapped.Oid;
			}
			set
			{
				this._wrapped.Oid = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax Syntax
		{
			get
			{
				return this._wrapped.Syntax;
			}
			set
			{
				this._wrapped.Syntax = value;
			}
		}
		
		public string Description
		{
			get
			{
				return this._wrapped.Description;
			}
			set
			{
				this._wrapped.Description = value;
			}
		}
		
		public bool IsSingleValued
		{
			get
			{
				return this._wrapped.IsSingleValued;
			}
			set
			{
				this._wrapped.IsSingleValued = value;
			}
		}
		
		public bool IsIndexed
		{
			get
			{
				return this._wrapped.IsIndexed;
			}
			set
			{
				this._wrapped.IsIndexed = value;
			}
		}
		
		public bool IsIndexedOverContainer
		{
			get
			{
				return this._wrapped.IsIndexedOverContainer;
			}
			set
			{
				this._wrapped.IsIndexedOverContainer = value;
			}
		}
		
		public bool IsInAnr
		{
			get
			{
				return this._wrapped.IsInAnr;
			}
			set
			{
				this._wrapped.IsInAnr = value;
			}
		}
		
		public bool IsOnTombstonedObject
		{
			get
			{
				return this._wrapped.IsOnTombstonedObject;
			}
			set
			{
				this._wrapped.IsOnTombstonedObject = value;
			}
		}
		
		public bool IsTupleIndexed
		{
			get
			{
				return this._wrapped.IsTupleIndexed;
			}
			set
			{
				this._wrapped.IsTupleIndexed = value;
			}
		}
		
		public bool IsInGlobalCatalog
		{
			get
			{
				return this._wrapped.IsInGlobalCatalog;
			}
			set
			{
				this._wrapped.IsInGlobalCatalog = value;
			}
		}
		
		public System.Nullable<int> RangeLower
		{
			get
			{
				return this._wrapped.RangeLower;
			}
			set
			{
				this._wrapped.RangeLower = value;
			}
		}
		
		public System.Nullable<int> RangeUpper
		{
			get
			{
				return this._wrapped.RangeUpper;
			}
			set
			{
				this._wrapped.RangeUpper = value;
			}
		}
		
		public bool IsDefunct
		{
			get
			{
				return this._wrapped.IsDefunct;
			}
			set
			{
				this._wrapped.IsDefunct = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty Link
		{
			get
			{
				return this._wrapped.Link;
			}
		}
		
		public System.Nullable<int> LinkId
		{
			get
			{
				return this._wrapped.LinkId;
			}
			set
			{
				this._wrapped.LinkId = value;
			}
		}
		
		public System.Guid SchemaGuid
		{
			get
			{
				return this._wrapped.SchemaGuid;
			}
			set
			{
				this._wrapped.SchemaGuid = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public void Save()
		{
			this._wrapped.Save();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectorySchemaPropertyCollectionWrapper : IActiveDirectorySchemaPropertyCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection _wrapped;
		
		public ActiveDirectorySchemaPropertyCollectionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
			set
			{
				this._wrapped[index] = value;
			}
		}
		
		public int Capacity
		{
			get
			{
				return this._wrapped.Capacity;
			}
			set
			{
				this._wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public int Add(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty schemaProperty)
		{
			return this._wrapped.Add(schemaProperty);
		}
		
		public void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty[] properties)
		{
			this._wrapped.AddRange(properties);
		}
		
		public void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection properties)
		{
			this._wrapped.AddRange(properties);
		}
		
		public void AddRange(System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection properties)
		{
			this._wrapped.AddRange(properties);
		}
		
		public void Remove(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty schemaProperty)
		{
			this._wrapped.Remove(schemaProperty);
		}
		
		public void Insert(int index, System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty schemaProperty)
		{
			this._wrapped.Insert(index, schemaProperty);
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty schemaProperty)
		{
			return this._wrapped.Contains(schemaProperty);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty[] properties, int index)
		{
			this._wrapped.CopyTo(properties, index);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty schemaProperty)
		{
			return this._wrapped.IndexOf(schemaProperty);
		}
		
		public void Clear()
		{
			this._wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			this._wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectorySiteWrapper : IActiveDirectorySiteWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySite _wrapped;
		
		public ActiveDirectorySiteWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainCollection Domains
		{
			get
			{
				return this._wrapped.Domains;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection Subnets
		{
			get
			{
				return this._wrapped.Subnets;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection Servers
		{
			get
			{
				return this._wrapped.Servers;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection AdjacentSites
		{
			get
			{
				return this._wrapped.AdjacentSites;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection SiteLinks
		{
			get
			{
				return this._wrapped.SiteLinks;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer InterSiteTopologyGenerator
		{
			get
			{
				return this._wrapped.InterSiteTopologyGenerator;
			}
			set
			{
				this._wrapped.InterSiteTopologyGenerator = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteOptions Options
		{
			get
			{
				return this._wrapped.Options;
			}
			set
			{
				this._wrapped.Options = value;
			}
		}
		
		public string Location
		{
			get
			{
				return this._wrapped.Location;
			}
			set
			{
				this._wrapped.Location = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection BridgeheadServers
		{
			get
			{
				return this._wrapped.BridgeheadServers;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServerCollection PreferredSmtpBridgeheadServers
		{
			get
			{
				return this._wrapped.PreferredSmtpBridgeheadServers;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServerCollection PreferredRpcBridgeheadServers
		{
			get
			{
				return this._wrapped.PreferredRpcBridgeheadServers;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule IntraSiteReplicationSchedule
		{
			get
			{
				return this._wrapped.IntraSiteReplicationSchedule;
			}
			set
			{
				this._wrapped.IntraSiteReplicationSchedule = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySite Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void Save()
		{
			this._wrapped.Save();
		}
		
		public void Delete()
		{
			this._wrapped.Delete();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectorySiteCollectionWrapper : IActiveDirectorySiteCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection _wrapped;
		
		public ActiveDirectorySiteCollectionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySite this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
			set
			{
				this._wrapped[index] = value;
			}
		}
		
		public int Capacity
		{
			get
			{
				return this._wrapped.Capacity;
			}
			set
			{
				this._wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public int Add(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite site)
		{
			return this._wrapped.Add(site);
		}
		
		public void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite[] sites)
		{
			this._wrapped.AddRange(sites);
		}
		
		public void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection sites)
		{
			this._wrapped.AddRange(sites);
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite site)
		{
			return this._wrapped.Contains(site);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite[] array, int index)
		{
			this._wrapped.CopyTo(array, index);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite site)
		{
			return this._wrapped.IndexOf(site);
		}
		
		public void Insert(int index, System.DirectoryServices.ActiveDirectory.ActiveDirectorySite site)
		{
			this._wrapped.Insert(index, site);
		}
		
		public void Remove(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite site)
		{
			this._wrapped.Remove(site);
		}
		
		public void Clear()
		{
			this._wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			this._wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectorySiteLinkWrapper : IActiveDirectorySiteLinkWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink _wrapped;
		
		public ActiveDirectorySiteLinkWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get
			{
				return this._wrapped.TransportType;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection Sites
		{
			get
			{
				return this._wrapped.Sites;
			}
		}
		
		public int Cost
		{
			get
			{
				return this._wrapped.Cost;
			}
			set
			{
				this._wrapped.Cost = value;
			}
		}
		
		public System.TimeSpan ReplicationInterval
		{
			get
			{
				return this._wrapped.ReplicationInterval;
			}
			set
			{
				this._wrapped.ReplicationInterval = value;
			}
		}
		
		public bool ReciprocalReplicationEnabled
		{
			get
			{
				return this._wrapped.ReciprocalReplicationEnabled;
			}
			set
			{
				this._wrapped.ReciprocalReplicationEnabled = value;
			}
		}
		
		public bool NotificationEnabled
		{
			get
			{
				return this._wrapped.NotificationEnabled;
			}
			set
			{
				this._wrapped.NotificationEnabled = value;
			}
		}
		
		public bool DataCompressionEnabled
		{
			get
			{
				return this._wrapped.DataCompressionEnabled;
			}
			set
			{
				this._wrapped.DataCompressionEnabled = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule InterSiteReplicationSchedule
		{
			get
			{
				return this._wrapped.InterSiteReplicationSchedule;
			}
			set
			{
				this._wrapped.InterSiteReplicationSchedule = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void Save()
		{
			this._wrapped.Save();
		}
		
		public void Delete()
		{
			this._wrapped.Delete();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectorySiteLinkBridgeWrapper : IActiveDirectorySiteLinkBridgeWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge _wrapped;
		
		public ActiveDirectorySiteLinkBridgeWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection SiteLinks
		{
			get
			{
				return this._wrapped.SiteLinks;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get
			{
				return this._wrapped.TransportType;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void Save()
		{
			this._wrapped.Save();
		}
		
		public void Delete()
		{
			this._wrapped.Delete();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectorySiteLinkCollectionWrapper : IActiveDirectorySiteLinkCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection _wrapped;
		
		public ActiveDirectorySiteLinkCollectionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
			set
			{
				this._wrapped[index] = value;
			}
		}
		
		public int Capacity
		{
			get
			{
				return this._wrapped.Capacity;
			}
			set
			{
				this._wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public int Add(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink link)
		{
			return this._wrapped.Add(link);
		}
		
		public void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink[] links)
		{
			this._wrapped.AddRange(links);
		}
		
		public void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection links)
		{
			this._wrapped.AddRange(links);
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink link)
		{
			return this._wrapped.Contains(link);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink[] array, int index)
		{
			this._wrapped.CopyTo(array, index);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink link)
		{
			return this._wrapped.IndexOf(link);
		}
		
		public void Insert(int index, System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink link)
		{
			this._wrapped.Insert(index, link);
		}
		
		public void Remove(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink link)
		{
			this._wrapped.Remove(link);
		}
		
		public void Clear()
		{
			this._wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			this._wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectorySubnetWrapper : IActiveDirectorySubnetWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet _wrapped;
		
		public ActiveDirectorySubnetWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySite Site
		{
			get
			{
				return this._wrapped.Site;
			}
			set
			{
				this._wrapped.Site = value;
			}
		}
		
		public string Location
		{
			get
			{
				return this._wrapped.Location;
			}
			set
			{
				this._wrapped.Location = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void Save()
		{
			this._wrapped.Save();
		}
		
		public void Delete()
		{
			this._wrapped.Delete();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectorySubnetCollectionWrapper : IActiveDirectorySubnetCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection _wrapped;
		
		public ActiveDirectorySubnetCollectionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
			set
			{
				this._wrapped[index] = value;
			}
		}
		
		public int Capacity
		{
			get
			{
				return this._wrapped.Capacity;
			}
			set
			{
				this._wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public int Add(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet subnet)
		{
			return this._wrapped.Add(subnet);
		}
		
		public void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet[] subnets)
		{
			this._wrapped.AddRange(subnets);
		}
		
		public void AddRange(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection subnets)
		{
			this._wrapped.AddRange(subnets);
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet subnet)
		{
			return this._wrapped.Contains(subnet);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet[] array, int index)
		{
			this._wrapped.CopyTo(array, index);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet subnet)
		{
			return this._wrapped.IndexOf(subnet);
		}
		
		public void Insert(int index, System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet subnet)
		{
			this._wrapped.Insert(index, subnet);
		}
		
		public void Remove(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet subnet)
		{
			this._wrapped.Remove(subnet);
		}
		
		public void Clear()
		{
			this._wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			this._wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class AdamInstanceWrapper : IAdamInstanceWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.AdamInstance _wrapped;
		
		public AdamInstanceWrapper(System.DirectoryServices.ActiveDirectory.AdamInstance wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ConfigurationSet ConfigurationSet
		{
			get
			{
				return this._wrapped.ConfigurationSet;
			}
		}
		
		public string HostName
		{
			get
			{
				return this._wrapped.HostName;
			}
		}
		
		public int LdapPort
		{
			get
			{
				return this._wrapped.LdapPort;
			}
		}
		
		public int SslPort
		{
			get
			{
				return this._wrapped.SslPort;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamRoleCollection Roles
		{
			get
			{
				return this._wrapped.Roles;
			}
		}
		
		public string DefaultPartition
		{
			get
			{
				return this._wrapped.DefaultPartition;
			}
			set
			{
				this._wrapped.DefaultPartition = value;
			}
		}
		
		public string IPAddress
		{
			get
			{
				return this._wrapped.IPAddress;
			}
		}
		
		public string SiteName
		{
			get
			{
				return this._wrapped.SiteName;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.SyncUpdateCallback SyncFromAllServersCallback
		{
			get
			{
				return this._wrapped.SyncFromAllServersCallback;
			}
			set
			{
				this._wrapped.SyncFromAllServersCallback = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection InboundConnections
		{
			get
			{
				return this._wrapped.InboundConnections;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection OutboundConnections
		{
			get
			{
				return this._wrapped.OutboundConnections;
			}
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection Partitions
		{
			get
			{
				return this._wrapped.Partitions;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamInstance Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void TransferRoleOwnership(System.DirectoryServices.ActiveDirectory.AdamRole role)
		{
			this._wrapped.TransferRoleOwnership(role);
		}
		
		public void SeizeRoleOwnership(System.DirectoryServices.ActiveDirectory.AdamRole role)
		{
			this._wrapped.SeizeRoleOwnership(role);
		}
		
		public void CheckReplicationConsistency()
		{
			this._wrapped.CheckReplicationConsistency();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection GetReplicationCursors(string partition)
		{
			return this._wrapped.GetReplicationCursors(partition);
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation GetReplicationOperationInformation()
		{
			return this._wrapped.GetReplicationOperationInformation();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection GetReplicationNeighbors(string partition)
		{
			return this._wrapped.GetReplicationNeighbors(partition);
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection GetAllReplicationNeighbors()
		{
			return this._wrapped.GetAllReplicationNeighbors();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection GetReplicationConnectionFailures()
		{
			return this._wrapped.GetReplicationConnectionFailures();
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath)
		{
			return this._wrapped.GetReplicationMetadata(objectPath);
		}
		
		public void SyncReplicaFromServer(string partition, string sourceServer)
		{
			this._wrapped.SyncReplicaFromServer(partition, sourceServer);
		}
		
		public void TriggerSyncReplicaFromNeighbors(string partition)
		{
			this._wrapped.TriggerSyncReplicaFromNeighbors(partition);
		}
		
		public void SyncReplicaFromAllServers(string partition, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions options)
		{
			this._wrapped.SyncReplicaFromAllServers(partition, options);
		}
		
		public void Save()
		{
			this._wrapped.Save();
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public void MoveToAnotherSite(string siteName)
		{
			this._wrapped.MoveToAnotherSite(siteName);
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class AdamInstanceCollectionWrapper : IAdamInstanceCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.AdamInstanceCollection _wrapped;
		
		public AdamInstanceCollectionWrapper(System.DirectoryServices.ActiveDirectory.AdamInstanceCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamInstance this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamInstanceCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.AdamInstance adamInstance)
		{
			return this._wrapped.Contains(adamInstance);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.AdamInstance adamInstance)
		{
			return this._wrapped.IndexOf(adamInstance);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.AdamInstance[] adamInstances, int index)
		{
			this._wrapped.CopyTo(adamInstances, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ApplicationPartitionWrapper : IApplicationPartitionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ApplicationPartition _wrapped;
		
		public ApplicationPartitionWrapper(System.DirectoryServices.ActiveDirectory.ApplicationPartition wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServerCollection DirectoryServers
		{
			get
			{
				return this._wrapped.DirectoryServers;
			}
		}
		
		public string SecurityReferenceDomain
		{
			get
			{
				return this._wrapped.SecurityReferenceDomain;
			}
			set
			{
				this._wrapped.SecurityReferenceDomain = value;
			}
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ApplicationPartition Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer()
		{
			return this._wrapped.FindDirectoryServer();
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer(string siteName)
		{
			return this._wrapped.FindDirectoryServer(siteName);
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer(bool forceRediscovery)
		{
			return this._wrapped.FindDirectoryServer(forceRediscovery);
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer(string siteName, bool forceRediscovery)
		{
			return this._wrapped.FindDirectoryServer(siteName, forceRediscovery);
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection FindAllDirectoryServers()
		{
			return this._wrapped.FindAllDirectoryServers();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection FindAllDirectoryServers(string siteName)
		{
			return this._wrapped.FindAllDirectoryServers(siteName);
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection FindAllDiscoverableDirectoryServers()
		{
			return this._wrapped.FindAllDiscoverableDirectoryServers();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection FindAllDiscoverableDirectoryServers(string siteName)
		{
			return this._wrapped.FindAllDiscoverableDirectoryServers(siteName);
		}
		
		public void Delete()
		{
			this._wrapped.Delete();
		}
		
		public void Save()
		{
			this._wrapped.Save();
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ApplicationPartitionCollectionWrapper : IApplicationPartitionCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection _wrapped;
		
		public ApplicationPartitionCollectionWrapper(System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ApplicationPartition this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ApplicationPartition applicationPartition)
		{
			return this._wrapped.Contains(applicationPartition);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ApplicationPartition applicationPartition)
		{
			return this._wrapped.IndexOf(applicationPartition);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ApplicationPartition[] applicationPartitions, int index)
		{
			this._wrapped.CopyTo(applicationPartitions, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class AttributeMetadataWrapper : IAttributeMetadataWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.AttributeMetadata _wrapped;
		
		public AttributeMetadataWrapper(System.DirectoryServices.ActiveDirectory.AttributeMetadata wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public int Version
		{
			get
			{
				return this._wrapped.Version;
			}
		}
		
		public System.DateTime LastOriginatingChangeTime
		{
			get
			{
				return this._wrapped.LastOriginatingChangeTime;
			}
		}
		
		public System.Guid LastOriginatingInvocationId
		{
			get
			{
				return this._wrapped.LastOriginatingInvocationId;
			}
		}
		
		public long OriginatingChangeUsn
		{
			get
			{
				return this._wrapped.OriginatingChangeUsn;
			}
		}
		
		public long LocalChangeUsn
		{
			get
			{
				return this._wrapped.LocalChangeUsn;
			}
		}
		
		public string OriginatingServer
		{
			get
			{
				return this._wrapped.OriginatingServer;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AttributeMetadata Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class AttributeMetadataCollectionWrapper : IAttributeMetadataCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection _wrapped;
		
		public AttributeMetadataCollectionWrapper(System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.AttributeMetadata this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.AttributeMetadata metadata)
		{
			return this._wrapped.Contains(metadata);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.AttributeMetadata metadata)
		{
			return this._wrapped.IndexOf(metadata);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.AttributeMetadata[] metadata, int index)
		{
			this._wrapped.CopyTo(metadata, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ConfigurationSetWrapper : IConfigurationSetWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ConfigurationSet _wrapped;
		
		public ConfigurationSetWrapper(System.DirectoryServices.ActiveDirectory.ConfigurationSet wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection Sites
		{
			get
			{
				return this._wrapped.Sites;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamInstanceCollection AdamInstances
		{
			get
			{
				return this._wrapped.AdamInstances;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection ApplicationPartitions
		{
			get
			{
				return this._wrapped.ApplicationPartitions;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema Schema
		{
			get
			{
				return this._wrapped.Schema;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamInstance SchemaRoleOwner
		{
			get
			{
				return this._wrapped.SchemaRoleOwner;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamInstance NamingRoleOwner
		{
			get
			{
				return this._wrapped.NamingRoleOwner;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ConfigurationSet Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamInstance FindAdamInstance()
		{
			return this._wrapped.FindAdamInstance();
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamInstance FindAdamInstance(string partitionName)
		{
			return this._wrapped.FindAdamInstance(partitionName);
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamInstance FindAdamInstance(string partitionName, string siteName)
		{
			return this._wrapped.FindAdamInstance(partitionName, siteName);
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamInstanceCollection FindAllAdamInstances()
		{
			return this._wrapped.FindAllAdamInstances();
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamInstanceCollection FindAllAdamInstances(string partitionName)
		{
			return this._wrapped.FindAllAdamInstances(partitionName);
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamInstanceCollection FindAllAdamInstances(string partitionName, string siteName)
		{
			return this._wrapped.FindAllAdamInstances(partitionName, siteName);
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel GetSecurityLevel()
		{
			return this._wrapped.GetSecurityLevel();
		}
		
		public void SetSecurityLevel(System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel securityLevel)
		{
			this._wrapped.SetSecurityLevel(securityLevel);
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DirectoryContextWrapper : IDirectoryContextWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.DirectoryContext _wrapped;
		
		public DirectoryContextWrapper(System.DirectoryServices.ActiveDirectory.DirectoryContext wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public string UserName
		{
			get
			{
				return this._wrapped.UserName;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryContextType ContextType
		{
			get
			{
				return this._wrapped.ContextType;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryContext Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DirectoryServerCollectionWrapper : IDirectoryServerCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.DirectoryServerCollection _wrapped;
		
		public DirectoryServerCollectionWrapper(System.DirectoryServices.ActiveDirectory.DirectoryServerCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
			set
			{
				this._wrapped[index] = value;
			}
		}
		
		public int Capacity
		{
			get
			{
				return this._wrapped.Capacity;
			}
			set
			{
				this._wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServerCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public int Add(System.DirectoryServices.ActiveDirectory.DirectoryServer server)
		{
			return this._wrapped.Add(server);
		}
		
		public void AddRange(System.DirectoryServices.ActiveDirectory.DirectoryServer[] servers)
		{
			this._wrapped.AddRange(servers);
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.DirectoryServer server)
		{
			return this._wrapped.Contains(server);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.DirectoryServer[] array, int index)
		{
			this._wrapped.CopyTo(array, index);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.DirectoryServer server)
		{
			return this._wrapped.IndexOf(server);
		}
		
		public void Insert(int index, System.DirectoryServices.ActiveDirectory.DirectoryServer server)
		{
			this._wrapped.Insert(index, server);
		}
		
		public void Remove(System.DirectoryServices.ActiveDirectory.DirectoryServer server)
		{
			this._wrapped.Remove(server);
		}
		
		public void Clear()
		{
			this._wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			this._wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DomainWrapper : IDomainWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.Domain _wrapped;
		
		public DomainWrapper(System.DirectoryServices.ActiveDirectory.Domain wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.Forest Forest
		{
			get
			{
				return this._wrapped.Forest;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainControllerCollection DomainControllers
		{
			get
			{
				return this._wrapped.DomainControllers;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainCollection Children
		{
			get
			{
				return this._wrapped.Children;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainMode DomainMode
		{
			get
			{
				return this._wrapped.DomainMode;
			}
		}
		
		public int DomainModeLevel
		{
			get
			{
				return this._wrapped.DomainModeLevel;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.Domain Parent
		{
			get
			{
				return this._wrapped.Parent;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainController PdcRoleOwner
		{
			get
			{
				return this._wrapped.PdcRoleOwner;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainController RidRoleOwner
		{
			get
			{
				return this._wrapped.RidRoleOwner;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainController InfrastructureRoleOwner
		{
			get
			{
				return this._wrapped.InfrastructureRoleOwner;
			}
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.Domain Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void RaiseDomainFunctionalityLevel(int domainMode)
		{
			this._wrapped.RaiseDomainFunctionalityLevel(domainMode);
		}
		
		public void RaiseDomainFunctionality(System.DirectoryServices.ActiveDirectory.DomainMode domainMode)
		{
			this._wrapped.RaiseDomainFunctionality(domainMode);
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController()
		{
			return this._wrapped.FindDomainController();
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController(string siteName)
		{
			return this._wrapped.FindDomainController(siteName);
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController(System.DirectoryServices.ActiveDirectory.LocatorOptions flag)
		{
			return this._wrapped.FindDomainController(flag);
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController(string siteName, System.DirectoryServices.ActiveDirectory.LocatorOptions flag)
		{
			return this._wrapped.FindDomainController(siteName, flag);
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDomainControllers()
		{
			return this._wrapped.FindAllDomainControllers();
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDomainControllers(string siteName)
		{
			return this._wrapped.FindAllDomainControllers(siteName);
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDiscoverableDomainControllers()
		{
			return this._wrapped.FindAllDiscoverableDomainControllers();
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDiscoverableDomainControllers(string siteName)
		{
			return this._wrapped.FindAllDiscoverableDomainControllers(siteName);
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection GetAllTrustRelationships()
		{
			return this._wrapped.GetAllTrustRelationships();
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation GetTrustRelationship(string targetDomainName)
		{
			return this._wrapped.GetTrustRelationship(targetDomainName);
		}
		
		public bool GetSelectiveAuthenticationStatus(string targetDomainName)
		{
			return this._wrapped.GetSelectiveAuthenticationStatus(targetDomainName);
		}
		
		public void SetSelectiveAuthenticationStatus(string targetDomainName, bool enable)
		{
			this._wrapped.SetSelectiveAuthenticationStatus(targetDomainName, enable);
		}
		
		public bool GetSidFilteringStatus(string targetDomainName)
		{
			return this._wrapped.GetSidFilteringStatus(targetDomainName);
		}
		
		public void SetSidFilteringStatus(string targetDomainName, bool enable)
		{
			this._wrapped.SetSidFilteringStatus(targetDomainName, enable);
		}
		
		public void DeleteLocalSideOfTrustRelationship(string targetDomainName)
		{
			this._wrapped.DeleteLocalSideOfTrustRelationship(targetDomainName);
		}
		
		public void DeleteTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain targetDomain)
		{
			this._wrapped.DeleteTrustRelationship(targetDomain);
		}
		
		public void VerifyOutboundTrustRelationship(string targetDomainName)
		{
			this._wrapped.VerifyOutboundTrustRelationship(targetDomainName);
		}
		
		public void VerifyTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection direction)
		{
			this._wrapped.VerifyTrustRelationship(targetDomain, direction);
		}
		
		public void CreateLocalSideOfTrustRelationship(string targetDomainName, System.DirectoryServices.ActiveDirectory.TrustDirection direction, string trustPassword)
		{
			this._wrapped.CreateLocalSideOfTrustRelationship(targetDomainName, direction, trustPassword);
		}
		
		public void CreateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection direction)
		{
			this._wrapped.CreateTrustRelationship(targetDomain, direction);
		}
		
		public void UpdateLocalSideOfTrustRelationship(string targetDomainName, string newTrustPassword)
		{
			this._wrapped.UpdateLocalSideOfTrustRelationship(targetDomainName, newTrustPassword);
		}
		
		public void UpdateLocalSideOfTrustRelationship(string targetDomainName, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection, string newTrustPassword)
		{
			this._wrapped.UpdateLocalSideOfTrustRelationship(targetDomainName, newTrustDirection, newTrustPassword);
		}
		
		public void UpdateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection)
		{
			this._wrapped.UpdateTrustRelationship(targetDomain, newTrustDirection);
		}
		
		public void RepairTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain targetDomain)
		{
			this._wrapped.RepairTrustRelationship(targetDomain);
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DomainCollectionWrapper : IDomainCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.DomainCollection _wrapped;
		
		public DomainCollectionWrapper(System.DirectoryServices.ActiveDirectory.DomainCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.Domain this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.Domain domain)
		{
			return this._wrapped.Contains(domain);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.Domain domain)
		{
			return this._wrapped.IndexOf(domain);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.Domain[] domains, int index)
		{
			this._wrapped.CopyTo(domains, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class SyncUpdateCallbackWrapper : ISyncUpdateCallbackWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.SyncUpdateCallback _wrapped;
		
		public SyncUpdateCallbackWrapper(System.DirectoryServices.ActiveDirectory.SyncUpdateCallback wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.Reflection.MethodInfo Method
		{
			get
			{
				return this._wrapped.Method;
			}
		}
		
		public object Target
		{
			get
			{
				return this._wrapped.Target;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.SyncUpdateCallback Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Invoke(System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent eventType, string targetServer, string sourceServer, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException exception)
		{
			return this._wrapped.Invoke(eventType, targetServer, sourceServer, exception);
		}
		
		public System.IAsyncResult BeginInvoke(System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent eventType, string targetServer, string sourceServer, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException exception, System.AsyncCallback callback, object @object)
		{
			return this._wrapped.BeginInvoke(eventType, targetServer, sourceServer, exception, callback, @object);
		}
		
		public bool EndInvoke(System.IAsyncResult result)
		{
			return this._wrapped.EndInvoke(result);
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this._wrapped.GetObjectData(info, context);
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public System.Delegate[] GetInvocationList()
		{
			return this._wrapped.GetInvocationList();
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
		
		public object DynamicInvoke(object[] args)
		{
			return this._wrapped.DynamicInvoke(args);
		}
		
		public object Clone()
		{
			return this._wrapped.Clone();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
	}
	
	public sealed partial class DomainControllerWrapper : IDomainControllerWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.DomainController _wrapped;
		
		public DomainControllerWrapper(System.DirectoryServices.ActiveDirectory.DomainController wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.Forest Forest
		{
			get
			{
				return this._wrapped.Forest;
			}
		}
		
		public System.DateTime CurrentTime
		{
			get
			{
				return this._wrapped.CurrentTime;
			}
		}
		
		public long HighestCommittedUsn
		{
			get
			{
				return this._wrapped.HighestCommittedUsn;
			}
		}
		
		public string OSVersion
		{
			get
			{
				return this._wrapped.OSVersion;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection Roles
		{
			get
			{
				return this._wrapped.Roles;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.Domain Domain
		{
			get
			{
				return this._wrapped.Domain;
			}
		}
		
		public string IPAddress
		{
			get
			{
				return this._wrapped.IPAddress;
			}
		}
		
		public string SiteName
		{
			get
			{
				return this._wrapped.SiteName;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.SyncUpdateCallback SyncFromAllServersCallback
		{
			get
			{
				return this._wrapped.SyncFromAllServersCallback;
			}
			set
			{
				this._wrapped.SyncFromAllServersCallback = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection InboundConnections
		{
			get
			{
				return this._wrapped.InboundConnections;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection OutboundConnections
		{
			get
			{
				return this._wrapped.OutboundConnections;
			}
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection Partitions
		{
			get
			{
				return this._wrapped.Partitions;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainController Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalog EnableGlobalCatalog()
		{
			return this._wrapped.EnableGlobalCatalog();
		}
		
		public bool IsGlobalCatalog()
		{
			return this._wrapped.IsGlobalCatalog();
		}
		
		public void TransferRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role)
		{
			this._wrapped.TransferRoleOwnership(role);
		}
		
		public void SeizeRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role)
		{
			this._wrapped.SeizeRoleOwnership(role);
		}
		
		public System.DirectoryServices.DirectorySearcher GetDirectorySearcher()
		{
			return this._wrapped.GetDirectorySearcher();
		}
		
		public void CheckReplicationConsistency()
		{
			this._wrapped.CheckReplicationConsistency();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection GetReplicationCursors(string partition)
		{
			return this._wrapped.GetReplicationCursors(partition);
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation GetReplicationOperationInformation()
		{
			return this._wrapped.GetReplicationOperationInformation();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection GetReplicationNeighbors(string partition)
		{
			return this._wrapped.GetReplicationNeighbors(partition);
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection GetAllReplicationNeighbors()
		{
			return this._wrapped.GetAllReplicationNeighbors();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection GetReplicationConnectionFailures()
		{
			return this._wrapped.GetReplicationConnectionFailures();
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath)
		{
			return this._wrapped.GetReplicationMetadata(objectPath);
		}
		
		public void SyncReplicaFromServer(string partition, string sourceServer)
		{
			this._wrapped.SyncReplicaFromServer(partition, sourceServer);
		}
		
		public void TriggerSyncReplicaFromNeighbors(string partition)
		{
			this._wrapped.TriggerSyncReplicaFromNeighbors(partition);
		}
		
		public void SyncReplicaFromAllServers(string partition, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions options)
		{
			this._wrapped.SyncReplicaFromAllServers(partition, options);
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public void MoveToAnotherSite(string siteName)
		{
			this._wrapped.MoveToAnotherSite(siteName);
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class DomainControllerCollectionWrapper : IDomainControllerCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.DomainControllerCollection _wrapped;
		
		public DomainControllerCollectionWrapper(System.DirectoryServices.ActiveDirectory.DomainControllerCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainController this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainControllerCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.DomainController domainController)
		{
			return this._wrapped.Contains(domainController);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.DomainController domainController)
		{
			return this._wrapped.IndexOf(domainController);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.DomainController[] domainControllers, int index)
		{
			this._wrapped.CopyTo(domainControllers, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class SyncFromAllServersErrorInformationWrapper : ISyncFromAllServersErrorInformationWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation _wrapped;
		
		public SyncFromAllServersErrorInformationWrapper(System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorCategory ErrorCategory
		{
			get
			{
				return this._wrapped.ErrorCategory;
			}
		}
		
		public int ErrorCode
		{
			get
			{
				return this._wrapped.ErrorCode;
			}
		}
		
		public string ErrorMessage
		{
			get
			{
				return this._wrapped.ErrorMessage;
			}
		}
		
		public string TargetServer
		{
			get
			{
				return this._wrapped.TargetServer;
			}
		}
		
		public string SourceServer
		{
			get
			{
				return this._wrapped.SourceServer;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectoryObjectNotFoundExceptionWrapper : IActiveDirectoryObjectNotFoundExceptionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException _wrapped;
		
		public ActiveDirectoryObjectNotFoundExceptionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.Type Type
		{
			get
			{
				return this._wrapped.Type;
			}
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public string Message
		{
			get
			{
				return this._wrapped.Message;
			}
		}
		
		public System.Collections.IDictionary Data
		{
			get
			{
				return this._wrapped.Data;
			}
		}
		
		public System.Exception InnerException
		{
			get
			{
				return this._wrapped.InnerException;
			}
		}
		
		public System.Reflection.MethodBase TargetSite
		{
			get
			{
				return this._wrapped.TargetSite;
			}
		}
		
		public string StackTrace
		{
			get
			{
				return this._wrapped.StackTrace;
			}
		}
		
		public string HelpLink
		{
			get
			{
				return this._wrapped.HelpLink;
			}
			set
			{
				this._wrapped.HelpLink = value;
			}
		}
		
		public string Source
		{
			get
			{
				return this._wrapped.Source;
			}
			set
			{
				this._wrapped.Source = value;
			}
		}
		
		public int HResult
		{
			get
			{
				return this._wrapped.HResult;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
		{
			this._wrapped.GetObjectData(serializationInfo, streamingContext);
		}
		
		public System.Exception GetBaseException()
		{
			return this._wrapped.GetBaseException();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectoryOperationExceptionWrapper : IActiveDirectoryOperationExceptionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException _wrapped;
		
		public ActiveDirectoryOperationExceptionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public int ErrorCode
		{
			get
			{
				return this._wrapped.ErrorCode;
			}
		}
		
		public string Message
		{
			get
			{
				return this._wrapped.Message;
			}
		}
		
		public System.Collections.IDictionary Data
		{
			get
			{
				return this._wrapped.Data;
			}
		}
		
		public System.Exception InnerException
		{
			get
			{
				return this._wrapped.InnerException;
			}
		}
		
		public System.Reflection.MethodBase TargetSite
		{
			get
			{
				return this._wrapped.TargetSite;
			}
		}
		
		public string StackTrace
		{
			get
			{
				return this._wrapped.StackTrace;
			}
		}
		
		public string HelpLink
		{
			get
			{
				return this._wrapped.HelpLink;
			}
			set
			{
				this._wrapped.HelpLink = value;
			}
		}
		
		public string Source
		{
			get
			{
				return this._wrapped.Source;
			}
			set
			{
				this._wrapped.Source = value;
			}
		}
		
		public int HResult
		{
			get
			{
				return this._wrapped.HResult;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
		{
			this._wrapped.GetObjectData(serializationInfo, streamingContext);
		}
		
		public System.Exception GetBaseException()
		{
			return this._wrapped.GetBaseException();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectoryServerDownExceptionWrapper : IActiveDirectoryServerDownExceptionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException _wrapped;
		
		public ActiveDirectoryServerDownExceptionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public int ErrorCode
		{
			get
			{
				return this._wrapped.ErrorCode;
			}
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public string Message
		{
			get
			{
				return this._wrapped.Message;
			}
		}
		
		public System.Collections.IDictionary Data
		{
			get
			{
				return this._wrapped.Data;
			}
		}
		
		public System.Exception InnerException
		{
			get
			{
				return this._wrapped.InnerException;
			}
		}
		
		public System.Reflection.MethodBase TargetSite
		{
			get
			{
				return this._wrapped.TargetSite;
			}
		}
		
		public string StackTrace
		{
			get
			{
				return this._wrapped.StackTrace;
			}
		}
		
		public string HelpLink
		{
			get
			{
				return this._wrapped.HelpLink;
			}
			set
			{
				this._wrapped.HelpLink = value;
			}
		}
		
		public string Source
		{
			get
			{
				return this._wrapped.Source;
			}
			set
			{
				this._wrapped.Source = value;
			}
		}
		
		public int HResult
		{
			get
			{
				return this._wrapped.HResult;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
		{
			this._wrapped.GetObjectData(serializationInfo, streamingContext);
		}
		
		public System.Exception GetBaseException()
		{
			return this._wrapped.GetBaseException();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectoryObjectExistsExceptionWrapper : IActiveDirectoryObjectExistsExceptionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException _wrapped;
		
		public ActiveDirectoryObjectExistsExceptionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Message
		{
			get
			{
				return this._wrapped.Message;
			}
		}
		
		public System.Collections.IDictionary Data
		{
			get
			{
				return this._wrapped.Data;
			}
		}
		
		public System.Exception InnerException
		{
			get
			{
				return this._wrapped.InnerException;
			}
		}
		
		public System.Reflection.MethodBase TargetSite
		{
			get
			{
				return this._wrapped.TargetSite;
			}
		}
		
		public string StackTrace
		{
			get
			{
				return this._wrapped.StackTrace;
			}
		}
		
		public string HelpLink
		{
			get
			{
				return this._wrapped.HelpLink;
			}
			set
			{
				this._wrapped.HelpLink = value;
			}
		}
		
		public string Source
		{
			get
			{
				return this._wrapped.Source;
			}
			set
			{
				this._wrapped.Source = value;
			}
		}
		
		public int HResult
		{
			get
			{
				return this._wrapped.HResult;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public System.Exception GetBaseException()
		{
			return this._wrapped.GetBaseException();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this._wrapped.GetObjectData(info, context);
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class SyncFromAllServersOperationExceptionWrapper : ISyncFromAllServersOperationExceptionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException _wrapped;
		
		public SyncFromAllServersOperationExceptionWrapper(System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation[] ErrorInformation
		{
			get
			{
				return this._wrapped.ErrorInformation;
			}
		}
		
		public int ErrorCode
		{
			get
			{
				return this._wrapped.ErrorCode;
			}
		}
		
		public string Message
		{
			get
			{
				return this._wrapped.Message;
			}
		}
		
		public System.Collections.IDictionary Data
		{
			get
			{
				return this._wrapped.Data;
			}
		}
		
		public System.Exception InnerException
		{
			get
			{
				return this._wrapped.InnerException;
			}
		}
		
		public System.Reflection.MethodBase TargetSite
		{
			get
			{
				return this._wrapped.TargetSite;
			}
		}
		
		public string StackTrace
		{
			get
			{
				return this._wrapped.StackTrace;
			}
		}
		
		public string HelpLink
		{
			get
			{
				return this._wrapped.HelpLink;
			}
			set
			{
				this._wrapped.HelpLink = value;
			}
		}
		
		public string Source
		{
			get
			{
				return this._wrapped.Source;
			}
			set
			{
				this._wrapped.Source = value;
			}
		}
		
		public int HResult
		{
			get
			{
				return this._wrapped.HResult;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
		{
			this._wrapped.GetObjectData(serializationInfo, streamingContext);
		}
		
		public System.Exception GetBaseException()
		{
			return this._wrapped.GetBaseException();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ForestTrustCollisionExceptionWrapper : IForestTrustCollisionExceptionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException _wrapped;
		
		public ForestTrustCollisionExceptionWrapper(System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection Collisions
		{
			get
			{
				return this._wrapped.Collisions;
			}
		}
		
		public int ErrorCode
		{
			get
			{
				return this._wrapped.ErrorCode;
			}
		}
		
		public string Message
		{
			get
			{
				return this._wrapped.Message;
			}
		}
		
		public System.Collections.IDictionary Data
		{
			get
			{
				return this._wrapped.Data;
			}
		}
		
		public System.Exception InnerException
		{
			get
			{
				return this._wrapped.InnerException;
			}
		}
		
		public System.Reflection.MethodBase TargetSite
		{
			get
			{
				return this._wrapped.TargetSite;
			}
		}
		
		public string StackTrace
		{
			get
			{
				return this._wrapped.StackTrace;
			}
		}
		
		public string HelpLink
		{
			get
			{
				return this._wrapped.HelpLink;
			}
			set
			{
				this._wrapped.HelpLink = value;
			}
		}
		
		public string Source
		{
			get
			{
				return this._wrapped.Source;
			}
			set
			{
				this._wrapped.Source = value;
			}
		}
		
		public int HResult
		{
			get
			{
				return this._wrapped.HResult;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
		{
			this._wrapped.GetObjectData(serializationInfo, streamingContext);
		}
		
		public System.Exception GetBaseException()
		{
			return this._wrapped.GetBaseException();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ForestWrapper : IForestWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.Forest _wrapped;
		
		public ForestWrapper(System.DirectoryServices.ActiveDirectory.Forest wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection Sites
		{
			get
			{
				return this._wrapped.Sites;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainCollection Domains
		{
			get
			{
				return this._wrapped.Domains;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection GlobalCatalogs
		{
			get
			{
				return this._wrapped.GlobalCatalogs;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection ApplicationPartitions
		{
			get
			{
				return this._wrapped.ApplicationPartitions;
			}
		}
		
		public int ForestModeLevel
		{
			get
			{
				return this._wrapped.ForestModeLevel;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestMode ForestMode
		{
			get
			{
				return this._wrapped.ForestMode;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.Domain RootDomain
		{
			get
			{
				return this._wrapped.RootDomain;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema Schema
		{
			get
			{
				return this._wrapped.Schema;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainController SchemaRoleOwner
		{
			get
			{
				return this._wrapped.SchemaRoleOwner;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainController NamingRoleOwner
		{
			get
			{
				return this._wrapped.NamingRoleOwner;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.Forest Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public void RaiseForestFunctionalityLevel(int forestMode)
		{
			this._wrapped.RaiseForestFunctionalityLevel(forestMode);
		}
		
		public void RaiseForestFunctionality(System.DirectoryServices.ActiveDirectory.ForestMode forestMode)
		{
			this._wrapped.RaiseForestFunctionality(forestMode);
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalog FindGlobalCatalog()
		{
			return this._wrapped.FindGlobalCatalog();
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalog FindGlobalCatalog(string siteName)
		{
			return this._wrapped.FindGlobalCatalog(siteName);
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalog FindGlobalCatalog(System.DirectoryServices.ActiveDirectory.LocatorOptions flag)
		{
			return this._wrapped.FindGlobalCatalog(flag);
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalog FindGlobalCatalog(string siteName, System.DirectoryServices.ActiveDirectory.LocatorOptions flag)
		{
			return this._wrapped.FindGlobalCatalog(siteName, flag);
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection FindAllGlobalCatalogs()
		{
			return this._wrapped.FindAllGlobalCatalogs();
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection FindAllGlobalCatalogs(string siteName)
		{
			return this._wrapped.FindAllGlobalCatalogs(siteName);
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection FindAllDiscoverableGlobalCatalogs()
		{
			return this._wrapped.FindAllDiscoverableGlobalCatalogs();
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection FindAllDiscoverableGlobalCatalogs(string siteName)
		{
			return this._wrapped.FindAllDiscoverableGlobalCatalogs(siteName);
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection GetAllTrustRelationships()
		{
			return this._wrapped.GetAllTrustRelationships();
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation GetTrustRelationship(string targetForestName)
		{
			return this._wrapped.GetTrustRelationship(targetForestName);
		}
		
		public bool GetSelectiveAuthenticationStatus(string targetForestName)
		{
			return this._wrapped.GetSelectiveAuthenticationStatus(targetForestName);
		}
		
		public void SetSelectiveAuthenticationStatus(string targetForestName, bool enable)
		{
			this._wrapped.SetSelectiveAuthenticationStatus(targetForestName, enable);
		}
		
		public bool GetSidFilteringStatus(string targetForestName)
		{
			return this._wrapped.GetSidFilteringStatus(targetForestName);
		}
		
		public void SetSidFilteringStatus(string targetForestName, bool enable)
		{
			this._wrapped.SetSidFilteringStatus(targetForestName, enable);
		}
		
		public void DeleteLocalSideOfTrustRelationship(string targetForestName)
		{
			this._wrapped.DeleteLocalSideOfTrustRelationship(targetForestName);
		}
		
		public void DeleteTrustRelationship(System.DirectoryServices.ActiveDirectory.Forest targetForest)
		{
			this._wrapped.DeleteTrustRelationship(targetForest);
		}
		
		public void VerifyOutboundTrustRelationship(string targetForestName)
		{
			this._wrapped.VerifyOutboundTrustRelationship(targetForestName);
		}
		
		public void VerifyTrustRelationship(System.DirectoryServices.ActiveDirectory.Forest targetForest, System.DirectoryServices.ActiveDirectory.TrustDirection direction)
		{
			this._wrapped.VerifyTrustRelationship(targetForest, direction);
		}
		
		public void CreateLocalSideOfTrustRelationship(string targetForestName, System.DirectoryServices.ActiveDirectory.TrustDirection direction, string trustPassword)
		{
			this._wrapped.CreateLocalSideOfTrustRelationship(targetForestName, direction, trustPassword);
		}
		
		public void CreateTrustRelationship(System.DirectoryServices.ActiveDirectory.Forest targetForest, System.DirectoryServices.ActiveDirectory.TrustDirection direction)
		{
			this._wrapped.CreateTrustRelationship(targetForest, direction);
		}
		
		public void UpdateLocalSideOfTrustRelationship(string targetForestName, string newTrustPassword)
		{
			this._wrapped.UpdateLocalSideOfTrustRelationship(targetForestName, newTrustPassword);
		}
		
		public void UpdateLocalSideOfTrustRelationship(string targetForestName, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection, string newTrustPassword)
		{
			this._wrapped.UpdateLocalSideOfTrustRelationship(targetForestName, newTrustDirection, newTrustPassword);
		}
		
		public void UpdateTrustRelationship(System.DirectoryServices.ActiveDirectory.Forest targetForest, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection)
		{
			this._wrapped.UpdateTrustRelationship(targetForest, newTrustDirection);
		}
		
		public void RepairTrustRelationship(System.DirectoryServices.ActiveDirectory.Forest targetForest)
		{
			this._wrapped.RepairTrustRelationship(targetForest);
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ForestTrustRelationshipCollisionWrapper : IForestTrustRelationshipCollisionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision _wrapped;
		
		public ForestTrustRelationshipCollisionWrapper(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustCollisionType CollisionType
		{
			get
			{
				return this._wrapped.CollisionType;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TopLevelNameCollisionOptions TopLevelNameCollisionOption
		{
			get
			{
				return this._wrapped.TopLevelNameCollisionOption;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainCollisionOptions DomainCollisionOption
		{
			get
			{
				return this._wrapped.DomainCollisionOption;
			}
		}
		
		public string CollisionRecord
		{
			get
			{
				return this._wrapped.CollisionRecord;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ForestTrustRelationshipCollisionCollectionWrapper : IForestTrustRelationshipCollisionCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection _wrapped;
		
		public ForestTrustRelationshipCollisionCollectionWrapper(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision collision)
		{
			return this._wrapped.Contains(collision);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision collision)
		{
			return this._wrapped.IndexOf(collision);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision[] array, int index)
		{
			this._wrapped.CopyTo(array, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ForestTrustDomainInfoCollectionWrapper : IForestTrustDomainInfoCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection _wrapped;
		
		public ForestTrustDomainInfoCollectionWrapper(System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation information)
		{
			return this._wrapped.Contains(information);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation information)
		{
			return this._wrapped.IndexOf(information);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation[] array, int index)
		{
			this._wrapped.CopyTo(array, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ForestTrustDomainInformationWrapper : IForestTrustDomainInformationWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation _wrapped;
		
		public ForestTrustDomainInformationWrapper(System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string DnsName
		{
			get
			{
				return this._wrapped.DnsName;
			}
		}
		
		public string NetBiosName
		{
			get
			{
				return this._wrapped.NetBiosName;
			}
		}
		
		public string DomainSid
		{
			get
			{
				return this._wrapped.DomainSid;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustDomainStatus Status
		{
			get
			{
				return this._wrapped.Status;
			}
			set
			{
				this._wrapped.Status = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ForestTrustRelationshipInformationWrapper : IForestTrustRelationshipInformationWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation _wrapped;
		
		public ForestTrustRelationshipInformationWrapper(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.TopLevelNameCollection TopLevelNames
		{
			get
			{
				return this._wrapped.TopLevelNames;
			}
		}
		
		public System.Collections.Specialized.StringCollection ExcludedTopLevelNames
		{
			get
			{
				return this._wrapped.ExcludedTopLevelNames;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection TrustedDomainInformation
		{
			get
			{
				return this._wrapped.TrustedDomainInformation;
			}
		}
		
		public string SourceName
		{
			get
			{
				return this._wrapped.SourceName;
			}
		}
		
		public string TargetName
		{
			get
			{
				return this._wrapped.TargetName;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustType TrustType
		{
			get
			{
				return this._wrapped.TrustType;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustDirection TrustDirection
		{
			get
			{
				return this._wrapped.TrustDirection;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void Save()
		{
			this._wrapped.Save();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class GlobalCatalogWrapper : IGlobalCatalogWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.GlobalCatalog _wrapped;
		
		public GlobalCatalogWrapper(System.DirectoryServices.ActiveDirectory.GlobalCatalog wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.Forest Forest
		{
			get
			{
				return this._wrapped.Forest;
			}
		}
		
		public System.DateTime CurrentTime
		{
			get
			{
				return this._wrapped.CurrentTime;
			}
		}
		
		public long HighestCommittedUsn
		{
			get
			{
				return this._wrapped.HighestCommittedUsn;
			}
		}
		
		public string OSVersion
		{
			get
			{
				return this._wrapped.OSVersion;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection Roles
		{
			get
			{
				return this._wrapped.Roles;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.Domain Domain
		{
			get
			{
				return this._wrapped.Domain;
			}
		}
		
		public string IPAddress
		{
			get
			{
				return this._wrapped.IPAddress;
			}
		}
		
		public string SiteName
		{
			get
			{
				return this._wrapped.SiteName;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.SyncUpdateCallback SyncFromAllServersCallback
		{
			get
			{
				return this._wrapped.SyncFromAllServersCallback;
			}
			set
			{
				this._wrapped.SyncFromAllServersCallback = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection InboundConnections
		{
			get
			{
				return this._wrapped.InboundConnections;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection OutboundConnections
		{
			get
			{
				return this._wrapped.OutboundConnections;
			}
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection Partitions
		{
			get
			{
				return this._wrapped.Partitions;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalog Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalog EnableGlobalCatalog()
		{
			return this._wrapped.EnableGlobalCatalog();
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainController DisableGlobalCatalog()
		{
			return this._wrapped.DisableGlobalCatalog();
		}
		
		public bool IsGlobalCatalog()
		{
			return this._wrapped.IsGlobalCatalog();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties()
		{
			return this._wrapped.FindAllProperties();
		}
		
		public System.DirectoryServices.DirectorySearcher GetDirectorySearcher()
		{
			return this._wrapped.GetDirectorySearcher();
		}
		
		public void TransferRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role)
		{
			this._wrapped.TransferRoleOwnership(role);
		}
		
		public void SeizeRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role)
		{
			this._wrapped.SeizeRoleOwnership(role);
		}
		
		public void CheckReplicationConsistency()
		{
			this._wrapped.CheckReplicationConsistency();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection GetReplicationCursors(string partition)
		{
			return this._wrapped.GetReplicationCursors(partition);
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation GetReplicationOperationInformation()
		{
			return this._wrapped.GetReplicationOperationInformation();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection GetReplicationNeighbors(string partition)
		{
			return this._wrapped.GetReplicationNeighbors(partition);
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection GetAllReplicationNeighbors()
		{
			return this._wrapped.GetAllReplicationNeighbors();
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection GetReplicationConnectionFailures()
		{
			return this._wrapped.GetReplicationConnectionFailures();
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath)
		{
			return this._wrapped.GetReplicationMetadata(objectPath);
		}
		
		public void SyncReplicaFromServer(string partition, string sourceServer)
		{
			this._wrapped.SyncReplicaFromServer(partition, sourceServer);
		}
		
		public void TriggerSyncReplicaFromNeighbors(string partition)
		{
			this._wrapped.TriggerSyncReplicaFromNeighbors(partition);
		}
		
		public void SyncReplicaFromAllServers(string partition, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions options)
		{
			this._wrapped.SyncReplicaFromAllServers(partition, options);
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public void MoveToAnotherSite(string siteName)
		{
			this._wrapped.MoveToAnotherSite(siteName);
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class GlobalCatalogCollectionWrapper : IGlobalCatalogCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection _wrapped;
		
		public GlobalCatalogCollectionWrapper(System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalog this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.GlobalCatalog globalCatalog)
		{
			return this._wrapped.Contains(globalCatalog);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.GlobalCatalog globalCatalog)
		{
			return this._wrapped.IndexOf(globalCatalog);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.GlobalCatalog[] globalCatalogs, int index)
		{
			this._wrapped.CopyTo(globalCatalogs, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReadOnlyActiveDirectorySchemaClassCollectionWrapper : IReadOnlyActiveDirectorySchemaClassCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection _wrapped;
		
		public ReadOnlyActiveDirectorySchemaClassCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass schemaClass)
		{
			return this._wrapped.Contains(schemaClass);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass schemaClass)
		{
			return this._wrapped.IndexOf(schemaClass);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass[] classes, int index)
		{
			this._wrapped.CopyTo(classes, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReadOnlyActiveDirectorySchemaPropertyCollectionWrapper : IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection _wrapped;
		
		public ReadOnlyActiveDirectorySchemaPropertyCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty schemaProperty)
		{
			return this._wrapped.Contains(schemaProperty);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty schemaProperty)
		{
			return this._wrapped.IndexOf(schemaProperty);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty[] properties, int index)
		{
			this._wrapped.CopyTo(properties, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReadOnlyDirectoryServerCollectionWrapper : IReadOnlyDirectoryServerCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection _wrapped;
		
		public ReadOnlyDirectoryServerCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.DirectoryServer directoryServer)
		{
			return this._wrapped.Contains(directoryServer);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.DirectoryServer directoryServer)
		{
			return this._wrapped.IndexOf(directoryServer);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.DirectoryServer[] directoryServers, int index)
		{
			this._wrapped.CopyTo(directoryServers, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReadOnlySiteCollectionWrapper : IReadOnlySiteCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection _wrapped;
		
		public ReadOnlySiteCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySite this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite site)
		{
			return this._wrapped.Contains(site);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite site)
		{
			return this._wrapped.IndexOf(site);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite[] sites, int index)
		{
			this._wrapped.CopyTo(sites, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReadOnlySiteLinkBridgeCollectionWrapper : IReadOnlySiteLinkBridgeCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection _wrapped;
		
		public ReadOnlySiteLinkBridgeCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge bridge)
		{
			return this._wrapped.Contains(bridge);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge bridge)
		{
			return this._wrapped.IndexOf(bridge);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge[] bridges, int index)
		{
			this._wrapped.CopyTo(bridges, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReadOnlySiteLinkCollectionWrapper : IReadOnlySiteLinkCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection _wrapped;
		
		public ReadOnlySiteLinkCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink link)
		{
			return this._wrapped.Contains(link);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink link)
		{
			return this._wrapped.IndexOf(link);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink[] links, int index)
		{
			this._wrapped.CopyTo(links, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReadOnlyStringCollectionWrapper : IReadOnlyStringCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection _wrapped;
		
		public ReadOnlyStringCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(string value)
		{
			return this._wrapped.Contains(value);
		}
		
		public int IndexOf(string value)
		{
			return this._wrapped.IndexOf(value);
		}
		
		public void CopyTo(string[] values, int index)
		{
			this._wrapped.CopyTo(values, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReplicationConnectionWrapper : IReplicationConnectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationConnection _wrapped;
		
		public ReplicationConnectionWrapper(System.DirectoryServices.ActiveDirectory.ReplicationConnection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public string SourceServer
		{
			get
			{
				return this._wrapped.SourceServer;
			}
		}
		
		public string DestinationServer
		{
			get
			{
				return this._wrapped.DestinationServer;
			}
		}
		
		public bool Enabled
		{
			get
			{
				return this._wrapped.Enabled;
			}
			set
			{
				this._wrapped.Enabled = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get
			{
				return this._wrapped.TransportType;
			}
		}
		
		public bool GeneratedByKcc
		{
			get
			{
				return this._wrapped.GeneratedByKcc;
			}
			set
			{
				this._wrapped.GeneratedByKcc = value;
			}
		}
		
		public bool ReciprocalReplicationEnabled
		{
			get
			{
				return this._wrapped.ReciprocalReplicationEnabled;
			}
			set
			{
				this._wrapped.ReciprocalReplicationEnabled = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.NotificationStatus ChangeNotificationStatus
		{
			get
			{
				return this._wrapped.ChangeNotificationStatus;
			}
			set
			{
				this._wrapped.ChangeNotificationStatus = value;
			}
		}
		
		public bool DataCompressionEnabled
		{
			get
			{
				return this._wrapped.DataCompressionEnabled;
			}
			set
			{
				this._wrapped.DataCompressionEnabled = value;
			}
		}
		
		public bool ReplicationScheduleOwnedByUser
		{
			get
			{
				return this._wrapped.ReplicationScheduleOwnedByUser;
			}
			set
			{
				this._wrapped.ReplicationScheduleOwnedByUser = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationSpan ReplicationSpan
		{
			get
			{
				return this._wrapped.ReplicationSpan;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule ReplicationSchedule
		{
			get
			{
				return this._wrapped.ReplicationSchedule;
			}
			set
			{
				this._wrapped.ReplicationSchedule = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationConnection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public void Delete()
		{
			this._wrapped.Delete();
		}
		
		public void Save()
		{
			this._wrapped.Save();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReplicationConnectionCollectionWrapper : IReplicationConnectionCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection _wrapped;
		
		public ReplicationConnectionCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationConnection this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ReplicationConnection connection)
		{
			return this._wrapped.Contains(connection);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ReplicationConnection connection)
		{
			return this._wrapped.IndexOf(connection);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ReplicationConnection[] connections, int index)
		{
			this._wrapped.CopyTo(connections, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReplicationCursorWrapper : IReplicationCursorWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationCursor _wrapped;
		
		public ReplicationCursorWrapper(System.DirectoryServices.ActiveDirectory.ReplicationCursor wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string PartitionName
		{
			get
			{
				return this._wrapped.PartitionName;
			}
		}
		
		public System.Guid SourceInvocationId
		{
			get
			{
				return this._wrapped.SourceInvocationId;
			}
		}
		
		public long UpToDatenessUsn
		{
			get
			{
				return this._wrapped.UpToDatenessUsn;
			}
		}
		
		public string SourceServer
		{
			get
			{
				return this._wrapped.SourceServer;
			}
		}
		
		public System.DateTime LastSuccessfulSyncTime
		{
			get
			{
				return this._wrapped.LastSuccessfulSyncTime;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationCursor Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReplicationCursorCollectionWrapper : IReplicationCursorCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection _wrapped;
		
		public ReplicationCursorCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationCursor this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ReplicationCursor cursor)
		{
			return this._wrapped.Contains(cursor);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ReplicationCursor cursor)
		{
			return this._wrapped.IndexOf(cursor);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ReplicationCursor[] values, int index)
		{
			this._wrapped.CopyTo(values, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReplicationFailureWrapper : IReplicationFailureWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationFailure _wrapped;
		
		public ReplicationFailureWrapper(System.DirectoryServices.ActiveDirectory.ReplicationFailure wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string SourceServer
		{
			get
			{
				return this._wrapped.SourceServer;
			}
		}
		
		public System.DateTime FirstFailureTime
		{
			get
			{
				return this._wrapped.FirstFailureTime;
			}
		}
		
		public int ConsecutiveFailureCount
		{
			get
			{
				return this._wrapped.ConsecutiveFailureCount;
			}
		}
		
		public int LastErrorCode
		{
			get
			{
				return this._wrapped.LastErrorCode;
			}
		}
		
		public string LastErrorMessage
		{
			get
			{
				return this._wrapped.LastErrorMessage;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationFailure Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReplicationFailureCollectionWrapper : IReplicationFailureCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection _wrapped;
		
		public ReplicationFailureCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationFailure this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ReplicationFailure failure)
		{
			return this._wrapped.Contains(failure);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ReplicationFailure failure)
		{
			return this._wrapped.IndexOf(failure);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ReplicationFailure[] failures, int index)
		{
			this._wrapped.CopyTo(failures, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReplicationNeighborWrapper : IReplicationNeighborWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationNeighbor _wrapped;
		
		public ReplicationNeighborWrapper(System.DirectoryServices.ActiveDirectory.ReplicationNeighbor wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string PartitionName
		{
			get
			{
				return this._wrapped.PartitionName;
			}
		}
		
		public string SourceServer
		{
			get
			{
				return this._wrapped.SourceServer;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get
			{
				return this._wrapped.TransportType;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationNeighbor.ReplicationNeighborOptions ReplicationNeighborOption
		{
			get
			{
				return this._wrapped.ReplicationNeighborOption;
			}
		}
		
		public System.Guid SourceInvocationId
		{
			get
			{
				return this._wrapped.SourceInvocationId;
			}
		}
		
		public long UsnLastObjectChangeSynced
		{
			get
			{
				return this._wrapped.UsnLastObjectChangeSynced;
			}
		}
		
		public long UsnAttributeFilter
		{
			get
			{
				return this._wrapped.UsnAttributeFilter;
			}
		}
		
		public System.DateTime LastSuccessfulSync
		{
			get
			{
				return this._wrapped.LastSuccessfulSync;
			}
		}
		
		public System.DateTime LastAttemptedSync
		{
			get
			{
				return this._wrapped.LastAttemptedSync;
			}
		}
		
		public int LastSyncResult
		{
			get
			{
				return this._wrapped.LastSyncResult;
			}
		}
		
		public string LastSyncMessage
		{
			get
			{
				return this._wrapped.LastSyncMessage;
			}
		}
		
		public int ConsecutiveFailureCount
		{
			get
			{
				return this._wrapped.ConsecutiveFailureCount;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationNeighbor Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReplicationNeighborCollectionWrapper : IReplicationNeighborCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection _wrapped;
		
		public ReplicationNeighborCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationNeighbor this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ReplicationNeighbor neighbor)
		{
			return this._wrapped.Contains(neighbor);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ReplicationNeighbor neighbor)
		{
			return this._wrapped.IndexOf(neighbor);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ReplicationNeighbor[] neighbors, int index)
		{
			this._wrapped.CopyTo(neighbors, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReplicationOperationWrapper : IReplicationOperationWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationOperation _wrapped;
		
		public ReplicationOperationWrapper(System.DirectoryServices.ActiveDirectory.ReplicationOperation wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DateTime TimeEnqueued
		{
			get
			{
				return this._wrapped.TimeEnqueued;
			}
		}
		
		public int OperationNumber
		{
			get
			{
				return this._wrapped.OperationNumber;
			}
		}
		
		public int Priority
		{
			get
			{
				return this._wrapped.Priority;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationOperationType OperationType
		{
			get
			{
				return this._wrapped.OperationType;
			}
		}
		
		public string PartitionName
		{
			get
			{
				return this._wrapped.PartitionName;
			}
		}
		
		public string SourceServer
		{
			get
			{
				return this._wrapped.SourceServer;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationOperation Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReplicationOperationCollectionWrapper : IReplicationOperationCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection _wrapped;
		
		public ReplicationOperationCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationOperation this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ReplicationOperation operation)
		{
			return this._wrapped.Contains(operation);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ReplicationOperation operation)
		{
			return this._wrapped.IndexOf(operation);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ReplicationOperation[] operations, int index)
		{
			this._wrapped.CopyTo(operations, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ReplicationOperationInformationWrapper : IReplicationOperationInformationWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation _wrapped;
		
		public ReplicationOperationInformationWrapper(System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DateTime OperationStartTime
		{
			get
			{
				return this._wrapped.OperationStartTime;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationOperation CurrentOperation
		{
			get
			{
				return this._wrapped.CurrentOperation;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection PendingOperations
		{
			get
			{
				return this._wrapped.PendingOperations;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectoryInterSiteTransportWrapper : IActiveDirectoryInterSiteTransportWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport _wrapped;
		
		public ActiveDirectoryInterSiteTransportWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get
			{
				return this._wrapped.TransportType;
			}
		}
		
		public bool IgnoreReplicationSchedule
		{
			get
			{
				return this._wrapped.IgnoreReplicationSchedule;
			}
			set
			{
				this._wrapped.IgnoreReplicationSchedule = value;
			}
		}
		
		public bool BridgeAllSiteLinks
		{
			get
			{
				return this._wrapped.BridgeAllSiteLinks;
			}
			set
			{
				this._wrapped.BridgeAllSiteLinks = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection SiteLinks
		{
			get
			{
				return this._wrapped.SiteLinks;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection SiteLinkBridges
		{
			get
			{
				return this._wrapped.SiteLinkBridges;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public void Save()
		{
			this._wrapped.Save();
		}
		
		public System.DirectoryServices.DirectoryEntry GetDirectoryEntry()
		{
			return this._wrapped.GetDirectoryEntry();
		}
		
		public void Dispose()
		{
			this._wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class ActiveDirectoryRoleCollectionWrapper : IActiveDirectoryRoleCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection _wrapped;
		
		public ActiveDirectoryRoleCollectionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role)
		{
			return this._wrapped.Contains(role);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role)
		{
			return this._wrapped.IndexOf(role);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole[] roles, int index)
		{
			this._wrapped.CopyTo(roles, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class AdamRoleCollectionWrapper : IAdamRoleCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.AdamRoleCollection _wrapped;
		
		public AdamRoleCollectionWrapper(System.DirectoryServices.ActiveDirectory.AdamRoleCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamRole this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamRoleCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.AdamRole role)
		{
			return this._wrapped.Contains(role);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.AdamRole role)
		{
			return this._wrapped.IndexOf(role);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.AdamRole[] roles, int index)
		{
			this._wrapped.CopyTo(roles, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class TopLevelNameWrapper : ITopLevelNameWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.TopLevelName _wrapped;
		
		public TopLevelNameWrapper(System.DirectoryServices.ActiveDirectory.TopLevelName wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return this._wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TopLevelNameStatus Status
		{
			get
			{
				return this._wrapped.Status;
			}
			set
			{
				this._wrapped.Status = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TopLevelName Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class TopLevelNameCollectionWrapper : ITopLevelNameCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.TopLevelNameCollection _wrapped;
		
		public TopLevelNameCollectionWrapper(System.DirectoryServices.ActiveDirectory.TopLevelNameCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.TopLevelName this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TopLevelNameCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.TopLevelName name)
		{
			return this._wrapped.Contains(name);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.TopLevelName name)
		{
			return this._wrapped.IndexOf(name);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.TopLevelName[] names, int index)
		{
			this._wrapped.CopyTo(names, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class TrustRelationshipInformationWrapper : ITrustRelationshipInformationWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation _wrapped;
		
		public TrustRelationshipInformationWrapper(System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public string SourceName
		{
			get
			{
				return this._wrapped.SourceName;
			}
		}
		
		public string TargetName
		{
			get
			{
				return this._wrapped.TargetName;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustType TrustType
		{
			get
			{
				return this._wrapped.TrustType;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustDirection TrustDirection
		{
			get
			{
				return this._wrapped.TrustDirection;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
	
	public sealed partial class TrustRelationshipInformationCollectionWrapper : ITrustRelationshipInformationCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection _wrapped;
		
		public TrustRelationshipInformationCollectionWrapper(System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection wrapped)
		{
			this._wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation this[int index]
		{
			get
			{
				return this._wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return this._wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection Wrapped
		{
			get
			{
				return this._wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation information)
		{
			return this._wrapped.Contains(information);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation information)
		{
			return this._wrapped.IndexOf(information);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation[] array, int index)
		{
			this._wrapped.CopyTo(array, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this._wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return this._wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return this._wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return this._wrapped.GetHashCode();
		}
	}
}
