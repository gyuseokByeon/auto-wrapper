//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoWrapper.Samples.WrappersForDirectoryServices
{
	
	
	// Interface for ActiveDirectorySecurityWrapper
	public partial interface IActiveDirectorySecurityWrapper
	{
		
		System.Type AccessRightType
		{
			get;
		}
		
		System.Type AccessRuleType
		{
			get;
		}
		
		System.Type AuditRuleType
		{
			get;
		}
		
		bool AreAccessRulesProtected
		{
			get;
		}
		
		bool AreAuditRulesProtected
		{
			get;
		}
		
		bool AreAccessRulesCanonical
		{
			get;
		}
		
		bool AreAuditRulesCanonical
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurity Wrapped
		{
			get;
		}
		
		void AddAccessRule(IActiveDirectoryAccessRuleWrapper rule);
		
		void SetAccessRule(IActiveDirectoryAccessRuleWrapper rule);
		
		void ResetAccessRule(IActiveDirectoryAccessRuleWrapper rule);
		
		void RemoveAccess(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.AccessControlType type);
		
		bool RemoveAccessRule(IActiveDirectoryAccessRuleWrapper rule);
		
		void RemoveAccessRuleSpecific(IActiveDirectoryAccessRuleWrapper rule);
		
		bool ModifyAccessRule(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, out bool modified);
		
		void PurgeAccessRules(System.Security.Principal.IdentityReference identity);
		
		void AddAuditRule(IActiveDirectoryAuditRuleWrapper rule);
		
		void SetAuditRule(IActiveDirectoryAuditRuleWrapper rule);
		
		void RemoveAudit(System.Security.Principal.IdentityReference identity);
		
		bool RemoveAuditRule(IActiveDirectoryAuditRuleWrapper rule);
		
		void RemoveAuditRuleSpecific(IActiveDirectoryAuditRuleWrapper rule);
		
		bool ModifyAuditRule(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AuditRule rule, out bool modified);
		
		void PurgeAuditRules(System.Security.Principal.IdentityReference identity);
		
		System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
		
		System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type, System.Guid objectGuid, System.Guid inheritedObjectGuid);
		
		System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);
		
		System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags, System.Guid objectGuid, System.Guid inheritedObjectGuid);
		
		System.Security.AccessControl.AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, System.Type targetType);
		
		System.Security.AccessControl.AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, System.Type targetType);
		
		byte[] GetSecurityDescriptorBinaryForm();
		
		System.Security.Principal.IdentityReference GetOwner(System.Type targetType);
		
		void SetOwner(System.Security.Principal.IdentityReference identity);
		
		System.Security.Principal.IdentityReference GetGroup(System.Type targetType);
		
		void SetGroup(System.Security.Principal.IdentityReference identity);
		
		void SetAccessRuleProtection(bool isProtected, bool preserveInheritance);
		
		void SetAuditRuleProtection(bool isProtected, bool preserveInheritance);
		
		string GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections includeSections);
		
		void SetSecurityDescriptorSddlForm(string sddlForm);
		
		void SetSecurityDescriptorSddlForm(string sddlForm, System.Security.AccessControl.AccessControlSections includeSections);
		
		void SetSecurityDescriptorBinaryForm(byte[] binaryForm);
		
		void SetSecurityDescriptorBinaryForm(byte[] binaryForm, System.Security.AccessControl.AccessControlSections includeSections);
	}
	
	// Interface for ActiveDirectoryAccessRuleWrapper
	public partial interface IActiveDirectoryAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectoryAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for ListChildrenAccessRuleWrapper
	public partial interface IListChildrenAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.ListChildrenAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for CreateChildAccessRuleWrapper
	public partial interface ICreateChildAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.CreateChildAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for DeleteChildAccessRuleWrapper
	public partial interface IDeleteChildAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.DeleteChildAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for PropertyAccessRuleWrapper
	public partial interface IPropertyAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.PropertyAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for PropertySetAccessRuleWrapper
	public partial interface IPropertySetAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.PropertySetAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for ExtendedRightAccessRuleWrapper
	public partial interface IExtendedRightAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.ExtendedRightAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for DeleteTreeAccessRuleWrapper
	public partial interface IDeleteTreeAccessRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AccessControlType AccessControlType
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.DeleteTreeAccessRule Wrapped
		{
			get;
		}
	}
	
	// Interface for ActiveDirectoryAuditRuleWrapper
	public partial interface IActiveDirectoryAuditRuleWrapper
	{
		
		System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get;
		}
		
		System.Guid ObjectType
		{
			get;
		}
		
		System.Guid InheritedObjectType
		{
			get;
		}
		
		System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get;
		}
		
		System.Security.AccessControl.AuditFlags AuditFlags
		{
			get;
		}
		
		System.Security.Principal.IdentityReference IdentityReference
		{
			get;
		}
		
		bool IsInherited
		{
			get;
		}
		
		System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get;
		}
		
		System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectoryAuditRule Wrapped
		{
			get;
		}
	}
	
	// Interface for DirectoryEntriesWrapper
	public partial interface IDirectoryEntriesWrapper
	{
		
		ISchemaNameCollectionWrapper SchemaFilter
		{
			get;
		}
		
		System.DirectoryServices.DirectoryEntries Wrapped
		{
			get;
		}
		
		IDirectoryEntryWrapper Add(string name, string schemaClassName);
		
		IDirectoryEntryWrapper Find(string name);
		
		IDirectoryEntryWrapper Find(string name, string schemaClassName);
		
		void Remove(IDirectoryEntryWrapper entry);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for DirectoryEntryWrapper
	public partial interface IDirectoryEntryWrapper : System.IDisposable
	{
		
		System.DirectoryServices.AuthenticationTypes AuthenticationType
		{
			get;
			set;
		}
		
		IDirectoryEntriesWrapper Children
		{
			get;
		}
		
		System.Guid Guid
		{
			get;
		}
		
		IActiveDirectorySecurityWrapper ObjectSecurity
		{
			get;
			set;
		}
		
		string Name
		{
			get;
		}
		
		string NativeGuid
		{
			get;
		}
		
		object NativeObject
		{
			get;
		}
		
		IDirectoryEntryWrapper Parent
		{
			get;
		}
		
		string Password
		{
			set;
		}
		
		string Path
		{
			get;
			set;
		}
		
		IPropertyCollectionWrapper Properties
		{
			get;
		}
		
		string SchemaClassName
		{
			get;
		}
		
		IDirectoryEntryWrapper SchemaEntry
		{
			get;
		}
		
		bool UsePropertyCache
		{
			get;
			set;
		}
		
		string Username
		{
			get;
			set;
		}
		
		IDirectoryEntryConfigurationWrapper Options
		{
			get;
		}
		
		System.ComponentModel.ISite Site
		{
			get;
			set;
		}
		
		System.ComponentModel.IContainer Container
		{
			get;
		}
		
		System.DirectoryServices.DirectoryEntry Wrapped
		{
			get;
		}
		
		void Close();
		
		void CommitChanges();
		
		IDirectoryEntryWrapper CopyTo(IDirectoryEntryWrapper newParent);
		
		IDirectoryEntryWrapper CopyTo(IDirectoryEntryWrapper newParent, string newName);
		
		void DeleteTree();
		
		object Invoke(string methodName, object[] args);
		
		object InvokeGet(string propertyName);
		
		void InvokeSet(string propertyName, object[] args);
		
		void MoveTo(IDirectoryEntryWrapper newParent);
		
		void MoveTo(IDirectoryEntryWrapper newParent, string newName);
		
		void RefreshCache();
		
		void RefreshCache(string[] propertyNames);
		
		void Rename(string newName);
		
		string ToString();
		
		object GetLifetimeService();
		
		object InitializeLifetimeService();
		
		System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
	}
	
	// Interface for DirectoryEntryConfigurationWrapper
	public partial interface IDirectoryEntryConfigurationWrapper
	{
		
		System.DirectoryServices.ReferralChasingOption Referral
		{
			get;
			set;
		}
		
		System.DirectoryServices.SecurityMasks SecurityMasks
		{
			get;
			set;
		}
		
		int PageSize
		{
			get;
			set;
		}
		
		int PasswordPort
		{
			get;
			set;
		}
		
		System.DirectoryServices.PasswordEncodingMethod PasswordEncoding
		{
			get;
			set;
		}
		
		System.DirectoryServices.DirectoryEntryConfiguration Wrapped
		{
			get;
		}
		
		string GetCurrentServerName();
		
		bool IsMutuallyAuthenticated();
		
		void SetUserNameQueryQuota(string accountName);
	}
	
	// Interface for DirectorySearcherWrapper
	public partial interface IDirectorySearcherWrapper : System.IDisposable
	{
		
		bool CacheResults
		{
			get;
			set;
		}
		
		System.TimeSpan ClientTimeout
		{
			get;
			set;
		}
		
		bool PropertyNamesOnly
		{
			get;
			set;
		}
		
		string Filter
		{
			get;
			set;
		}
		
		int PageSize
		{
			get;
			set;
		}
		
		System.Collections.Specialized.StringCollection PropertiesToLoad
		{
			get;
		}
		
		System.DirectoryServices.ReferralChasingOption ReferralChasing
		{
			get;
			set;
		}
		
		System.DirectoryServices.SearchScope SearchScope
		{
			get;
			set;
		}
		
		System.TimeSpan ServerPageTimeLimit
		{
			get;
			set;
		}
		
		System.TimeSpan ServerTimeLimit
		{
			get;
			set;
		}
		
		int SizeLimit
		{
			get;
			set;
		}
		
		IDirectoryEntryWrapper SearchRoot
		{
			get;
			set;
		}
		
		ISortOptionWrapper Sort
		{
			get;
			set;
		}
		
		bool Asynchronous
		{
			get;
			set;
		}
		
		bool Tombstone
		{
			get;
			set;
		}
		
		string AttributeScopeQuery
		{
			get;
			set;
		}
		
		System.DirectoryServices.DereferenceAlias DerefAlias
		{
			get;
			set;
		}
		
		System.DirectoryServices.SecurityMasks SecurityMasks
		{
			get;
			set;
		}
		
		System.DirectoryServices.ExtendedDN ExtendedDN
		{
			get;
			set;
		}
		
		IDirectorySynchronizationWrapper DirectorySynchronization
		{
			get;
			set;
		}
		
		IDirectoryVirtualListViewWrapper VirtualListView
		{
			get;
			set;
		}
		
		System.ComponentModel.ISite Site
		{
			get;
			set;
		}
		
		System.ComponentModel.IContainer Container
		{
			get;
		}
		
		System.DirectoryServices.DirectorySearcher Wrapped
		{
			get;
		}
		
		ISearchResultWrapper FindOne();
		
		ISearchResultCollectionWrapper FindAll();
		
		string ToString();
		
		object GetLifetimeService();
		
		object InitializeLifetimeService();
		
		System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
	}
	
	// Interface for DirectoryServicesPermissionWrapper
	public partial interface IDirectoryServicesPermissionWrapper
	{
		
		IDirectoryServicesPermissionEntryCollectionWrapper PermissionEntries
		{
			get;
		}
		
		System.DirectoryServices.DirectoryServicesPermission Wrapped
		{
			get;
		}
		
		System.Security.IPermission Copy();
		
		void FromXml(System.Security.SecurityElement securityElement);
		
		System.Security.IPermission Intersect(System.Security.IPermission target);
		
		bool IsSubsetOf(System.Security.IPermission target);
		
		bool IsUnrestricted();
		
		System.Security.SecurityElement ToXml();
		
		System.Security.IPermission Union(System.Security.IPermission target);
		
		void Demand();
		
		void Assert();
		
		void Deny();
		
		void PermitOnly();
		
		string ToString();
		
		bool Equals(object obj);
		
		int GetHashCode();
	}
	
	// Interface for DirectoryServicesPermissionEntryWrapper
	public partial interface IDirectoryServicesPermissionEntryWrapper
	{
		
		string Path
		{
			get;
		}
		
		System.DirectoryServices.DirectoryServicesPermissionAccess PermissionAccess
		{
			get;
		}
		
		System.DirectoryServices.DirectoryServicesPermissionEntry Wrapped
		{
			get;
		}
	}
	
	// Interface for DirectoryServicesPermissionEntryCollectionWrapper
	public partial interface IDirectoryServicesPermissionEntryCollectionWrapper
	{
		
		IDirectoryServicesPermissionEntryWrapper this[int index]
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.DirectoryServicesPermissionEntryCollection Wrapped
		{
			get;
		}
		
		int Add(IDirectoryServicesPermissionEntryWrapper value);
		
		void AddRange(IDirectoryServicesPermissionEntryWrapper[] value);
		
		void AddRange(IDirectoryServicesPermissionEntryCollectionWrapper value);
		
		bool Contains(IDirectoryServicesPermissionEntryWrapper value);
		
		void CopyTo(IDirectoryServicesPermissionEntryWrapper[] array, int index);
		
		int IndexOf(IDirectoryServicesPermissionEntryWrapper value);
		
		void Insert(int index, IDirectoryServicesPermissionEntryWrapper value);
		
		void Remove(IDirectoryServicesPermissionEntryWrapper value);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for DirectorySynchronizationWrapper
	public partial interface IDirectorySynchronizationWrapper
	{
		
		System.DirectoryServices.DirectorySynchronizationOptions Option
		{
			get;
			set;
		}
		
		System.DirectoryServices.DirectorySynchronization Wrapped
		{
			get;
		}
		
		byte[] GetDirectorySynchronizationCookie();
		
		void ResetDirectorySynchronizationCookie();
		
		void ResetDirectorySynchronizationCookie(byte[] cookie);
		
		IDirectorySynchronizationWrapper Copy();
	}
	
	// Interface for DirectoryVirtualListViewWrapper
	public partial interface IDirectoryVirtualListViewWrapper
	{
		
		int BeforeCount
		{
			get;
			set;
		}
		
		int AfterCount
		{
			get;
			set;
		}
		
		int Offset
		{
			get;
			set;
		}
		
		int TargetPercentage
		{
			get;
			set;
		}
		
		string Target
		{
			get;
			set;
		}
		
		int ApproximateTotal
		{
			get;
			set;
		}
		
		IDirectoryVirtualListViewContextWrapper DirectoryVirtualListViewContext
		{
			get;
			set;
		}
		
		System.DirectoryServices.DirectoryVirtualListView Wrapped
		{
			get;
		}
	}
	
	// Interface for DirectoryVirtualListViewContextWrapper
	public partial interface IDirectoryVirtualListViewContextWrapper
	{
		
		System.DirectoryServices.DirectoryVirtualListViewContext Wrapped
		{
			get;
		}
		
		IDirectoryVirtualListViewContextWrapper Copy();
	}
	
	// Interface for PropertyCollectionWrapper
	public partial interface IPropertyCollectionWrapper
	{
		
		IPropertyValueCollectionWrapper this[string propertyName]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.Collections.ICollection PropertyNames
		{
			get;
		}
		
		System.Collections.ICollection Values
		{
			get;
		}
		
		System.DirectoryServices.PropertyCollection Wrapped
		{
			get;
		}
		
		bool Contains(string propertyName);
		
		void CopyTo(IPropertyValueCollectionWrapper[] array, int index);
		
		System.Collections.IDictionaryEnumerator GetEnumerator();
	}
	
	// Interface for PropertyValueCollectionWrapper
	public partial interface IPropertyValueCollectionWrapper
	{
		
		object this[int index]
		{
			get;
			set;
		}
		
		string PropertyName
		{
			get;
		}
		
		object Value
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.PropertyValueCollection Wrapped
		{
			get;
		}
		
		int Add(object value);
		
		void AddRange(object[] value);
		
		void AddRange(IPropertyValueCollectionWrapper value);
		
		bool Contains(object value);
		
		void CopyTo(object[] array, int index);
		
		int IndexOf(object value);
		
		void Insert(int index, object value);
		
		void Remove(object value);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ResultPropertyCollectionWrapper
	public partial interface IResultPropertyCollectionWrapper
	{
		
		IResultPropertyValueCollectionWrapper this[string name]
		{
			get;
		}
		
		System.Collections.ICollection PropertyNames
		{
			get;
		}
		
		System.Collections.ICollection Values
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ResultPropertyCollection Wrapped
		{
			get;
		}
		
		bool Contains(string propertyName);
		
		void CopyTo(IResultPropertyValueCollectionWrapper[] array, int index);
		
		void CopyTo(System.Array array, int index);
		
		void Clear();
		
		System.Collections.IDictionaryEnumerator GetEnumerator();
	}
	
	// Interface for ResultPropertyValueCollectionWrapper
	public partial interface IResultPropertyValueCollectionWrapper
	{
		
		object this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ResultPropertyValueCollection Wrapped
		{
			get;
		}
		
		bool Contains(object value);
		
		int IndexOf(object value);
		
		void CopyTo(object[] values, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for SchemaNameCollectionWrapper
	public partial interface ISchemaNameCollectionWrapper
	{
		
		string this[int index]
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.SchemaNameCollection Wrapped
		{
			get;
		}
		
		int Add(string value);
		
		void AddRange(string[] value);
		
		void AddRange(ISchemaNameCollectionWrapper value);
		
		void Clear();
		
		bool Contains(string value);
		
		void CopyTo(string[] stringArray, int index);
		
		System.Collections.IEnumerator GetEnumerator();
		
		int IndexOf(string value);
		
		void Insert(int index, string value);
		
		void Remove(string value);
		
		void RemoveAt(int index);
	}
	
	// Interface for SearchResultWrapper
	public partial interface ISearchResultWrapper
	{
		
		string Path
		{
			get;
		}
		
		IResultPropertyCollectionWrapper Properties
		{
			get;
		}
		
		System.DirectoryServices.SearchResult Wrapped
		{
			get;
		}
		
		IDirectoryEntryWrapper GetDirectoryEntry();
	}
	
	// Interface for SearchResultCollectionWrapper
	public partial interface ISearchResultCollectionWrapper : System.IDisposable
	{
		
		ISearchResultWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.IntPtr Handle
		{
			get;
		}
		
		string[] PropertiesLoaded
		{
			get;
		}
		
		System.DirectoryServices.SearchResultCollection Wrapped
		{
			get;
		}
		
		System.Collections.IEnumerator GetEnumerator();
		
		bool Contains(ISearchResultWrapper result);
		
		void CopyTo(ISearchResultWrapper[] results, int index);
		
		int IndexOf(ISearchResultWrapper result);
		
		object GetLifetimeService();
		
		object InitializeLifetimeService();
		
		System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
	}
	
	// Interface for SortOptionWrapper
	public partial interface ISortOptionWrapper
	{
		
		string PropertyName
		{
			get;
			set;
		}
		
		System.DirectoryServices.SortDirection Direction
		{
			get;
			set;
		}
		
		System.DirectoryServices.SortOption Wrapped
		{
			get;
		}
	}
	
	// Interface for DirectoryServicesCOMExceptionWrapper
	public partial interface IDirectoryServicesCOMExceptionWrapper
	{
		
		int ExtendedError
		{
			get;
		}
		
		string ExtendedErrorMessage
		{
			get;
		}
		
		int ErrorCode
		{
			get;
		}
		
		string Message
		{
			get;
		}
		
		System.Collections.IDictionary Data
		{
			get;
		}
		
		System.Exception InnerException
		{
			get;
		}
		
		System.Reflection.MethodBase TargetSite
		{
			get;
		}
		
		string StackTrace
		{
			get;
		}
		
		string HelpLink
		{
			get;
			set;
		}
		
		string Source
		{
			get;
			set;
		}
		
		int HResult
		{
			get;
		}
		
		System.DirectoryServices.DirectoryServicesCOMException Wrapped
		{
			get;
		}
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
		
		string ToString();
		
		System.Exception GetBaseException();
		
		System.Type GetType();
	}
	
	// Interface for ActiveDirectoryReplicationMetadataWrapper
	public partial interface IActiveDirectoryReplicationMetadataWrapper
	{
		
		IAttributeMetadataWrapper this[string name]
		{
			get;
		}
		
		IReadOnlyStringCollectionWrapper AttributeNames
		{
			get;
		}
		
		IAttributeMetadataCollectionWrapper Values
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata Wrapped
		{
			get;
		}
		
		bool Contains(string attributeName);
		
		void CopyTo(IAttributeMetadataWrapper[] array, int index);
		
		void CopyTo(System.Array array, int index);
		
		void Clear();
		
		System.Collections.IDictionaryEnumerator GetEnumerator();
	}
	
	// Interface for ActiveDirectoryScheduleWrapper
	public partial interface IActiveDirectoryScheduleWrapper
	{
		
		bool[,,] RawSchedule
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule Wrapped
		{
			get;
		}
		
		void SetSchedule(System.DayOfWeek day, System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute);
		
		void SetSchedule(System.DayOfWeek[] days, System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute);
		
		void SetDailySchedule(System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute);
		
		void ResetSchedule();
	}
	
	// Interface for ActiveDirectorySchemaWrapper
	public partial interface IActiveDirectorySchemaWrapper : System.IDisposable
	{
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer SchemaRoleOwner
		{
			get;
		}
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema Wrapped
		{
			get;
		}
		
		void RefreshSchema();
		
		IActiveDirectorySchemaClassWrapper FindClass(string ldapDisplayName);
		
		IActiveDirectorySchemaClassWrapper FindDefunctClass(string commonName);
		
		IReadOnlyActiveDirectorySchemaClassCollectionWrapper FindAllClasses();
		
		IReadOnlyActiveDirectorySchemaClassCollectionWrapper FindAllClasses(System.DirectoryServices.ActiveDirectory.SchemaClassType type);
		
		IReadOnlyActiveDirectorySchemaClassCollectionWrapper FindAllDefunctClasses();
		
		IActiveDirectorySchemaPropertyWrapper FindProperty(string ldapDisplayName);
		
		IActiveDirectorySchemaPropertyWrapper FindDefunctProperty(string commonName);
		
		IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper FindAllProperties();
		
		IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper FindAllProperties(System.DirectoryServices.ActiveDirectory.PropertyTypes type);
		
		IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper FindAllDefunctProperties();
		
		IDirectoryEntryWrapper GetDirectoryEntry();
		
		string ToString();
	}
	
	// Interface for ActiveDirectorySchemaClassWrapper
	public partial interface IActiveDirectorySchemaClassWrapper : System.IDisposable
	{
		
		string Name
		{
			get;
		}
		
		string CommonName
		{
			get;
			set;
		}
		
		string Oid
		{
			get;
			set;
		}
		
		string Description
		{
			get;
			set;
		}
		
		bool IsDefunct
		{
			get;
			set;
		}
		
		IActiveDirectorySchemaClassCollectionWrapper PossibleSuperiors
		{
			get;
		}
		
		IReadOnlyActiveDirectorySchemaClassCollectionWrapper PossibleInferiors
		{
			get;
		}
		
		IActiveDirectorySchemaPropertyCollectionWrapper MandatoryProperties
		{
			get;
		}
		
		IActiveDirectorySchemaPropertyCollectionWrapper OptionalProperties
		{
			get;
		}
		
		IActiveDirectorySchemaClassCollectionWrapper AuxiliaryClasses
		{
			get;
		}
		
		IActiveDirectorySchemaClassWrapper SubClassOf
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.SchemaClassType Type
		{
			get;
			set;
		}
		
		System.Guid SchemaGuid
		{
			get;
			set;
		}
		
		IActiveDirectorySecurityWrapper DefaultObjectSecurityDescriptor
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass Wrapped
		{
			get;
		}
		
		IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper GetAllProperties();
		
		void Save();
		
		string ToString();
		
		IDirectoryEntryWrapper GetDirectoryEntry();
	}
	
	// Interface for ActiveDirectorySchemaClassCollectionWrapper
	public partial interface IActiveDirectorySchemaClassCollectionWrapper
	{
		
		IActiveDirectorySchemaClassWrapper this[int index]
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection Wrapped
		{
			get;
		}
		
		int Add(IActiveDirectorySchemaClassWrapper schemaClass);
		
		void AddRange(IActiveDirectorySchemaClassWrapper[] schemaClasses);
		
		void AddRange(IActiveDirectorySchemaClassCollectionWrapper schemaClasses);
		
		void AddRange(IReadOnlyActiveDirectorySchemaClassCollectionWrapper schemaClasses);
		
		void Remove(IActiveDirectorySchemaClassWrapper schemaClass);
		
		void Insert(int index, IActiveDirectorySchemaClassWrapper schemaClass);
		
		bool Contains(IActiveDirectorySchemaClassWrapper schemaClass);
		
		void CopyTo(IActiveDirectorySchemaClassWrapper[] schemaClasses, int index);
		
		int IndexOf(IActiveDirectorySchemaClassWrapper schemaClass);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ActiveDirectorySchemaPropertyWrapper
	public partial interface IActiveDirectorySchemaPropertyWrapper : System.IDisposable
	{
		
		string Name
		{
			get;
		}
		
		string CommonName
		{
			get;
			set;
		}
		
		string Oid
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax Syntax
		{
			get;
			set;
		}
		
		string Description
		{
			get;
			set;
		}
		
		bool IsSingleValued
		{
			get;
			set;
		}
		
		bool IsIndexed
		{
			get;
			set;
		}
		
		bool IsIndexedOverContainer
		{
			get;
			set;
		}
		
		bool IsInAnr
		{
			get;
			set;
		}
		
		bool IsOnTombstonedObject
		{
			get;
			set;
		}
		
		bool IsTupleIndexed
		{
			get;
			set;
		}
		
		bool IsInGlobalCatalog
		{
			get;
			set;
		}
		
		System.Int32? RangeLower
		{
			get;
			set;
		}
		
		System.Int32? RangeUpper
		{
			get;
			set;
		}
		
		bool IsDefunct
		{
			get;
			set;
		}
		
		IActiveDirectorySchemaPropertyWrapper Link
		{
			get;
		}
		
		System.Int32? LinkId
		{
			get;
			set;
		}
		
		System.Guid SchemaGuid
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty Wrapped
		{
			get;
		}
		
		void Save();
		
		string ToString();
		
		IDirectoryEntryWrapper GetDirectoryEntry();
	}
	
	// Interface for ActiveDirectorySchemaPropertyCollectionWrapper
	public partial interface IActiveDirectorySchemaPropertyCollectionWrapper
	{
		
		IActiveDirectorySchemaPropertyWrapper this[int index]
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection Wrapped
		{
			get;
		}
		
		int Add(IActiveDirectorySchemaPropertyWrapper schemaProperty);
		
		void AddRange(IActiveDirectorySchemaPropertyWrapper[] properties);
		
		void AddRange(IActiveDirectorySchemaPropertyCollectionWrapper properties);
		
		void AddRange(IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper properties);
		
		void Remove(IActiveDirectorySchemaPropertyWrapper schemaProperty);
		
		void Insert(int index, IActiveDirectorySchemaPropertyWrapper schemaProperty);
		
		bool Contains(IActiveDirectorySchemaPropertyWrapper schemaProperty);
		
		void CopyTo(IActiveDirectorySchemaPropertyWrapper[] properties, int index);
		
		int IndexOf(IActiveDirectorySchemaPropertyWrapper schemaProperty);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ActiveDirectorySiteWrapper
	public partial interface IActiveDirectorySiteWrapper : System.IDisposable
	{
		
		string Name
		{
			get;
		}
		
		IDomainCollectionWrapper Domains
		{
			get;
		}
		
		IActiveDirectorySubnetCollectionWrapper Subnets
		{
			get;
		}
		
		IReadOnlyDirectoryServerCollectionWrapper Servers
		{
			get;
		}
		
		IReadOnlySiteCollectionWrapper AdjacentSites
		{
			get;
		}
		
		IReadOnlySiteLinkCollectionWrapper SiteLinks
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer InterSiteTopologyGenerator
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteOptions Options
		{
			get;
			set;
		}
		
		string Location
		{
			get;
			set;
		}
		
		IReadOnlyDirectoryServerCollectionWrapper BridgeheadServers
		{
			get;
		}
		
		IDirectoryServerCollectionWrapper PreferredSmtpBridgeheadServers
		{
			get;
		}
		
		IDirectoryServerCollectionWrapper PreferredRpcBridgeheadServers
		{
			get;
		}
		
		IActiveDirectoryScheduleWrapper IntraSiteReplicationSchedule
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySite Wrapped
		{
			get;
		}
		
		void Save();
		
		void Delete();
		
		string ToString();
		
		IDirectoryEntryWrapper GetDirectoryEntry();
	}
	
	// Interface for ActiveDirectorySiteCollectionWrapper
	public partial interface IActiveDirectorySiteCollectionWrapper
	{
		
		IActiveDirectorySiteWrapper this[int index]
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection Wrapped
		{
			get;
		}
		
		int Add(IActiveDirectorySiteWrapper site);
		
		void AddRange(IActiveDirectorySiteWrapper[] sites);
		
		void AddRange(IActiveDirectorySiteCollectionWrapper sites);
		
		bool Contains(IActiveDirectorySiteWrapper site);
		
		void CopyTo(IActiveDirectorySiteWrapper[] array, int index);
		
		int IndexOf(IActiveDirectorySiteWrapper site);
		
		void Insert(int index, IActiveDirectorySiteWrapper site);
		
		void Remove(IActiveDirectorySiteWrapper site);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ActiveDirectorySiteLinkWrapper
	public partial interface IActiveDirectorySiteLinkWrapper : System.IDisposable
	{
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get;
		}
		
		IActiveDirectorySiteCollectionWrapper Sites
		{
			get;
		}
		
		int Cost
		{
			get;
			set;
		}
		
		System.TimeSpan ReplicationInterval
		{
			get;
			set;
		}
		
		bool ReciprocalReplicationEnabled
		{
			get;
			set;
		}
		
		bool NotificationEnabled
		{
			get;
			set;
		}
		
		bool DataCompressionEnabled
		{
			get;
			set;
		}
		
		IActiveDirectoryScheduleWrapper InterSiteReplicationSchedule
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink Wrapped
		{
			get;
		}
		
		void Save();
		
		void Delete();
		
		string ToString();
		
		IDirectoryEntryWrapper GetDirectoryEntry();
	}
	
	// Interface for ActiveDirectorySiteLinkBridgeWrapper
	public partial interface IActiveDirectorySiteLinkBridgeWrapper : System.IDisposable
	{
		
		string Name
		{
			get;
		}
		
		IActiveDirectorySiteLinkCollectionWrapper SiteLinks
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge Wrapped
		{
			get;
		}
		
		void Save();
		
		void Delete();
		
		string ToString();
		
		IDirectoryEntryWrapper GetDirectoryEntry();
	}
	
	// Interface for ActiveDirectorySiteLinkCollectionWrapper
	public partial interface IActiveDirectorySiteLinkCollectionWrapper
	{
		
		IActiveDirectorySiteLinkWrapper this[int index]
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection Wrapped
		{
			get;
		}
		
		int Add(IActiveDirectorySiteLinkWrapper link);
		
		void AddRange(IActiveDirectorySiteLinkWrapper[] links);
		
		void AddRange(IActiveDirectorySiteLinkCollectionWrapper links);
		
		bool Contains(IActiveDirectorySiteLinkWrapper link);
		
		void CopyTo(IActiveDirectorySiteLinkWrapper[] array, int index);
		
		int IndexOf(IActiveDirectorySiteLinkWrapper link);
		
		void Insert(int index, IActiveDirectorySiteLinkWrapper link);
		
		void Remove(IActiveDirectorySiteLinkWrapper link);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ActiveDirectorySubnetWrapper
	public partial interface IActiveDirectorySubnetWrapper : System.IDisposable
	{
		
		string Name
		{
			get;
		}
		
		IActiveDirectorySiteWrapper Site
		{
			get;
			set;
		}
		
		string Location
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet Wrapped
		{
			get;
		}
		
		void Save();
		
		void Delete();
		
		string ToString();
		
		IDirectoryEntryWrapper GetDirectoryEntry();
	}
	
	// Interface for ActiveDirectorySubnetCollectionWrapper
	public partial interface IActiveDirectorySubnetCollectionWrapper
	{
		
		IActiveDirectorySubnetWrapper this[int index]
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection Wrapped
		{
			get;
		}
		
		int Add(IActiveDirectorySubnetWrapper subnet);
		
		void AddRange(IActiveDirectorySubnetWrapper[] subnets);
		
		void AddRange(IActiveDirectorySubnetCollectionWrapper subnets);
		
		bool Contains(IActiveDirectorySubnetWrapper subnet);
		
		void CopyTo(IActiveDirectorySubnetWrapper[] array, int index);
		
		int IndexOf(IActiveDirectorySubnetWrapper subnet);
		
		void Insert(int index, IActiveDirectorySubnetWrapper subnet);
		
		void Remove(IActiveDirectorySubnetWrapper subnet);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for AdamInstanceWrapper
	public partial interface IAdamInstanceWrapper : System.IDisposable
	{
		
		IConfigurationSetWrapper ConfigurationSet
		{
			get;
		}
		
		string HostName
		{
			get;
		}
		
		int LdapPort
		{
			get;
		}
		
		int SslPort
		{
			get;
		}
		
		IAdamRoleCollectionWrapper Roles
		{
			get;
		}
		
		string DefaultPartition
		{
			get;
			set;
		}
		
		string IPAddress
		{
			get;
		}
		
		string SiteName
		{
			get;
		}
		
		ISyncUpdateCallbackWrapper SyncFromAllServersCallback
		{
			get;
			set;
		}
		
		IReplicationConnectionCollectionWrapper InboundConnections
		{
			get;
		}
		
		IReplicationConnectionCollectionWrapper OutboundConnections
		{
			get;
		}
		
		string Name
		{
			get;
		}
		
		IReadOnlyStringCollectionWrapper Partitions
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AdamInstance Wrapped
		{
			get;
		}
		
		void TransferRoleOwnership(System.DirectoryServices.ActiveDirectory.AdamRole role);
		
		void SeizeRoleOwnership(System.DirectoryServices.ActiveDirectory.AdamRole role);
		
		void CheckReplicationConsistency();
		
		IReplicationCursorCollectionWrapper GetReplicationCursors(string partition);
		
		IReplicationOperationInformationWrapper GetReplicationOperationInformation();
		
		IReplicationNeighborCollectionWrapper GetReplicationNeighbors(string partition);
		
		IReplicationNeighborCollectionWrapper GetAllReplicationNeighbors();
		
		IReplicationFailureCollectionWrapper GetReplicationConnectionFailures();
		
		IActiveDirectoryReplicationMetadataWrapper GetReplicationMetadata(string objectPath);
		
		void SyncReplicaFromServer(string partition, string sourceServer);
		
		void TriggerSyncReplicaFromNeighbors(string partition);
		
		void SyncReplicaFromAllServers(string partition, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions options);
		
		void Save();
		
		string ToString();
		
		void MoveToAnotherSite(string siteName);
		
		IDirectoryEntryWrapper GetDirectoryEntry();
	}
	
	// Interface for AdamInstanceCollectionWrapper
	public partial interface IAdamInstanceCollectionWrapper
	{
		
		IAdamInstanceWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AdamInstanceCollection Wrapped
		{
			get;
		}
		
		bool Contains(IAdamInstanceWrapper adamInstance);
		
		int IndexOf(IAdamInstanceWrapper adamInstance);
		
		void CopyTo(IAdamInstanceWrapper[] adamInstances, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ApplicationPartitionWrapper
	public partial interface IApplicationPartitionWrapper : System.IDisposable
	{
		
		IDirectoryServerCollectionWrapper DirectoryServers
		{
			get;
		}
		
		string SecurityReferenceDomain
		{
			get;
			set;
		}
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ApplicationPartition Wrapped
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer();
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer(string siteName);
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer(bool forceRediscovery);
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer(string siteName, bool forceRediscovery);
		
		IReadOnlyDirectoryServerCollectionWrapper FindAllDirectoryServers();
		
		IReadOnlyDirectoryServerCollectionWrapper FindAllDirectoryServers(string siteName);
		
		IReadOnlyDirectoryServerCollectionWrapper FindAllDiscoverableDirectoryServers();
		
		IReadOnlyDirectoryServerCollectionWrapper FindAllDiscoverableDirectoryServers(string siteName);
		
		void Delete();
		
		void Save();
		
		IDirectoryEntryWrapper GetDirectoryEntry();
		
		string ToString();
	}
	
	// Interface for ApplicationPartitionCollectionWrapper
	public partial interface IApplicationPartitionCollectionWrapper
	{
		
		IApplicationPartitionWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection Wrapped
		{
			get;
		}
		
		bool Contains(IApplicationPartitionWrapper applicationPartition);
		
		int IndexOf(IApplicationPartitionWrapper applicationPartition);
		
		void CopyTo(IApplicationPartitionWrapper[] applicationPartitions, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for AttributeMetadataWrapper
	public partial interface IAttributeMetadataWrapper
	{
		
		string Name
		{
			get;
		}
		
		int Version
		{
			get;
		}
		
		System.DateTime LastOriginatingChangeTime
		{
			get;
		}
		
		System.Guid LastOriginatingInvocationId
		{
			get;
		}
		
		long OriginatingChangeUsn
		{
			get;
		}
		
		long LocalChangeUsn
		{
			get;
		}
		
		string OriginatingServer
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AttributeMetadata Wrapped
		{
			get;
		}
	}
	
	// Interface for AttributeMetadataCollectionWrapper
	public partial interface IAttributeMetadataCollectionWrapper
	{
		
		IAttributeMetadataWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection Wrapped
		{
			get;
		}
		
		bool Contains(IAttributeMetadataWrapper metadata);
		
		int IndexOf(IAttributeMetadataWrapper metadata);
		
		void CopyTo(IAttributeMetadataWrapper[] metadata, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ConfigurationSetWrapper
	public partial interface IConfigurationSetWrapper
	{
		
		string Name
		{
			get;
		}
		
		IReadOnlySiteCollectionWrapper Sites
		{
			get;
		}
		
		IAdamInstanceCollectionWrapper AdamInstances
		{
			get;
		}
		
		IApplicationPartitionCollectionWrapper ApplicationPartitions
		{
			get;
		}
		
		IActiveDirectorySchemaWrapper Schema
		{
			get;
		}
		
		IAdamInstanceWrapper SchemaRoleOwner
		{
			get;
		}
		
		IAdamInstanceWrapper NamingRoleOwner
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ConfigurationSet Wrapped
		{
			get;
		}
		
		IAdamInstanceWrapper FindAdamInstance();
		
		IAdamInstanceWrapper FindAdamInstance(string partitionName);
		
		IAdamInstanceWrapper FindAdamInstance(string partitionName, string siteName);
		
		IAdamInstanceCollectionWrapper FindAllAdamInstances();
		
		IAdamInstanceCollectionWrapper FindAllAdamInstances(string partitionName);
		
		IAdamInstanceCollectionWrapper FindAllAdamInstances(string partitionName, string siteName);
		
		IDirectoryEntryWrapper GetDirectoryEntry();
		
		System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel GetSecurityLevel();
		
		void SetSecurityLevel(System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel securityLevel);
		
		string ToString();
	}
	
	// Interface for DirectoryContextWrapper
	public partial interface IDirectoryContextWrapper
	{
		
		string Name
		{
			get;
		}
		
		string UserName
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DirectoryContextType ContextType
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DirectoryContext Wrapped
		{
			get;
		}
	}
	
	// Interface for DirectoryServerCollectionWrapper
	public partial interface IDirectoryServerCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer this[int index]
		{
			get;
			set;
		}
		
		int Capacity
		{
			get;
			set;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DirectoryServerCollection Wrapped
		{
			get;
		}
		
		int Add(System.DirectoryServices.ActiveDirectory.DirectoryServer server);
		
		void AddRange(System.DirectoryServices.ActiveDirectory.DirectoryServer[] servers);
		
		bool Contains(System.DirectoryServices.ActiveDirectory.DirectoryServer server);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.DirectoryServer[] array, int index);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.DirectoryServer server);
		
		void Insert(int index, System.DirectoryServices.ActiveDirectory.DirectoryServer server);
		
		void Remove(System.DirectoryServices.ActiveDirectory.DirectoryServer server);
		
		void Clear();
		
		void RemoveAt(int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for DomainWrapper
	public partial interface IDomainWrapper : System.IDisposable
	{
		
		IForestWrapper Forest
		{
			get;
		}
		
		IDomainControllerCollectionWrapper DomainControllers
		{
			get;
		}
		
		IDomainCollectionWrapper Children
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainMode DomainMode
		{
			get;
		}
		
		int DomainModeLevel
		{
			get;
		}
		
		IDomainWrapper Parent
		{
			get;
		}
		
		IDomainControllerWrapper PdcRoleOwner
		{
			get;
		}
		
		IDomainControllerWrapper RidRoleOwner
		{
			get;
		}
		
		IDomainControllerWrapper InfrastructureRoleOwner
		{
			get;
		}
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.Domain Wrapped
		{
			get;
		}
		
		void RaiseDomainFunctionalityLevel(int domainMode);
		
		void RaiseDomainFunctionality(System.DirectoryServices.ActiveDirectory.DomainMode domainMode);
		
		IDomainControllerWrapper FindDomainController();
		
		IDomainControllerWrapper FindDomainController(string siteName);
		
		IDomainControllerWrapper FindDomainController(System.DirectoryServices.ActiveDirectory.LocatorOptions flag);
		
		IDomainControllerWrapper FindDomainController(string siteName, System.DirectoryServices.ActiveDirectory.LocatorOptions flag);
		
		IDomainControllerCollectionWrapper FindAllDomainControllers();
		
		IDomainControllerCollectionWrapper FindAllDomainControllers(string siteName);
		
		IDomainControllerCollectionWrapper FindAllDiscoverableDomainControllers();
		
		IDomainControllerCollectionWrapper FindAllDiscoverableDomainControllers(string siteName);
		
		IDirectoryEntryWrapper GetDirectoryEntry();
		
		ITrustRelationshipInformationCollectionWrapper GetAllTrustRelationships();
		
		ITrustRelationshipInformationWrapper GetTrustRelationship(string targetDomainName);
		
		bool GetSelectiveAuthenticationStatus(string targetDomainName);
		
		void SetSelectiveAuthenticationStatus(string targetDomainName, bool enable);
		
		bool GetSidFilteringStatus(string targetDomainName);
		
		void SetSidFilteringStatus(string targetDomainName, bool enable);
		
		void DeleteLocalSideOfTrustRelationship(string targetDomainName);
		
		void DeleteTrustRelationship(IDomainWrapper targetDomain);
		
		void VerifyOutboundTrustRelationship(string targetDomainName);
		
		void VerifyTrustRelationship(IDomainWrapper targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection direction);
		
		void CreateLocalSideOfTrustRelationship(string targetDomainName, System.DirectoryServices.ActiveDirectory.TrustDirection direction, string trustPassword);
		
		void CreateTrustRelationship(IDomainWrapper targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection direction);
		
		void UpdateLocalSideOfTrustRelationship(string targetDomainName, string newTrustPassword);
		
		void UpdateLocalSideOfTrustRelationship(string targetDomainName, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection, string newTrustPassword);
		
		void UpdateTrustRelationship(IDomainWrapper targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection);
		
		void RepairTrustRelationship(IDomainWrapper targetDomain);
		
		string ToString();
	}
	
	// Interface for DomainCollectionWrapper
	public partial interface IDomainCollectionWrapper
	{
		
		IDomainWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainCollection Wrapped
		{
			get;
		}
		
		bool Contains(IDomainWrapper domain);
		
		int IndexOf(IDomainWrapper domain);
		
		void CopyTo(IDomainWrapper[] domains, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for SyncUpdateCallbackWrapper
	public partial interface ISyncUpdateCallbackWrapper
	{
		
		System.Reflection.MethodInfo Method
		{
			get;
		}
		
		object Target
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.SyncUpdateCallback Wrapped
		{
			get;
		}
		
		bool Invoke(System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent eventType, string targetServer, string sourceServer, ISyncFromAllServersOperationExceptionWrapper exception);
		
		System.IAsyncResult BeginInvoke(System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent eventType, string targetServer, string sourceServer, ISyncFromAllServersOperationExceptionWrapper exception, System.AsyncCallback callback, object @object);
		
		bool EndInvoke(System.IAsyncResult result);
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		
		bool Equals(object obj);
		
		System.Delegate[] GetInvocationList();
		
		int GetHashCode();
		
		object DynamicInvoke(object[] args);
		
		object Clone();
	}
	
	// Interface for DomainControllerWrapper
	public partial interface IDomainControllerWrapper : System.IDisposable
	{
		
		IForestWrapper Forest
		{
			get;
		}
		
		System.DateTime CurrentTime
		{
			get;
		}
		
		long HighestCommittedUsn
		{
			get;
		}
		
		string OSVersion
		{
			get;
		}
		
		IActiveDirectoryRoleCollectionWrapper Roles
		{
			get;
		}
		
		IDomainWrapper Domain
		{
			get;
		}
		
		string IPAddress
		{
			get;
		}
		
		string SiteName
		{
			get;
		}
		
		ISyncUpdateCallbackWrapper SyncFromAllServersCallback
		{
			get;
			set;
		}
		
		IReplicationConnectionCollectionWrapper InboundConnections
		{
			get;
		}
		
		IReplicationConnectionCollectionWrapper OutboundConnections
		{
			get;
		}
		
		string Name
		{
			get;
		}
		
		IReadOnlyStringCollectionWrapper Partitions
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainController Wrapped
		{
			get;
		}
		
		IGlobalCatalogWrapper EnableGlobalCatalog();
		
		bool IsGlobalCatalog();
		
		void TransferRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role);
		
		void SeizeRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role);
		
		IDirectorySearcherWrapper GetDirectorySearcher();
		
		void CheckReplicationConsistency();
		
		IReplicationCursorCollectionWrapper GetReplicationCursors(string partition);
		
		IReplicationOperationInformationWrapper GetReplicationOperationInformation();
		
		IReplicationNeighborCollectionWrapper GetReplicationNeighbors(string partition);
		
		IReplicationNeighborCollectionWrapper GetAllReplicationNeighbors();
		
		IReplicationFailureCollectionWrapper GetReplicationConnectionFailures();
		
		IActiveDirectoryReplicationMetadataWrapper GetReplicationMetadata(string objectPath);
		
		void SyncReplicaFromServer(string partition, string sourceServer);
		
		void TriggerSyncReplicaFromNeighbors(string partition);
		
		void SyncReplicaFromAllServers(string partition, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions options);
		
		string ToString();
		
		void MoveToAnotherSite(string siteName);
		
		IDirectoryEntryWrapper GetDirectoryEntry();
	}
	
	// Interface for DomainControllerCollectionWrapper
	public partial interface IDomainControllerCollectionWrapper
	{
		
		IDomainControllerWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainControllerCollection Wrapped
		{
			get;
		}
		
		bool Contains(IDomainControllerWrapper domainController);
		
		int IndexOf(IDomainControllerWrapper domainController);
		
		void CopyTo(IDomainControllerWrapper[] domainControllers, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for SyncFromAllServersErrorInformationWrapper
	public partial interface ISyncFromAllServersErrorInformationWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorCategory ErrorCategory
		{
			get;
		}
		
		int ErrorCode
		{
			get;
		}
		
		string ErrorMessage
		{
			get;
		}
		
		string TargetServer
		{
			get;
		}
		
		string SourceServer
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation Wrapped
		{
			get;
		}
	}
	
	// Interface for ActiveDirectoryObjectNotFoundExceptionWrapper
	public partial interface IActiveDirectoryObjectNotFoundExceptionWrapper
	{
		
		System.Type Type
		{
			get;
		}
		
		string Name
		{
			get;
		}
		
		string Message
		{
			get;
		}
		
		System.Collections.IDictionary Data
		{
			get;
		}
		
		System.Exception InnerException
		{
			get;
		}
		
		System.Reflection.MethodBase TargetSite
		{
			get;
		}
		
		string StackTrace
		{
			get;
		}
		
		string HelpLink
		{
			get;
			set;
		}
		
		string Source
		{
			get;
			set;
		}
		
		int HResult
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException Wrapped
		{
			get;
		}
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
		
		System.Exception GetBaseException();
		
		string ToString();
		
		System.Type GetType();
	}
	
	// Interface for ActiveDirectoryOperationExceptionWrapper
	public partial interface IActiveDirectoryOperationExceptionWrapper
	{
		
		int ErrorCode
		{
			get;
		}
		
		string Message
		{
			get;
		}
		
		System.Collections.IDictionary Data
		{
			get;
		}
		
		System.Exception InnerException
		{
			get;
		}
		
		System.Reflection.MethodBase TargetSite
		{
			get;
		}
		
		string StackTrace
		{
			get;
		}
		
		string HelpLink
		{
			get;
			set;
		}
		
		string Source
		{
			get;
			set;
		}
		
		int HResult
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException Wrapped
		{
			get;
		}
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
		
		System.Exception GetBaseException();
		
		string ToString();
		
		System.Type GetType();
	}
	
	// Interface for ActiveDirectoryServerDownExceptionWrapper
	public partial interface IActiveDirectoryServerDownExceptionWrapper
	{
		
		int ErrorCode
		{
			get;
		}
		
		string Name
		{
			get;
		}
		
		string Message
		{
			get;
		}
		
		System.Collections.IDictionary Data
		{
			get;
		}
		
		System.Exception InnerException
		{
			get;
		}
		
		System.Reflection.MethodBase TargetSite
		{
			get;
		}
		
		string StackTrace
		{
			get;
		}
		
		string HelpLink
		{
			get;
			set;
		}
		
		string Source
		{
			get;
			set;
		}
		
		int HResult
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException Wrapped
		{
			get;
		}
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
		
		System.Exception GetBaseException();
		
		string ToString();
		
		System.Type GetType();
	}
	
	// Interface for ActiveDirectoryObjectExistsExceptionWrapper
	public partial interface IActiveDirectoryObjectExistsExceptionWrapper
	{
		
		string Message
		{
			get;
		}
		
		System.Collections.IDictionary Data
		{
			get;
		}
		
		System.Exception InnerException
		{
			get;
		}
		
		System.Reflection.MethodBase TargetSite
		{
			get;
		}
		
		string StackTrace
		{
			get;
		}
		
		string HelpLink
		{
			get;
			set;
		}
		
		string Source
		{
			get;
			set;
		}
		
		int HResult
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException Wrapped
		{
			get;
		}
		
		System.Exception GetBaseException();
		
		string ToString();
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		
		System.Type GetType();
	}
	
	// Interface for SyncFromAllServersOperationExceptionWrapper
	public partial interface ISyncFromAllServersOperationExceptionWrapper
	{
		
		ISyncFromAllServersErrorInformationWrapper[] ErrorInformation
		{
			get;
		}
		
		int ErrorCode
		{
			get;
		}
		
		string Message
		{
			get;
		}
		
		System.Collections.IDictionary Data
		{
			get;
		}
		
		System.Exception InnerException
		{
			get;
		}
		
		System.Reflection.MethodBase TargetSite
		{
			get;
		}
		
		string StackTrace
		{
			get;
		}
		
		string HelpLink
		{
			get;
			set;
		}
		
		string Source
		{
			get;
			set;
		}
		
		int HResult
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException Wrapped
		{
			get;
		}
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
		
		System.Exception GetBaseException();
		
		string ToString();
		
		System.Type GetType();
	}
	
	// Interface for ForestTrustCollisionExceptionWrapper
	public partial interface IForestTrustCollisionExceptionWrapper
	{
		
		IForestTrustRelationshipCollisionCollectionWrapper Collisions
		{
			get;
		}
		
		int ErrorCode
		{
			get;
		}
		
		string Message
		{
			get;
		}
		
		System.Collections.IDictionary Data
		{
			get;
		}
		
		System.Exception InnerException
		{
			get;
		}
		
		System.Reflection.MethodBase TargetSite
		{
			get;
		}
		
		string StackTrace
		{
			get;
		}
		
		string HelpLink
		{
			get;
			set;
		}
		
		string Source
		{
			get;
			set;
		}
		
		int HResult
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException Wrapped
		{
			get;
		}
		
		void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
		
		System.Exception GetBaseException();
		
		string ToString();
		
		System.Type GetType();
	}
	
	// Interface for ForestWrapper
	public partial interface IForestWrapper : System.IDisposable
	{
		
		string Name
		{
			get;
		}
		
		IReadOnlySiteCollectionWrapper Sites
		{
			get;
		}
		
		IDomainCollectionWrapper Domains
		{
			get;
		}
		
		IGlobalCatalogCollectionWrapper GlobalCatalogs
		{
			get;
		}
		
		IApplicationPartitionCollectionWrapper ApplicationPartitions
		{
			get;
		}
		
		int ForestModeLevel
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestMode ForestMode
		{
			get;
		}
		
		IDomainWrapper RootDomain
		{
			get;
		}
		
		IActiveDirectorySchemaWrapper Schema
		{
			get;
		}
		
		IDomainControllerWrapper SchemaRoleOwner
		{
			get;
		}
		
		IDomainControllerWrapper NamingRoleOwner
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.Forest Wrapped
		{
			get;
		}
		
		void RaiseForestFunctionalityLevel(int forestMode);
		
		void RaiseForestFunctionality(System.DirectoryServices.ActiveDirectory.ForestMode forestMode);
		
		string ToString();
		
		IGlobalCatalogWrapper FindGlobalCatalog();
		
		IGlobalCatalogWrapper FindGlobalCatalog(string siteName);
		
		IGlobalCatalogWrapper FindGlobalCatalog(System.DirectoryServices.ActiveDirectory.LocatorOptions flag);
		
		IGlobalCatalogWrapper FindGlobalCatalog(string siteName, System.DirectoryServices.ActiveDirectory.LocatorOptions flag);
		
		IGlobalCatalogCollectionWrapper FindAllGlobalCatalogs();
		
		IGlobalCatalogCollectionWrapper FindAllGlobalCatalogs(string siteName);
		
		IGlobalCatalogCollectionWrapper FindAllDiscoverableGlobalCatalogs();
		
		IGlobalCatalogCollectionWrapper FindAllDiscoverableGlobalCatalogs(string siteName);
		
		ITrustRelationshipInformationCollectionWrapper GetAllTrustRelationships();
		
		IForestTrustRelationshipInformationWrapper GetTrustRelationship(string targetForestName);
		
		bool GetSelectiveAuthenticationStatus(string targetForestName);
		
		void SetSelectiveAuthenticationStatus(string targetForestName, bool enable);
		
		bool GetSidFilteringStatus(string targetForestName);
		
		void SetSidFilteringStatus(string targetForestName, bool enable);
		
		void DeleteLocalSideOfTrustRelationship(string targetForestName);
		
		void DeleteTrustRelationship(IForestWrapper targetForest);
		
		void VerifyOutboundTrustRelationship(string targetForestName);
		
		void VerifyTrustRelationship(IForestWrapper targetForest, System.DirectoryServices.ActiveDirectory.TrustDirection direction);
		
		void CreateLocalSideOfTrustRelationship(string targetForestName, System.DirectoryServices.ActiveDirectory.TrustDirection direction, string trustPassword);
		
		void CreateTrustRelationship(IForestWrapper targetForest, System.DirectoryServices.ActiveDirectory.TrustDirection direction);
		
		void UpdateLocalSideOfTrustRelationship(string targetForestName, string newTrustPassword);
		
		void UpdateLocalSideOfTrustRelationship(string targetForestName, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection, string newTrustPassword);
		
		void UpdateTrustRelationship(IForestWrapper targetForest, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection);
		
		void RepairTrustRelationship(IForestWrapper targetForest);
	}
	
	// Interface for ForestTrustRelationshipCollisionWrapper
	public partial interface IForestTrustRelationshipCollisionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ForestTrustCollisionType CollisionType
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TopLevelNameCollisionOptions TopLevelNameCollisionOption
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.DomainCollisionOptions DomainCollisionOption
		{
			get;
		}
		
		string CollisionRecord
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision Wrapped
		{
			get;
		}
	}
	
	// Interface for ForestTrustRelationshipCollisionCollectionWrapper
	public partial interface IForestTrustRelationshipCollisionCollectionWrapper
	{
		
		IForestTrustRelationshipCollisionWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection Wrapped
		{
			get;
		}
		
		bool Contains(IForestTrustRelationshipCollisionWrapper collision);
		
		int IndexOf(IForestTrustRelationshipCollisionWrapper collision);
		
		void CopyTo(IForestTrustRelationshipCollisionWrapper[] array, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ForestTrustDomainInfoCollectionWrapper
	public partial interface IForestTrustDomainInfoCollectionWrapper
	{
		
		IForestTrustDomainInformationWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection Wrapped
		{
			get;
		}
		
		bool Contains(IForestTrustDomainInformationWrapper information);
		
		int IndexOf(IForestTrustDomainInformationWrapper information);
		
		void CopyTo(IForestTrustDomainInformationWrapper[] array, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ForestTrustDomainInformationWrapper
	public partial interface IForestTrustDomainInformationWrapper
	{
		
		string DnsName
		{
			get;
		}
		
		string NetBiosName
		{
			get;
		}
		
		string DomainSid
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustDomainStatus Status
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation Wrapped
		{
			get;
		}
	}
	
	// Interface for ForestTrustRelationshipInformationWrapper
	public partial interface IForestTrustRelationshipInformationWrapper
	{
		
		ITopLevelNameCollectionWrapper TopLevelNames
		{
			get;
		}
		
		System.Collections.Specialized.StringCollection ExcludedTopLevelNames
		{
			get;
		}
		
		IForestTrustDomainInfoCollectionWrapper TrustedDomainInformation
		{
			get;
		}
		
		string SourceName
		{
			get;
		}
		
		string TargetName
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TrustType TrustType
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TrustDirection TrustDirection
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation Wrapped
		{
			get;
		}
		
		void Save();
	}
	
	// Interface for GlobalCatalogWrapper
	public partial interface IGlobalCatalogWrapper : System.IDisposable
	{
		
		IForestWrapper Forest
		{
			get;
		}
		
		System.DateTime CurrentTime
		{
			get;
		}
		
		long HighestCommittedUsn
		{
			get;
		}
		
		string OSVersion
		{
			get;
		}
		
		IActiveDirectoryRoleCollectionWrapper Roles
		{
			get;
		}
		
		IDomainWrapper Domain
		{
			get;
		}
		
		string IPAddress
		{
			get;
		}
		
		string SiteName
		{
			get;
		}
		
		ISyncUpdateCallbackWrapper SyncFromAllServersCallback
		{
			get;
			set;
		}
		
		IReplicationConnectionCollectionWrapper InboundConnections
		{
			get;
		}
		
		IReplicationConnectionCollectionWrapper OutboundConnections
		{
			get;
		}
		
		string Name
		{
			get;
		}
		
		IReadOnlyStringCollectionWrapper Partitions
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalog Wrapped
		{
			get;
		}
		
		IGlobalCatalogWrapper EnableGlobalCatalog();
		
		IDomainControllerWrapper DisableGlobalCatalog();
		
		bool IsGlobalCatalog();
		
		IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper FindAllProperties();
		
		IDirectorySearcherWrapper GetDirectorySearcher();
		
		void TransferRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role);
		
		void SeizeRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role);
		
		void CheckReplicationConsistency();
		
		IReplicationCursorCollectionWrapper GetReplicationCursors(string partition);
		
		IReplicationOperationInformationWrapper GetReplicationOperationInformation();
		
		IReplicationNeighborCollectionWrapper GetReplicationNeighbors(string partition);
		
		IReplicationNeighborCollectionWrapper GetAllReplicationNeighbors();
		
		IReplicationFailureCollectionWrapper GetReplicationConnectionFailures();
		
		IActiveDirectoryReplicationMetadataWrapper GetReplicationMetadata(string objectPath);
		
		void SyncReplicaFromServer(string partition, string sourceServer);
		
		void TriggerSyncReplicaFromNeighbors(string partition);
		
		void SyncReplicaFromAllServers(string partition, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions options);
		
		string ToString();
		
		void MoveToAnotherSite(string siteName);
		
		IDirectoryEntryWrapper GetDirectoryEntry();
	}
	
	// Interface for GlobalCatalogCollectionWrapper
	public partial interface IGlobalCatalogCollectionWrapper
	{
		
		IGlobalCatalogWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection Wrapped
		{
			get;
		}
		
		bool Contains(IGlobalCatalogWrapper globalCatalog);
		
		int IndexOf(IGlobalCatalogWrapper globalCatalog);
		
		void CopyTo(IGlobalCatalogWrapper[] globalCatalogs, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReadOnlyActiveDirectorySchemaClassCollectionWrapper
	public partial interface IReadOnlyActiveDirectorySchemaClassCollectionWrapper
	{
		
		IActiveDirectorySchemaClassWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection Wrapped
		{
			get;
		}
		
		bool Contains(IActiveDirectorySchemaClassWrapper schemaClass);
		
		int IndexOf(IActiveDirectorySchemaClassWrapper schemaClass);
		
		void CopyTo(IActiveDirectorySchemaClassWrapper[] classes, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReadOnlyActiveDirectorySchemaPropertyCollectionWrapper
	public partial interface IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper
	{
		
		IActiveDirectorySchemaPropertyWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection Wrapped
		{
			get;
		}
		
		bool Contains(IActiveDirectorySchemaPropertyWrapper schemaProperty);
		
		int IndexOf(IActiveDirectorySchemaPropertyWrapper schemaProperty);
		
		void CopyTo(IActiveDirectorySchemaPropertyWrapper[] properties, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReadOnlyDirectoryServerCollectionWrapper
	public partial interface IReadOnlyDirectoryServerCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.DirectoryServer this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.DirectoryServer directoryServer);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.DirectoryServer directoryServer);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.DirectoryServer[] directoryServers, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReadOnlySiteCollectionWrapper
	public partial interface IReadOnlySiteCollectionWrapper
	{
		
		IActiveDirectorySiteWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection Wrapped
		{
			get;
		}
		
		bool Contains(IActiveDirectorySiteWrapper site);
		
		int IndexOf(IActiveDirectorySiteWrapper site);
		
		void CopyTo(IActiveDirectorySiteWrapper[] sites, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReadOnlySiteLinkBridgeCollectionWrapper
	public partial interface IReadOnlySiteLinkBridgeCollectionWrapper
	{
		
		IActiveDirectorySiteLinkBridgeWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection Wrapped
		{
			get;
		}
		
		bool Contains(IActiveDirectorySiteLinkBridgeWrapper bridge);
		
		int IndexOf(IActiveDirectorySiteLinkBridgeWrapper bridge);
		
		void CopyTo(IActiveDirectorySiteLinkBridgeWrapper[] bridges, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReadOnlySiteLinkCollectionWrapper
	public partial interface IReadOnlySiteLinkCollectionWrapper
	{
		
		IActiveDirectorySiteLinkWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection Wrapped
		{
			get;
		}
		
		bool Contains(IActiveDirectorySiteLinkWrapper link);
		
		int IndexOf(IActiveDirectorySiteLinkWrapper link);
		
		void CopyTo(IActiveDirectorySiteLinkWrapper[] links, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReadOnlyStringCollectionWrapper
	public partial interface IReadOnlyStringCollectionWrapper
	{
		
		string this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection Wrapped
		{
			get;
		}
		
		bool Contains(string value);
		
		int IndexOf(string value);
		
		void CopyTo(string[] values, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReplicationConnectionWrapper
	public partial interface IReplicationConnectionWrapper : System.IDisposable
	{
		
		string Name
		{
			get;
		}
		
		string SourceServer
		{
			get;
		}
		
		string DestinationServer
		{
			get;
		}
		
		bool Enabled
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get;
		}
		
		bool GeneratedByKcc
		{
			get;
			set;
		}
		
		bool ReciprocalReplicationEnabled
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.NotificationStatus ChangeNotificationStatus
		{
			get;
			set;
		}
		
		bool DataCompressionEnabled
		{
			get;
			set;
		}
		
		bool ReplicationScheduleOwnedByUser
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationSpan ReplicationSpan
		{
			get;
		}
		
		IActiveDirectoryScheduleWrapper ReplicationSchedule
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationConnection Wrapped
		{
			get;
		}
		
		void Delete();
		
		void Save();
		
		string ToString();
		
		IDirectoryEntryWrapper GetDirectoryEntry();
	}
	
	// Interface for ReplicationConnectionCollectionWrapper
	public partial interface IReplicationConnectionCollectionWrapper
	{
		
		IReplicationConnectionWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection Wrapped
		{
			get;
		}
		
		bool Contains(IReplicationConnectionWrapper connection);
		
		int IndexOf(IReplicationConnectionWrapper connection);
		
		void CopyTo(IReplicationConnectionWrapper[] connections, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReplicationCursorWrapper
	public partial interface IReplicationCursorWrapper
	{
		
		string PartitionName
		{
			get;
		}
		
		System.Guid SourceInvocationId
		{
			get;
		}
		
		long UpToDatenessUsn
		{
			get;
		}
		
		string SourceServer
		{
			get;
		}
		
		System.DateTime LastSuccessfulSyncTime
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationCursor Wrapped
		{
			get;
		}
	}
	
	// Interface for ReplicationCursorCollectionWrapper
	public partial interface IReplicationCursorCollectionWrapper
	{
		
		IReplicationCursorWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection Wrapped
		{
			get;
		}
		
		bool Contains(IReplicationCursorWrapper cursor);
		
		int IndexOf(IReplicationCursorWrapper cursor);
		
		void CopyTo(IReplicationCursorWrapper[] values, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReplicationFailureWrapper
	public partial interface IReplicationFailureWrapper
	{
		
		string SourceServer
		{
			get;
		}
		
		System.DateTime FirstFailureTime
		{
			get;
		}
		
		int ConsecutiveFailureCount
		{
			get;
		}
		
		int LastErrorCode
		{
			get;
		}
		
		string LastErrorMessage
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationFailure Wrapped
		{
			get;
		}
	}
	
	// Interface for ReplicationFailureCollectionWrapper
	public partial interface IReplicationFailureCollectionWrapper
	{
		
		IReplicationFailureWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection Wrapped
		{
			get;
		}
		
		bool Contains(IReplicationFailureWrapper failure);
		
		int IndexOf(IReplicationFailureWrapper failure);
		
		void CopyTo(IReplicationFailureWrapper[] failures, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReplicationNeighborWrapper
	public partial interface IReplicationNeighborWrapper
	{
		
		string PartitionName
		{
			get;
		}
		
		string SourceServer
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationNeighbor.ReplicationNeighborOptions ReplicationNeighborOption
		{
			get;
		}
		
		System.Guid SourceInvocationId
		{
			get;
		}
		
		long UsnLastObjectChangeSynced
		{
			get;
		}
		
		long UsnAttributeFilter
		{
			get;
		}
		
		System.DateTime LastSuccessfulSync
		{
			get;
		}
		
		System.DateTime LastAttemptedSync
		{
			get;
		}
		
		int LastSyncResult
		{
			get;
		}
		
		string LastSyncMessage
		{
			get;
		}
		
		int ConsecutiveFailureCount
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationNeighbor Wrapped
		{
			get;
		}
	}
	
	// Interface for ReplicationNeighborCollectionWrapper
	public partial interface IReplicationNeighborCollectionWrapper
	{
		
		IReplicationNeighborWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection Wrapped
		{
			get;
		}
		
		bool Contains(IReplicationNeighborWrapper neighbor);
		
		int IndexOf(IReplicationNeighborWrapper neighbor);
		
		void CopyTo(IReplicationNeighborWrapper[] neighbors, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReplicationOperationWrapper
	public partial interface IReplicationOperationWrapper
	{
		
		System.DateTime TimeEnqueued
		{
			get;
		}
		
		int OperationNumber
		{
			get;
		}
		
		int Priority
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationOperationType OperationType
		{
			get;
		}
		
		string PartitionName
		{
			get;
		}
		
		string SourceServer
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationOperation Wrapped
		{
			get;
		}
	}
	
	// Interface for ReplicationOperationCollectionWrapper
	public partial interface IReplicationOperationCollectionWrapper
	{
		
		IReplicationOperationWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection Wrapped
		{
			get;
		}
		
		bool Contains(IReplicationOperationWrapper operation);
		
		int IndexOf(IReplicationOperationWrapper operation);
		
		void CopyTo(IReplicationOperationWrapper[] operations, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for ReplicationOperationInformationWrapper
	public partial interface IReplicationOperationInformationWrapper
	{
		
		System.DateTime OperationStartTime
		{
			get;
		}
		
		IReplicationOperationWrapper CurrentOperation
		{
			get;
		}
		
		IReplicationOperationCollectionWrapper PendingOperations
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation Wrapped
		{
			get;
		}
	}
	
	// Interface for ActiveDirectoryInterSiteTransportWrapper
	public partial interface IActiveDirectoryInterSiteTransportWrapper : System.IDisposable
	{
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get;
		}
		
		bool IgnoreReplicationSchedule
		{
			get;
			set;
		}
		
		bool BridgeAllSiteLinks
		{
			get;
			set;
		}
		
		IReadOnlySiteLinkCollectionWrapper SiteLinks
		{
			get;
		}
		
		IReadOnlySiteLinkBridgeCollectionWrapper SiteLinkBridges
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport Wrapped
		{
			get;
		}
		
		void Save();
		
		IDirectoryEntryWrapper GetDirectoryEntry();
		
		string ToString();
	}
	
	// Interface for ActiveDirectoryRoleCollectionWrapper
	public partial interface IActiveDirectoryRoleCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole[] roles, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for AdamRoleCollectionWrapper
	public partial interface IAdamRoleCollectionWrapper
	{
		
		System.DirectoryServices.ActiveDirectory.AdamRole this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.AdamRoleCollection Wrapped
		{
			get;
		}
		
		bool Contains(System.DirectoryServices.ActiveDirectory.AdamRole role);
		
		int IndexOf(System.DirectoryServices.ActiveDirectory.AdamRole role);
		
		void CopyTo(System.DirectoryServices.ActiveDirectory.AdamRole[] roles, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for TopLevelNameWrapper
	public partial interface ITopLevelNameWrapper
	{
		
		string Name
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TopLevelNameStatus Status
		{
			get;
			set;
		}
		
		System.DirectoryServices.ActiveDirectory.TopLevelName Wrapped
		{
			get;
		}
	}
	
	// Interface for TopLevelNameCollectionWrapper
	public partial interface ITopLevelNameCollectionWrapper
	{
		
		ITopLevelNameWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TopLevelNameCollection Wrapped
		{
			get;
		}
		
		bool Contains(ITopLevelNameWrapper name);
		
		int IndexOf(ITopLevelNameWrapper name);
		
		void CopyTo(ITopLevelNameWrapper[] names, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// Interface for TrustRelationshipInformationWrapper
	public partial interface ITrustRelationshipInformationWrapper
	{
		
		string SourceName
		{
			get;
		}
		
		string TargetName
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TrustType TrustType
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TrustDirection TrustDirection
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation Wrapped
		{
			get;
		}
	}
	
	// Interface for TrustRelationshipInformationCollectionWrapper
	public partial interface ITrustRelationshipInformationCollectionWrapper
	{
		
		ITrustRelationshipInformationWrapper this[int index]
		{
			get;
		}
		
		int Count
		{
			get;
		}
		
		System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection Wrapped
		{
			get;
		}
		
		bool Contains(ITrustRelationshipInformationWrapper information);
		
		int IndexOf(ITrustRelationshipInformationWrapper information);
		
		void CopyTo(ITrustRelationshipInformationWrapper[] array, int index);
		
		System.Collections.IEnumerator GetEnumerator();
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectorySecurity in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectorySecurityWrapper : IActiveDirectorySecurityWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectorySecurity _wrapped;
		
		public ActiveDirectorySecurityWrapper(System.DirectoryServices.ActiveDirectorySecurity wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.Type AccessRightType
		{
			get
			{
				return _wrapped.AccessRightType;
			}
		}
		
		public System.Type AccessRuleType
		{
			get
			{
				return _wrapped.AccessRuleType;
			}
		}
		
		public System.Type AuditRuleType
		{
			get
			{
				return _wrapped.AuditRuleType;
			}
		}
		
		public bool AreAccessRulesProtected
		{
			get
			{
				return _wrapped.AreAccessRulesProtected;
			}
		}
		
		public bool AreAuditRulesProtected
		{
			get
			{
				return _wrapped.AreAuditRulesProtected;
			}
		}
		
		public bool AreAccessRulesCanonical
		{
			get
			{
				return _wrapped.AreAccessRulesCanonical;
			}
		}
		
		public bool AreAuditRulesCanonical
		{
			get
			{
				return _wrapped.AreAuditRulesCanonical;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurity Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void AddAccessRule(IActiveDirectoryAccessRuleWrapper rule)
		{
			_wrapped.AddAccessRule(rule.Wrapped);
		}
		
		public void SetAccessRule(IActiveDirectoryAccessRuleWrapper rule)
		{
			_wrapped.SetAccessRule(rule.Wrapped);
		}
		
		public void ResetAccessRule(IActiveDirectoryAccessRuleWrapper rule)
		{
			_wrapped.ResetAccessRule(rule.Wrapped);
		}
		
		public void RemoveAccess(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.AccessControlType type)
		{
			_wrapped.RemoveAccess(identity, type);
		}
		
		public bool RemoveAccessRule(IActiveDirectoryAccessRuleWrapper rule)
		{
			return _wrapped.RemoveAccessRule(rule.Wrapped);
		}
		
		public void RemoveAccessRuleSpecific(IActiveDirectoryAccessRuleWrapper rule)
		{
			_wrapped.RemoveAccessRuleSpecific(rule.Wrapped);
		}
		
		public bool ModifyAccessRule(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, out bool modified)
		{
			return _wrapped.ModifyAccessRule(modification, rule, out modified);
		}
		
		public void PurgeAccessRules(System.Security.Principal.IdentityReference identity)
		{
			_wrapped.PurgeAccessRules(identity);
		}
		
		public void AddAuditRule(IActiveDirectoryAuditRuleWrapper rule)
		{
			_wrapped.AddAuditRule(rule.Wrapped);
		}
		
		public void SetAuditRule(IActiveDirectoryAuditRuleWrapper rule)
		{
			_wrapped.SetAuditRule(rule.Wrapped);
		}
		
		public void RemoveAudit(System.Security.Principal.IdentityReference identity)
		{
			_wrapped.RemoveAudit(identity);
		}
		
		public bool RemoveAuditRule(IActiveDirectoryAuditRuleWrapper rule)
		{
			return _wrapped.RemoveAuditRule(rule.Wrapped);
		}
		
		public void RemoveAuditRuleSpecific(IActiveDirectoryAuditRuleWrapper rule)
		{
			_wrapped.RemoveAuditRuleSpecific(rule.Wrapped);
		}
		
		public bool ModifyAuditRule(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AuditRule rule, out bool modified)
		{
			return _wrapped.ModifyAuditRule(modification, rule, out modified);
		}
		
		public void PurgeAuditRules(System.Security.Principal.IdentityReference identity)
		{
			_wrapped.PurgeAuditRules(identity);
		}
		
		public System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type)
		{
			return _wrapped.AccessRuleFactory(identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type);
		}
		
		public System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type, System.Guid objectGuid, System.Guid inheritedObjectGuid)
		{
			return _wrapped.AccessRuleFactory(identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type, objectGuid, inheritedObjectGuid);
		}
		
		public System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags)
		{
			return _wrapped.AuditRuleFactory(identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags);
		}
		
		public System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags, System.Guid objectGuid, System.Guid inheritedObjectGuid)
		{
			return _wrapped.AuditRuleFactory(identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags, objectGuid, inheritedObjectGuid);
		}
		
		public System.Security.AccessControl.AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, System.Type targetType)
		{
			return _wrapped.GetAccessRules(includeExplicit, includeInherited, targetType);
		}
		
		public System.Security.AccessControl.AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, System.Type targetType)
		{
			return _wrapped.GetAuditRules(includeExplicit, includeInherited, targetType);
		}
		
		public byte[] GetSecurityDescriptorBinaryForm()
		{
			return _wrapped.GetSecurityDescriptorBinaryForm();
		}
		
		public System.Security.Principal.IdentityReference GetOwner(System.Type targetType)
		{
			return _wrapped.GetOwner(targetType);
		}
		
		public void SetOwner(System.Security.Principal.IdentityReference identity)
		{
			_wrapped.SetOwner(identity);
		}
		
		public System.Security.Principal.IdentityReference GetGroup(System.Type targetType)
		{
			return _wrapped.GetGroup(targetType);
		}
		
		public void SetGroup(System.Security.Principal.IdentityReference identity)
		{
			_wrapped.SetGroup(identity);
		}
		
		public void SetAccessRuleProtection(bool isProtected, bool preserveInheritance)
		{
			_wrapped.SetAccessRuleProtection(isProtected, preserveInheritance);
		}
		
		public void SetAuditRuleProtection(bool isProtected, bool preserveInheritance)
		{
			_wrapped.SetAuditRuleProtection(isProtected, preserveInheritance);
		}
		
		public string GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections includeSections)
		{
			return _wrapped.GetSecurityDescriptorSddlForm(includeSections);
		}
		
		public void SetSecurityDescriptorSddlForm(string sddlForm)
		{
			_wrapped.SetSecurityDescriptorSddlForm(sddlForm);
		}
		
		public void SetSecurityDescriptorSddlForm(string sddlForm, System.Security.AccessControl.AccessControlSections includeSections)
		{
			_wrapped.SetSecurityDescriptorSddlForm(sddlForm, includeSections);
		}
		
		public void SetSecurityDescriptorBinaryForm(byte[] binaryForm)
		{
			_wrapped.SetSecurityDescriptorBinaryForm(binaryForm);
		}
		
		public void SetSecurityDescriptorBinaryForm(byte[] binaryForm, System.Security.AccessControl.AccessControlSections includeSections)
		{
			_wrapped.SetSecurityDescriptorBinaryForm(binaryForm, includeSections);
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectorySecurity ConvertWrapper(IActiveDirectorySecurityWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectorySecurityWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectorySecurity wrapped)
		{
			return new ActiveDirectorySecurityWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectoryAccessRule in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectoryAccessRuleWrapper : IActiveDirectoryAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectoryAccessRule _wrapped;
		
		public ActiveDirectoryAccessRuleWrapper(System.DirectoryServices.ActiveDirectoryAccessRule wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return _wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return _wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return _wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return _wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return _wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return _wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return _wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return _wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return _wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return _wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.ActiveDirectoryAccessRule Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectoryAccessRule ConvertWrapper(IActiveDirectoryAccessRuleWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectoryAccessRuleWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectoryAccessRule wrapped)
		{
			return new ActiveDirectoryAccessRuleWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ListChildrenAccessRule in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ListChildrenAccessRuleWrapper : IListChildrenAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.ListChildrenAccessRule _wrapped;
		
		public ListChildrenAccessRuleWrapper(System.DirectoryServices.ListChildrenAccessRule wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return _wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return _wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return _wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return _wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return _wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return _wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return _wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return _wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return _wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return _wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.ListChildrenAccessRule Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ListChildrenAccessRule ConvertWrapper(IListChildrenAccessRuleWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IListChildrenAccessRuleWrapper ConvertWrapped(System.DirectoryServices.ListChildrenAccessRule wrapped)
		{
			return new ListChildrenAccessRuleWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.CreateChildAccessRule in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class CreateChildAccessRuleWrapper : ICreateChildAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.CreateChildAccessRule _wrapped;
		
		public CreateChildAccessRuleWrapper(System.DirectoryServices.CreateChildAccessRule wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return _wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return _wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return _wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return _wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return _wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return _wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return _wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return _wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return _wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return _wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.CreateChildAccessRule Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.CreateChildAccessRule ConvertWrapper(ICreateChildAccessRuleWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static ICreateChildAccessRuleWrapper ConvertWrapped(System.DirectoryServices.CreateChildAccessRule wrapped)
		{
			return new CreateChildAccessRuleWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.DeleteChildAccessRule in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DeleteChildAccessRuleWrapper : IDeleteChildAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.DeleteChildAccessRule _wrapped;
		
		public DeleteChildAccessRuleWrapper(System.DirectoryServices.DeleteChildAccessRule wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return _wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return _wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return _wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return _wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return _wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return _wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return _wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return _wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return _wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return _wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.DeleteChildAccessRule Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.DeleteChildAccessRule ConvertWrapper(IDeleteChildAccessRuleWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDeleteChildAccessRuleWrapper ConvertWrapped(System.DirectoryServices.DeleteChildAccessRule wrapped)
		{
			return new DeleteChildAccessRuleWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.PropertyAccessRule in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class PropertyAccessRuleWrapper : IPropertyAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.PropertyAccessRule _wrapped;
		
		public PropertyAccessRuleWrapper(System.DirectoryServices.PropertyAccessRule wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return _wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return _wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return _wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return _wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return _wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return _wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return _wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return _wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return _wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return _wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.PropertyAccessRule Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.PropertyAccessRule ConvertWrapper(IPropertyAccessRuleWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IPropertyAccessRuleWrapper ConvertWrapped(System.DirectoryServices.PropertyAccessRule wrapped)
		{
			return new PropertyAccessRuleWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.PropertySetAccessRule in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class PropertySetAccessRuleWrapper : IPropertySetAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.PropertySetAccessRule _wrapped;
		
		public PropertySetAccessRuleWrapper(System.DirectoryServices.PropertySetAccessRule wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return _wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return _wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return _wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return _wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return _wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return _wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return _wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return _wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return _wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return _wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.PropertySetAccessRule Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.PropertySetAccessRule ConvertWrapper(IPropertySetAccessRuleWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IPropertySetAccessRuleWrapper ConvertWrapped(System.DirectoryServices.PropertySetAccessRule wrapped)
		{
			return new PropertySetAccessRuleWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ExtendedRightAccessRule in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ExtendedRightAccessRuleWrapper : IExtendedRightAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.ExtendedRightAccessRule _wrapped;
		
		public ExtendedRightAccessRuleWrapper(System.DirectoryServices.ExtendedRightAccessRule wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return _wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return _wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return _wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return _wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return _wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return _wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return _wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return _wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return _wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return _wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.ExtendedRightAccessRule Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ExtendedRightAccessRule ConvertWrapper(IExtendedRightAccessRuleWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IExtendedRightAccessRuleWrapper ConvertWrapped(System.DirectoryServices.ExtendedRightAccessRule wrapped)
		{
			return new ExtendedRightAccessRuleWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.DeleteTreeAccessRule in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DeleteTreeAccessRuleWrapper : IDeleteTreeAccessRuleWrapper
	{
		
		private readonly System.DirectoryServices.DeleteTreeAccessRule _wrapped;
		
		public DeleteTreeAccessRuleWrapper(System.DirectoryServices.DeleteTreeAccessRule wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return _wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return _wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return _wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return _wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return _wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AccessControlType AccessControlType
		{
			get
			{
				return _wrapped.AccessControlType;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return _wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return _wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return _wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return _wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.DeleteTreeAccessRule Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.DeleteTreeAccessRule ConvertWrapper(IDeleteTreeAccessRuleWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDeleteTreeAccessRuleWrapper ConvertWrapped(System.DirectoryServices.DeleteTreeAccessRule wrapped)
		{
			return new DeleteTreeAccessRuleWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectoryAuditRule in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectoryAuditRuleWrapper : IActiveDirectoryAuditRuleWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectoryAuditRule _wrapped;
		
		public ActiveDirectoryAuditRuleWrapper(System.DirectoryServices.ActiveDirectoryAuditRule wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectoryRights ActiveDirectoryRights
		{
			get
			{
				return _wrapped.ActiveDirectoryRights;
			}
		}
		
		public System.DirectoryServices.ActiveDirectorySecurityInheritance InheritanceType
		{
			get
			{
				return _wrapped.InheritanceType;
			}
		}
		
		public System.Guid ObjectType
		{
			get
			{
				return _wrapped.ObjectType;
			}
		}
		
		public System.Guid InheritedObjectType
		{
			get
			{
				return _wrapped.InheritedObjectType;
			}
		}
		
		public System.Security.AccessControl.ObjectAceFlags ObjectFlags
		{
			get
			{
				return _wrapped.ObjectFlags;
			}
		}
		
		public System.Security.AccessControl.AuditFlags AuditFlags
		{
			get
			{
				return _wrapped.AuditFlags;
			}
		}
		
		public System.Security.Principal.IdentityReference IdentityReference
		{
			get
			{
				return _wrapped.IdentityReference;
			}
		}
		
		public bool IsInherited
		{
			get
			{
				return _wrapped.IsInherited;
			}
		}
		
		public System.Security.AccessControl.InheritanceFlags InheritanceFlags
		{
			get
			{
				return _wrapped.InheritanceFlags;
			}
		}
		
		public System.Security.AccessControl.PropagationFlags PropagationFlags
		{
			get
			{
				return _wrapped.PropagationFlags;
			}
		}
		
		public System.DirectoryServices.ActiveDirectoryAuditRule Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectoryAuditRule ConvertWrapper(IActiveDirectoryAuditRuleWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectoryAuditRuleWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectoryAuditRule wrapped)
		{
			return new ActiveDirectoryAuditRuleWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.DirectoryEntries in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DirectoryEntriesWrapper : IDirectoryEntriesWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryEntries _wrapped;
		
		public DirectoryEntriesWrapper(System.DirectoryServices.DirectoryEntries wrapped)
		{
			_wrapped = wrapped;
		}
		
		public ISchemaNameCollectionWrapper SchemaFilter
		{
			get
			{
				return new SchemaNameCollectionWrapper(_wrapped.SchemaFilter);
			}
		}
		
		public System.DirectoryServices.DirectoryEntries Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public IDirectoryEntryWrapper Add(string name, string schemaClassName)
		{
			return new DirectoryEntryWrapper(_wrapped.Add(name, schemaClassName));
		}
		
		public IDirectoryEntryWrapper Find(string name)
		{
			return new DirectoryEntryWrapper(_wrapped.Find(name));
		}
		
		public IDirectoryEntryWrapper Find(string name, string schemaClassName)
		{
			return new DirectoryEntryWrapper(_wrapped.Find(name, schemaClassName));
		}
		
		public void Remove(IDirectoryEntryWrapper entry)
		{
			_wrapped.Remove(entry.Wrapped);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.DirectoryEntries ConvertWrapper(IDirectoryEntriesWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDirectoryEntriesWrapper ConvertWrapped(System.DirectoryServices.DirectoryEntries wrapped)
		{
			return new DirectoryEntriesWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.DirectoryEntry in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DirectoryEntryWrapper : IDirectoryEntryWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryEntry _wrapped;
		
		public DirectoryEntryWrapper(System.DirectoryServices.DirectoryEntry wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.AuthenticationTypes AuthenticationType
		{
			get
			{
				return _wrapped.AuthenticationType;
			}
			set
			{
				_wrapped.AuthenticationType = value;
			}
		}
		
		public IDirectoryEntriesWrapper Children
		{
			get
			{
				return new DirectoryEntriesWrapper(_wrapped.Children);
			}
		}
		
		public System.Guid Guid
		{
			get
			{
				return _wrapped.Guid;
			}
		}
		
		public IActiveDirectorySecurityWrapper ObjectSecurity
		{
			get
			{
				return new ActiveDirectorySecurityWrapper(_wrapped.ObjectSecurity);
			}
			set
			{
				_wrapped.ObjectSecurity = value.Wrapped;
			}
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public string NativeGuid
		{
			get
			{
				return _wrapped.NativeGuid;
			}
		}
		
		public object NativeObject
		{
			get
			{
				return _wrapped.NativeObject;
			}
		}
		
		public IDirectoryEntryWrapper Parent
		{
			get
			{
				return new DirectoryEntryWrapper(_wrapped.Parent);
			}
		}
		
		public string Password
		{
			set
			{
				_wrapped.Password = value;
			}
		}
		
		public string Path
		{
			get
			{
				return _wrapped.Path;
			}
			set
			{
				_wrapped.Path = value;
			}
		}
		
		public IPropertyCollectionWrapper Properties
		{
			get
			{
				return new PropertyCollectionWrapper(_wrapped.Properties);
			}
		}
		
		public string SchemaClassName
		{
			get
			{
				return _wrapped.SchemaClassName;
			}
		}
		
		public IDirectoryEntryWrapper SchemaEntry
		{
			get
			{
				return new DirectoryEntryWrapper(_wrapped.SchemaEntry);
			}
		}
		
		public bool UsePropertyCache
		{
			get
			{
				return _wrapped.UsePropertyCache;
			}
			set
			{
				_wrapped.UsePropertyCache = value;
			}
		}
		
		public string Username
		{
			get
			{
				return _wrapped.Username;
			}
			set
			{
				_wrapped.Username = value;
			}
		}
		
		public IDirectoryEntryConfigurationWrapper Options
		{
			get
			{
				return new DirectoryEntryConfigurationWrapper(_wrapped.Options);
			}
		}
		
		public System.ComponentModel.ISite Site
		{
			get
			{
				return _wrapped.Site;
			}
			set
			{
				_wrapped.Site = value;
			}
		}
		
		public System.ComponentModel.IContainer Container
		{
			get
			{
				return _wrapped.Container;
			}
		}
		
		public System.DirectoryServices.DirectoryEntry Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void Close()
		{
			_wrapped.Close();
		}
		
		public void CommitChanges()
		{
			_wrapped.CommitChanges();
		}
		
		public IDirectoryEntryWrapper CopyTo(IDirectoryEntryWrapper newParent)
		{
			return new DirectoryEntryWrapper(_wrapped.CopyTo(newParent.Wrapped));
		}
		
		public IDirectoryEntryWrapper CopyTo(IDirectoryEntryWrapper newParent, string newName)
		{
			return new DirectoryEntryWrapper(_wrapped.CopyTo(newParent.Wrapped, newName));
		}
		
		public void DeleteTree()
		{
			_wrapped.DeleteTree();
		}
		
		public object Invoke(string methodName, object[] args)
		{
			return _wrapped.Invoke(methodName, args);
		}
		
		public object InvokeGet(string propertyName)
		{
			return _wrapped.InvokeGet(propertyName);
		}
		
		public void InvokeSet(string propertyName, object[] args)
		{
			_wrapped.InvokeSet(propertyName, args);
		}
		
		public void MoveTo(IDirectoryEntryWrapper newParent)
		{
			_wrapped.MoveTo(newParent.Wrapped);
		}
		
		public void MoveTo(IDirectoryEntryWrapper newParent, string newName)
		{
			_wrapped.MoveTo(newParent.Wrapped, newName);
		}
		
		public void RefreshCache()
		{
			_wrapped.RefreshCache();
		}
		
		public void RefreshCache(string[] propertyNames)
		{
			_wrapped.RefreshCache(propertyNames);
		}
		
		public void Rename(string newName)
		{
			_wrapped.Rename(newName);
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public object GetLifetimeService()
		{
			return _wrapped.GetLifetimeService();
		}
		
		public object InitializeLifetimeService()
		{
			return _wrapped.InitializeLifetimeService();
		}
		
		public System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType)
		{
			return _wrapped.CreateObjRef(requestedType);
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.DirectoryEntry ConvertWrapper(IDirectoryEntryWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDirectoryEntryWrapper ConvertWrapped(System.DirectoryServices.DirectoryEntry wrapped)
		{
			return new DirectoryEntryWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.DirectoryEntryConfiguration in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DirectoryEntryConfigurationWrapper : IDirectoryEntryConfigurationWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryEntryConfiguration _wrapped;
		
		public DirectoryEntryConfigurationWrapper(System.DirectoryServices.DirectoryEntryConfiguration wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ReferralChasingOption Referral
		{
			get
			{
				return _wrapped.Referral;
			}
			set
			{
				_wrapped.Referral = value;
			}
		}
		
		public System.DirectoryServices.SecurityMasks SecurityMasks
		{
			get
			{
				return _wrapped.SecurityMasks;
			}
			set
			{
				_wrapped.SecurityMasks = value;
			}
		}
		
		public int PageSize
		{
			get
			{
				return _wrapped.PageSize;
			}
			set
			{
				_wrapped.PageSize = value;
			}
		}
		
		public int PasswordPort
		{
			get
			{
				return _wrapped.PasswordPort;
			}
			set
			{
				_wrapped.PasswordPort = value;
			}
		}
		
		public System.DirectoryServices.PasswordEncodingMethod PasswordEncoding
		{
			get
			{
				return _wrapped.PasswordEncoding;
			}
			set
			{
				_wrapped.PasswordEncoding = value;
			}
		}
		
		public System.DirectoryServices.DirectoryEntryConfiguration Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public string GetCurrentServerName()
		{
			return _wrapped.GetCurrentServerName();
		}
		
		public bool IsMutuallyAuthenticated()
		{
			return _wrapped.IsMutuallyAuthenticated();
		}
		
		public void SetUserNameQueryQuota(string accountName)
		{
			_wrapped.SetUserNameQueryQuota(accountName);
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.DirectoryEntryConfiguration ConvertWrapper(IDirectoryEntryConfigurationWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDirectoryEntryConfigurationWrapper ConvertWrapped(System.DirectoryServices.DirectoryEntryConfiguration wrapped)
		{
			return new DirectoryEntryConfigurationWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.DirectorySearcher in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DirectorySearcherWrapper : IDirectorySearcherWrapper
	{
		
		private readonly System.DirectoryServices.DirectorySearcher _wrapped;
		
		public DirectorySearcherWrapper(System.DirectoryServices.DirectorySearcher wrapped)
		{
			_wrapped = wrapped;
		}
		
		public bool CacheResults
		{
			get
			{
				return _wrapped.CacheResults;
			}
			set
			{
				_wrapped.CacheResults = value;
			}
		}
		
		public System.TimeSpan ClientTimeout
		{
			get
			{
				return _wrapped.ClientTimeout;
			}
			set
			{
				_wrapped.ClientTimeout = value;
			}
		}
		
		public bool PropertyNamesOnly
		{
			get
			{
				return _wrapped.PropertyNamesOnly;
			}
			set
			{
				_wrapped.PropertyNamesOnly = value;
			}
		}
		
		public string Filter
		{
			get
			{
				return _wrapped.Filter;
			}
			set
			{
				_wrapped.Filter = value;
			}
		}
		
		public int PageSize
		{
			get
			{
				return _wrapped.PageSize;
			}
			set
			{
				_wrapped.PageSize = value;
			}
		}
		
		public System.Collections.Specialized.StringCollection PropertiesToLoad
		{
			get
			{
				return _wrapped.PropertiesToLoad;
			}
		}
		
		public System.DirectoryServices.ReferralChasingOption ReferralChasing
		{
			get
			{
				return _wrapped.ReferralChasing;
			}
			set
			{
				_wrapped.ReferralChasing = value;
			}
		}
		
		public System.DirectoryServices.SearchScope SearchScope
		{
			get
			{
				return _wrapped.SearchScope;
			}
			set
			{
				_wrapped.SearchScope = value;
			}
		}
		
		public System.TimeSpan ServerPageTimeLimit
		{
			get
			{
				return _wrapped.ServerPageTimeLimit;
			}
			set
			{
				_wrapped.ServerPageTimeLimit = value;
			}
		}
		
		public System.TimeSpan ServerTimeLimit
		{
			get
			{
				return _wrapped.ServerTimeLimit;
			}
			set
			{
				_wrapped.ServerTimeLimit = value;
			}
		}
		
		public int SizeLimit
		{
			get
			{
				return _wrapped.SizeLimit;
			}
			set
			{
				_wrapped.SizeLimit = value;
			}
		}
		
		public IDirectoryEntryWrapper SearchRoot
		{
			get
			{
				return new DirectoryEntryWrapper(_wrapped.SearchRoot);
			}
			set
			{
				_wrapped.SearchRoot = value.Wrapped;
			}
		}
		
		public ISortOptionWrapper Sort
		{
			get
			{
				return new SortOptionWrapper(_wrapped.Sort);
			}
			set
			{
				_wrapped.Sort = value.Wrapped;
			}
		}
		
		public bool Asynchronous
		{
			get
			{
				return _wrapped.Asynchronous;
			}
			set
			{
				_wrapped.Asynchronous = value;
			}
		}
		
		public bool Tombstone
		{
			get
			{
				return _wrapped.Tombstone;
			}
			set
			{
				_wrapped.Tombstone = value;
			}
		}
		
		public string AttributeScopeQuery
		{
			get
			{
				return _wrapped.AttributeScopeQuery;
			}
			set
			{
				_wrapped.AttributeScopeQuery = value;
			}
		}
		
		public System.DirectoryServices.DereferenceAlias DerefAlias
		{
			get
			{
				return _wrapped.DerefAlias;
			}
			set
			{
				_wrapped.DerefAlias = value;
			}
		}
		
		public System.DirectoryServices.SecurityMasks SecurityMasks
		{
			get
			{
				return _wrapped.SecurityMasks;
			}
			set
			{
				_wrapped.SecurityMasks = value;
			}
		}
		
		public System.DirectoryServices.ExtendedDN ExtendedDN
		{
			get
			{
				return _wrapped.ExtendedDN;
			}
			set
			{
				_wrapped.ExtendedDN = value;
			}
		}
		
		public IDirectorySynchronizationWrapper DirectorySynchronization
		{
			get
			{
				return new DirectorySynchronizationWrapper(_wrapped.DirectorySynchronization);
			}
			set
			{
				_wrapped.DirectorySynchronization = value.Wrapped;
			}
		}
		
		public IDirectoryVirtualListViewWrapper VirtualListView
		{
			get
			{
				return new DirectoryVirtualListViewWrapper(_wrapped.VirtualListView);
			}
			set
			{
				_wrapped.VirtualListView = value.Wrapped;
			}
		}
		
		public System.ComponentModel.ISite Site
		{
			get
			{
				return _wrapped.Site;
			}
			set
			{
				_wrapped.Site = value;
			}
		}
		
		public System.ComponentModel.IContainer Container
		{
			get
			{
				return _wrapped.Container;
			}
		}
		
		public System.DirectoryServices.DirectorySearcher Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public ISearchResultWrapper FindOne()
		{
			return new SearchResultWrapper(_wrapped.FindOne());
		}
		
		public ISearchResultCollectionWrapper FindAll()
		{
			return new SearchResultCollectionWrapper(_wrapped.FindAll());
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public object GetLifetimeService()
		{
			return _wrapped.GetLifetimeService();
		}
		
		public object InitializeLifetimeService()
		{
			return _wrapped.InitializeLifetimeService();
		}
		
		public System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType)
		{
			return _wrapped.CreateObjRef(requestedType);
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.DirectorySearcher ConvertWrapper(IDirectorySearcherWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDirectorySearcherWrapper ConvertWrapped(System.DirectoryServices.DirectorySearcher wrapped)
		{
			return new DirectorySearcherWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.DirectoryServicesPermission in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DirectoryServicesPermissionWrapper : IDirectoryServicesPermissionWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryServicesPermission _wrapped;
		
		public DirectoryServicesPermissionWrapper(System.DirectoryServices.DirectoryServicesPermission wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IDirectoryServicesPermissionEntryCollectionWrapper PermissionEntries
		{
			get
			{
				return new DirectoryServicesPermissionEntryCollectionWrapper(_wrapped.PermissionEntries);
			}
		}
		
		public System.DirectoryServices.DirectoryServicesPermission Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public System.Security.IPermission Copy()
		{
			return _wrapped.Copy();
		}
		
		public void FromXml(System.Security.SecurityElement securityElement)
		{
			_wrapped.FromXml(securityElement);
		}
		
		public System.Security.IPermission Intersect(System.Security.IPermission target)
		{
			return _wrapped.Intersect(target);
		}
		
		public bool IsSubsetOf(System.Security.IPermission target)
		{
			return _wrapped.IsSubsetOf(target);
		}
		
		public bool IsUnrestricted()
		{
			return _wrapped.IsUnrestricted();
		}
		
		public System.Security.SecurityElement ToXml()
		{
			return _wrapped.ToXml();
		}
		
		public System.Security.IPermission Union(System.Security.IPermission target)
		{
			return _wrapped.Union(target);
		}
		
		public void Demand()
		{
			_wrapped.Demand();
		}
		
		public void Assert()
		{
			_wrapped.Assert();
		}
		
		public void Deny()
		{
			_wrapped.Deny();
		}
		
		public void PermitOnly()
		{
			_wrapped.PermitOnly();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.DirectoryServicesPermission ConvertWrapper(IDirectoryServicesPermissionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDirectoryServicesPermissionWrapper ConvertWrapped(System.DirectoryServices.DirectoryServicesPermission wrapped)
		{
			return new DirectoryServicesPermissionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.DirectoryServicesPermissionEntry in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DirectoryServicesPermissionEntryWrapper : IDirectoryServicesPermissionEntryWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryServicesPermissionEntry _wrapped;
		
		public DirectoryServicesPermissionEntryWrapper(System.DirectoryServices.DirectoryServicesPermissionEntry wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Path
		{
			get
			{
				return _wrapped.Path;
			}
		}
		
		public System.DirectoryServices.DirectoryServicesPermissionAccess PermissionAccess
		{
			get
			{
				return _wrapped.PermissionAccess;
			}
		}
		
		public System.DirectoryServices.DirectoryServicesPermissionEntry Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.DirectoryServicesPermissionEntry ConvertWrapper(IDirectoryServicesPermissionEntryWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDirectoryServicesPermissionEntryWrapper ConvertWrapped(System.DirectoryServices.DirectoryServicesPermissionEntry wrapped)
		{
			return new DirectoryServicesPermissionEntryWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.DirectoryServicesPermissionEntryCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DirectoryServicesPermissionEntryCollectionWrapper : IDirectoryServicesPermissionEntryCollectionWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryServicesPermissionEntryCollection _wrapped;
		
		public DirectoryServicesPermissionEntryCollectionWrapper(System.DirectoryServices.DirectoryServicesPermissionEntryCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IDirectoryServicesPermissionEntryWrapper this[int index]
		{
			get
			{
				return new DirectoryServicesPermissionEntryWrapper(_wrapped[index]);
			}
			set
			{
				_wrapped[index] = value.Wrapped;
			}
		}
		
		public int Capacity
		{
			get
			{
				return _wrapped.Capacity;
			}
			set
			{
				_wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.DirectoryServicesPermissionEntryCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public int Add(IDirectoryServicesPermissionEntryWrapper value)
		{
			return _wrapped.Add(value.Wrapped);
		}
		
		public void AddRange(IDirectoryServicesPermissionEntryWrapper[] value)
		{
			_wrapped.AddRange(System.Array.ConvertAll(value, DirectoryServicesPermissionEntryWrapper.ConvertWrapper));
		}
		
		public void AddRange(IDirectoryServicesPermissionEntryCollectionWrapper value)
		{
			_wrapped.AddRange(value.Wrapped);
		}
		
		public bool Contains(IDirectoryServicesPermissionEntryWrapper value)
		{
			return _wrapped.Contains(value.Wrapped);
		}
		
		public void CopyTo(IDirectoryServicesPermissionEntryWrapper[] array, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(array, DirectoryServicesPermissionEntryWrapper.ConvertWrapper), index);
		}
		
		public int IndexOf(IDirectoryServicesPermissionEntryWrapper value)
		{
			return _wrapped.IndexOf(value.Wrapped);
		}
		
		public void Insert(int index, IDirectoryServicesPermissionEntryWrapper value)
		{
			_wrapped.Insert(index, value.Wrapped);
		}
		
		public void Remove(IDirectoryServicesPermissionEntryWrapper value)
		{
			_wrapped.Remove(value.Wrapped);
		}
		
		public void Clear()
		{
			_wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			_wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.DirectoryServicesPermissionEntryCollection ConvertWrapper(IDirectoryServicesPermissionEntryCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDirectoryServicesPermissionEntryCollectionWrapper ConvertWrapped(System.DirectoryServices.DirectoryServicesPermissionEntryCollection wrapped)
		{
			return new DirectoryServicesPermissionEntryCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.DirectorySynchronization in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DirectorySynchronizationWrapper : IDirectorySynchronizationWrapper
	{
		
		private readonly System.DirectoryServices.DirectorySynchronization _wrapped;
		
		public DirectorySynchronizationWrapper(System.DirectoryServices.DirectorySynchronization wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.DirectorySynchronizationOptions Option
		{
			get
			{
				return _wrapped.Option;
			}
			set
			{
				_wrapped.Option = value;
			}
		}
		
		public System.DirectoryServices.DirectorySynchronization Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public byte[] GetDirectorySynchronizationCookie()
		{
			return _wrapped.GetDirectorySynchronizationCookie();
		}
		
		public void ResetDirectorySynchronizationCookie()
		{
			_wrapped.ResetDirectorySynchronizationCookie();
		}
		
		public void ResetDirectorySynchronizationCookie(byte[] cookie)
		{
			_wrapped.ResetDirectorySynchronizationCookie(cookie);
		}
		
		public IDirectorySynchronizationWrapper Copy()
		{
			return new DirectorySynchronizationWrapper(_wrapped.Copy());
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.DirectorySynchronization ConvertWrapper(IDirectorySynchronizationWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDirectorySynchronizationWrapper ConvertWrapped(System.DirectoryServices.DirectorySynchronization wrapped)
		{
			return new DirectorySynchronizationWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.DirectoryVirtualListView in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DirectoryVirtualListViewWrapper : IDirectoryVirtualListViewWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryVirtualListView _wrapped;
		
		public DirectoryVirtualListViewWrapper(System.DirectoryServices.DirectoryVirtualListView wrapped)
		{
			_wrapped = wrapped;
		}
		
		public int BeforeCount
		{
			get
			{
				return _wrapped.BeforeCount;
			}
			set
			{
				_wrapped.BeforeCount = value;
			}
		}
		
		public int AfterCount
		{
			get
			{
				return _wrapped.AfterCount;
			}
			set
			{
				_wrapped.AfterCount = value;
			}
		}
		
		public int Offset
		{
			get
			{
				return _wrapped.Offset;
			}
			set
			{
				_wrapped.Offset = value;
			}
		}
		
		public int TargetPercentage
		{
			get
			{
				return _wrapped.TargetPercentage;
			}
			set
			{
				_wrapped.TargetPercentage = value;
			}
		}
		
		public string Target
		{
			get
			{
				return _wrapped.Target;
			}
			set
			{
				_wrapped.Target = value;
			}
		}
		
		public int ApproximateTotal
		{
			get
			{
				return _wrapped.ApproximateTotal;
			}
			set
			{
				_wrapped.ApproximateTotal = value;
			}
		}
		
		public IDirectoryVirtualListViewContextWrapper DirectoryVirtualListViewContext
		{
			get
			{
				return new DirectoryVirtualListViewContextWrapper(_wrapped.DirectoryVirtualListViewContext);
			}
			set
			{
				_wrapped.DirectoryVirtualListViewContext = value.Wrapped;
			}
		}
		
		public System.DirectoryServices.DirectoryVirtualListView Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.DirectoryVirtualListView ConvertWrapper(IDirectoryVirtualListViewWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDirectoryVirtualListViewWrapper ConvertWrapped(System.DirectoryServices.DirectoryVirtualListView wrapped)
		{
			return new DirectoryVirtualListViewWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.DirectoryVirtualListViewContext in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DirectoryVirtualListViewContextWrapper : IDirectoryVirtualListViewContextWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryVirtualListViewContext _wrapped;
		
		public DirectoryVirtualListViewContextWrapper(System.DirectoryServices.DirectoryVirtualListViewContext wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.DirectoryVirtualListViewContext Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public IDirectoryVirtualListViewContextWrapper Copy()
		{
			return new DirectoryVirtualListViewContextWrapper(_wrapped.Copy());
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.DirectoryVirtualListViewContext ConvertWrapper(IDirectoryVirtualListViewContextWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDirectoryVirtualListViewContextWrapper ConvertWrapped(System.DirectoryServices.DirectoryVirtualListViewContext wrapped)
		{
			return new DirectoryVirtualListViewContextWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.PropertyCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class PropertyCollectionWrapper : IPropertyCollectionWrapper
	{
		
		private readonly System.DirectoryServices.PropertyCollection _wrapped;
		
		public PropertyCollectionWrapper(System.DirectoryServices.PropertyCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IPropertyValueCollectionWrapper this[string propertyName]
		{
			get
			{
				return new PropertyValueCollectionWrapper(_wrapped[propertyName]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.Collections.ICollection PropertyNames
		{
			get
			{
				return _wrapped.PropertyNames;
			}
		}
		
		public System.Collections.ICollection Values
		{
			get
			{
				return _wrapped.Values;
			}
		}
		
		public System.DirectoryServices.PropertyCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(string propertyName)
		{
			return _wrapped.Contains(propertyName);
		}
		
		public void CopyTo(IPropertyValueCollectionWrapper[] array, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(array, PropertyValueCollectionWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IDictionaryEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.PropertyCollection ConvertWrapper(IPropertyCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IPropertyCollectionWrapper ConvertWrapped(System.DirectoryServices.PropertyCollection wrapped)
		{
			return new PropertyCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.PropertyValueCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class PropertyValueCollectionWrapper : IPropertyValueCollectionWrapper
	{
		
		private readonly System.DirectoryServices.PropertyValueCollection _wrapped;
		
		public PropertyValueCollectionWrapper(System.DirectoryServices.PropertyValueCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public object this[int index]
		{
			get
			{
				return _wrapped[index];
			}
			set
			{
				_wrapped[index] = value;
			}
		}
		
		public string PropertyName
		{
			get
			{
				return _wrapped.PropertyName;
			}
		}
		
		public object Value
		{
			get
			{
				return _wrapped.Value;
			}
			set
			{
				_wrapped.Value = value;
			}
		}
		
		public int Capacity
		{
			get
			{
				return _wrapped.Capacity;
			}
			set
			{
				_wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.PropertyValueCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public int Add(object value)
		{
			return _wrapped.Add(value);
		}
		
		public void AddRange(object[] value)
		{
			_wrapped.AddRange(value);
		}
		
		public void AddRange(IPropertyValueCollectionWrapper value)
		{
			_wrapped.AddRange(value.Wrapped);
		}
		
		public bool Contains(object value)
		{
			return _wrapped.Contains(value);
		}
		
		public void CopyTo(object[] array, int index)
		{
			_wrapped.CopyTo(array, index);
		}
		
		public int IndexOf(object value)
		{
			return _wrapped.IndexOf(value);
		}
		
		public void Insert(int index, object value)
		{
			_wrapped.Insert(index, value);
		}
		
		public void Remove(object value)
		{
			_wrapped.Remove(value);
		}
		
		public void Clear()
		{
			_wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			_wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.PropertyValueCollection ConvertWrapper(IPropertyValueCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IPropertyValueCollectionWrapper ConvertWrapped(System.DirectoryServices.PropertyValueCollection wrapped)
		{
			return new PropertyValueCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ResultPropertyCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ResultPropertyCollectionWrapper : IResultPropertyCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ResultPropertyCollection _wrapped;
		
		public ResultPropertyCollectionWrapper(System.DirectoryServices.ResultPropertyCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IResultPropertyValueCollectionWrapper this[string name]
		{
			get
			{
				return new ResultPropertyValueCollectionWrapper(_wrapped[name]);
			}
		}
		
		public System.Collections.ICollection PropertyNames
		{
			get
			{
				return _wrapped.PropertyNames;
			}
		}
		
		public System.Collections.ICollection Values
		{
			get
			{
				return _wrapped.Values;
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ResultPropertyCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(string propertyName)
		{
			return _wrapped.Contains(propertyName);
		}
		
		public void CopyTo(IResultPropertyValueCollectionWrapper[] array, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(array, ResultPropertyValueCollectionWrapper.ConvertWrapper), index);
		}
		
		public void CopyTo(System.Array array, int index)
		{
			_wrapped.CopyTo(array, index);
		}
		
		public void Clear()
		{
			_wrapped.Clear();
		}
		
		public System.Collections.IDictionaryEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ResultPropertyCollection ConvertWrapper(IResultPropertyCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IResultPropertyCollectionWrapper ConvertWrapped(System.DirectoryServices.ResultPropertyCollection wrapped)
		{
			return new ResultPropertyCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ResultPropertyValueCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ResultPropertyValueCollectionWrapper : IResultPropertyValueCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ResultPropertyValueCollection _wrapped;
		
		public ResultPropertyValueCollectionWrapper(System.DirectoryServices.ResultPropertyValueCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public object this[int index]
		{
			get
			{
				return _wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ResultPropertyValueCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(object value)
		{
			return _wrapped.Contains(value);
		}
		
		public int IndexOf(object value)
		{
			return _wrapped.IndexOf(value);
		}
		
		public void CopyTo(object[] values, int index)
		{
			_wrapped.CopyTo(values, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ResultPropertyValueCollection ConvertWrapper(IResultPropertyValueCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IResultPropertyValueCollectionWrapper ConvertWrapped(System.DirectoryServices.ResultPropertyValueCollection wrapped)
		{
			return new ResultPropertyValueCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.SchemaNameCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class SchemaNameCollectionWrapper : ISchemaNameCollectionWrapper
	{
		
		private readonly System.DirectoryServices.SchemaNameCollection _wrapped;
		
		public SchemaNameCollectionWrapper(System.DirectoryServices.SchemaNameCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string this[int index]
		{
			get
			{
				return _wrapped[index];
			}
			set
			{
				_wrapped[index] = value;
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.SchemaNameCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public int Add(string value)
		{
			return _wrapped.Add(value);
		}
		
		public void AddRange(string[] value)
		{
			_wrapped.AddRange(value);
		}
		
		public void AddRange(ISchemaNameCollectionWrapper value)
		{
			_wrapped.AddRange(value.Wrapped);
		}
		
		public void Clear()
		{
			_wrapped.Clear();
		}
		
		public bool Contains(string value)
		{
			return _wrapped.Contains(value);
		}
		
		public void CopyTo(string[] stringArray, int index)
		{
			_wrapped.CopyTo(stringArray, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public int IndexOf(string value)
		{
			return _wrapped.IndexOf(value);
		}
		
		public void Insert(int index, string value)
		{
			_wrapped.Insert(index, value);
		}
		
		public void Remove(string value)
		{
			_wrapped.Remove(value);
		}
		
		public void RemoveAt(int index)
		{
			_wrapped.RemoveAt(index);
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.SchemaNameCollection ConvertWrapper(ISchemaNameCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static ISchemaNameCollectionWrapper ConvertWrapped(System.DirectoryServices.SchemaNameCollection wrapped)
		{
			return new SchemaNameCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.SearchResult in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class SearchResultWrapper : ISearchResultWrapper
	{
		
		private readonly System.DirectoryServices.SearchResult _wrapped;
		
		public SearchResultWrapper(System.DirectoryServices.SearchResult wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Path
		{
			get
			{
				return _wrapped.Path;
			}
		}
		
		public IResultPropertyCollectionWrapper Properties
		{
			get
			{
				return new ResultPropertyCollectionWrapper(_wrapped.Properties);
			}
		}
		
		public System.DirectoryServices.SearchResult Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.SearchResult ConvertWrapper(ISearchResultWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static ISearchResultWrapper ConvertWrapped(System.DirectoryServices.SearchResult wrapped)
		{
			return new SearchResultWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.SearchResultCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class SearchResultCollectionWrapper : ISearchResultCollectionWrapper
	{
		
		private readonly System.DirectoryServices.SearchResultCollection _wrapped;
		
		public SearchResultCollectionWrapper(System.DirectoryServices.SearchResultCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public ISearchResultWrapper this[int index]
		{
			get
			{
				return new SearchResultWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.IntPtr Handle
		{
			get
			{
				return _wrapped.Handle;
			}
		}
		
		public string[] PropertiesLoaded
		{
			get
			{
				return _wrapped.PropertiesLoaded;
			}
		}
		
		public System.DirectoryServices.SearchResultCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public bool Contains(ISearchResultWrapper result)
		{
			return _wrapped.Contains(result.Wrapped);
		}
		
		public void CopyTo(ISearchResultWrapper[] results, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(results, SearchResultWrapper.ConvertWrapper), index);
		}
		
		public int IndexOf(ISearchResultWrapper result)
		{
			return _wrapped.IndexOf(result.Wrapped);
		}
		
		public object GetLifetimeService()
		{
			return _wrapped.GetLifetimeService();
		}
		
		public object InitializeLifetimeService()
		{
			return _wrapped.InitializeLifetimeService();
		}
		
		public System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType)
		{
			return _wrapped.CreateObjRef(requestedType);
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.SearchResultCollection ConvertWrapper(ISearchResultCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static ISearchResultCollectionWrapper ConvertWrapped(System.DirectoryServices.SearchResultCollection wrapped)
		{
			return new SearchResultCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.SortOption in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class SortOptionWrapper : ISortOptionWrapper
	{
		
		private readonly System.DirectoryServices.SortOption _wrapped;
		
		public SortOptionWrapper(System.DirectoryServices.SortOption wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string PropertyName
		{
			get
			{
				return _wrapped.PropertyName;
			}
			set
			{
				_wrapped.PropertyName = value;
			}
		}
		
		public System.DirectoryServices.SortDirection Direction
		{
			get
			{
				return _wrapped.Direction;
			}
			set
			{
				_wrapped.Direction = value;
			}
		}
		
		public System.DirectoryServices.SortOption Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.SortOption ConvertWrapper(ISortOptionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static ISortOptionWrapper ConvertWrapped(System.DirectoryServices.SortOption wrapped)
		{
			return new SortOptionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.DirectoryServicesCOMException in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DirectoryServicesCOMExceptionWrapper : IDirectoryServicesCOMExceptionWrapper
	{
		
		private readonly System.DirectoryServices.DirectoryServicesCOMException _wrapped;
		
		public DirectoryServicesCOMExceptionWrapper(System.DirectoryServices.DirectoryServicesCOMException wrapped)
		{
			_wrapped = wrapped;
		}
		
		public int ExtendedError
		{
			get
			{
				return _wrapped.ExtendedError;
			}
		}
		
		public string ExtendedErrorMessage
		{
			get
			{
				return _wrapped.ExtendedErrorMessage;
			}
		}
		
		public int ErrorCode
		{
			get
			{
				return _wrapped.ErrorCode;
			}
		}
		
		public string Message
		{
			get
			{
				return _wrapped.Message;
			}
		}
		
		public System.Collections.IDictionary Data
		{
			get
			{
				return _wrapped.Data;
			}
		}
		
		public System.Exception InnerException
		{
			get
			{
				return _wrapped.InnerException;
			}
		}
		
		public System.Reflection.MethodBase TargetSite
		{
			get
			{
				return _wrapped.TargetSite;
			}
		}
		
		public string StackTrace
		{
			get
			{
				return _wrapped.StackTrace;
			}
		}
		
		public string HelpLink
		{
			get
			{
				return _wrapped.HelpLink;
			}
			set
			{
				_wrapped.HelpLink = value;
			}
		}
		
		public string Source
		{
			get
			{
				return _wrapped.Source;
			}
			set
			{
				_wrapped.Source = value;
			}
		}
		
		public int HResult
		{
			get
			{
				return _wrapped.HResult;
			}
		}
		
		public System.DirectoryServices.DirectoryServicesCOMException Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
		{
			_wrapped.GetObjectData(serializationInfo, streamingContext);
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public System.Exception GetBaseException()
		{
			return _wrapped.GetBaseException();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.DirectoryServicesCOMException ConvertWrapper(IDirectoryServicesCOMExceptionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDirectoryServicesCOMExceptionWrapper ConvertWrapped(System.DirectoryServices.DirectoryServicesCOMException wrapped)
		{
			return new DirectoryServicesCOMExceptionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectoryReplicationMetadataWrapper : IActiveDirectoryReplicationMetadataWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata _wrapped;
		
		public ActiveDirectoryReplicationMetadataWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IAttributeMetadataWrapper this[string name]
		{
			get
			{
				return new AttributeMetadataWrapper(_wrapped[name]);
			}
		}
		
		public IReadOnlyStringCollectionWrapper AttributeNames
		{
			get
			{
				return new ReadOnlyStringCollectionWrapper(_wrapped.AttributeNames);
			}
		}
		
		public IAttributeMetadataCollectionWrapper Values
		{
			get
			{
				return new AttributeMetadataCollectionWrapper(_wrapped.Values);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(string attributeName)
		{
			return _wrapped.Contains(attributeName);
		}
		
		public void CopyTo(IAttributeMetadataWrapper[] array, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(array, AttributeMetadataWrapper.ConvertWrapper), index);
		}
		
		public void CopyTo(System.Array array, int index)
		{
			_wrapped.CopyTo(array, index);
		}
		
		public void Clear()
		{
			_wrapped.Clear();
		}
		
		public System.Collections.IDictionaryEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata ConvertWrapper(IActiveDirectoryReplicationMetadataWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectoryReplicationMetadataWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata wrapped)
		{
			return new ActiveDirectoryReplicationMetadataWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectoryScheduleWrapper : IActiveDirectoryScheduleWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule _wrapped;
		
		public ActiveDirectoryScheduleWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule wrapped)
		{
			_wrapped = wrapped;
		}
		
		public bool[,,] RawSchedule
		{
			get
			{
				return _wrapped.RawSchedule;
			}
			set
			{
				_wrapped.RawSchedule = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void SetSchedule(System.DayOfWeek day, System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute)
		{
			_wrapped.SetSchedule(day, fromHour, fromMinute, toHour, toMinute);
		}
		
		public void SetSchedule(System.DayOfWeek[] days, System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute)
		{
			_wrapped.SetSchedule(days, fromHour, fromMinute, toHour, toMinute);
		}
		
		public void SetDailySchedule(System.DirectoryServices.ActiveDirectory.HourOfDay fromHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour fromMinute, System.DirectoryServices.ActiveDirectory.HourOfDay toHour, System.DirectoryServices.ActiveDirectory.MinuteOfHour toMinute)
		{
			_wrapped.SetDailySchedule(fromHour, fromMinute, toHour, toMinute);
		}
		
		public void ResetSchedule()
		{
			_wrapped.ResetSchedule();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule ConvertWrapper(IActiveDirectoryScheduleWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectoryScheduleWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule wrapped)
		{
			return new ActiveDirectoryScheduleWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectorySchemaWrapper : IActiveDirectorySchemaWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema _wrapped;
		
		public ActiveDirectorySchemaWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer SchemaRoleOwner
		{
			get
			{
				return _wrapped.SchemaRoleOwner;
			}
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void RefreshSchema()
		{
			_wrapped.RefreshSchema();
		}
		
		public IActiveDirectorySchemaClassWrapper FindClass(string ldapDisplayName)
		{
			return new ActiveDirectorySchemaClassWrapper(_wrapped.FindClass(ldapDisplayName));
		}
		
		public IActiveDirectorySchemaClassWrapper FindDefunctClass(string commonName)
		{
			return new ActiveDirectorySchemaClassWrapper(_wrapped.FindDefunctClass(commonName));
		}
		
		public IReadOnlyActiveDirectorySchemaClassCollectionWrapper FindAllClasses()
		{
			return new ReadOnlyActiveDirectorySchemaClassCollectionWrapper(_wrapped.FindAllClasses());
		}
		
		public IReadOnlyActiveDirectorySchemaClassCollectionWrapper FindAllClasses(System.DirectoryServices.ActiveDirectory.SchemaClassType type)
		{
			return new ReadOnlyActiveDirectorySchemaClassCollectionWrapper(_wrapped.FindAllClasses(type));
		}
		
		public IReadOnlyActiveDirectorySchemaClassCollectionWrapper FindAllDefunctClasses()
		{
			return new ReadOnlyActiveDirectorySchemaClassCollectionWrapper(_wrapped.FindAllDefunctClasses());
		}
		
		public IActiveDirectorySchemaPropertyWrapper FindProperty(string ldapDisplayName)
		{
			return new ActiveDirectorySchemaPropertyWrapper(_wrapped.FindProperty(ldapDisplayName));
		}
		
		public IActiveDirectorySchemaPropertyWrapper FindDefunctProperty(string commonName)
		{
			return new ActiveDirectorySchemaPropertyWrapper(_wrapped.FindDefunctProperty(commonName));
		}
		
		public IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper FindAllProperties()
		{
			return new ReadOnlyActiveDirectorySchemaPropertyCollectionWrapper(_wrapped.FindAllProperties());
		}
		
		public IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper FindAllProperties(System.DirectoryServices.ActiveDirectory.PropertyTypes type)
		{
			return new ReadOnlyActiveDirectorySchemaPropertyCollectionWrapper(_wrapped.FindAllProperties(type));
		}
		
		public IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper FindAllDefunctProperties()
		{
			return new ReadOnlyActiveDirectorySchemaPropertyCollectionWrapper(_wrapped.FindAllDefunctProperties());
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema ConvertWrapper(IActiveDirectorySchemaWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectorySchemaWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema wrapped)
		{
			return new ActiveDirectorySchemaWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectorySchemaClassWrapper : IActiveDirectorySchemaClassWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass _wrapped;
		
		public ActiveDirectorySchemaClassWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public string CommonName
		{
			get
			{
				return _wrapped.CommonName;
			}
			set
			{
				_wrapped.CommonName = value;
			}
		}
		
		public string Oid
		{
			get
			{
				return _wrapped.Oid;
			}
			set
			{
				_wrapped.Oid = value;
			}
		}
		
		public string Description
		{
			get
			{
				return _wrapped.Description;
			}
			set
			{
				_wrapped.Description = value;
			}
		}
		
		public bool IsDefunct
		{
			get
			{
				return _wrapped.IsDefunct;
			}
			set
			{
				_wrapped.IsDefunct = value;
			}
		}
		
		public IActiveDirectorySchemaClassCollectionWrapper PossibleSuperiors
		{
			get
			{
				return new ActiveDirectorySchemaClassCollectionWrapper(_wrapped.PossibleSuperiors);
			}
		}
		
		public IReadOnlyActiveDirectorySchemaClassCollectionWrapper PossibleInferiors
		{
			get
			{
				return new ReadOnlyActiveDirectorySchemaClassCollectionWrapper(_wrapped.PossibleInferiors);
			}
		}
		
		public IActiveDirectorySchemaPropertyCollectionWrapper MandatoryProperties
		{
			get
			{
				return new ActiveDirectorySchemaPropertyCollectionWrapper(_wrapped.MandatoryProperties);
			}
		}
		
		public IActiveDirectorySchemaPropertyCollectionWrapper OptionalProperties
		{
			get
			{
				return new ActiveDirectorySchemaPropertyCollectionWrapper(_wrapped.OptionalProperties);
			}
		}
		
		public IActiveDirectorySchemaClassCollectionWrapper AuxiliaryClasses
		{
			get
			{
				return new ActiveDirectorySchemaClassCollectionWrapper(_wrapped.AuxiliaryClasses);
			}
		}
		
		public IActiveDirectorySchemaClassWrapper SubClassOf
		{
			get
			{
				return new ActiveDirectorySchemaClassWrapper(_wrapped.SubClassOf);
			}
			set
			{
				_wrapped.SubClassOf = value.Wrapped;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.SchemaClassType Type
		{
			get
			{
				return _wrapped.Type;
			}
			set
			{
				_wrapped.Type = value;
			}
		}
		
		public System.Guid SchemaGuid
		{
			get
			{
				return _wrapped.SchemaGuid;
			}
			set
			{
				_wrapped.SchemaGuid = value;
			}
		}
		
		public IActiveDirectorySecurityWrapper DefaultObjectSecurityDescriptor
		{
			get
			{
				return new ActiveDirectorySecurityWrapper(_wrapped.DefaultObjectSecurityDescriptor);
			}
			set
			{
				_wrapped.DefaultObjectSecurityDescriptor = value.Wrapped;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper GetAllProperties()
		{
			return new ReadOnlyActiveDirectorySchemaPropertyCollectionWrapper(_wrapped.GetAllProperties());
		}
		
		public void Save()
		{
			_wrapped.Save();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass ConvertWrapper(IActiveDirectorySchemaClassWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectorySchemaClassWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass wrapped)
		{
			return new ActiveDirectorySchemaClassWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectorySchemaClassCollectionWrapper : IActiveDirectorySchemaClassCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection _wrapped;
		
		public ActiveDirectorySchemaClassCollectionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IActiveDirectorySchemaClassWrapper this[int index]
		{
			get
			{
				return new ActiveDirectorySchemaClassWrapper(_wrapped[index]);
			}
			set
			{
				_wrapped[index] = value.Wrapped;
			}
		}
		
		public int Capacity
		{
			get
			{
				return _wrapped.Capacity;
			}
			set
			{
				_wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public int Add(IActiveDirectorySchemaClassWrapper schemaClass)
		{
			return _wrapped.Add(schemaClass.Wrapped);
		}
		
		public void AddRange(IActiveDirectorySchemaClassWrapper[] schemaClasses)
		{
			_wrapped.AddRange(System.Array.ConvertAll(schemaClasses, ActiveDirectorySchemaClassWrapper.ConvertWrapper));
		}
		
		public void AddRange(IActiveDirectorySchemaClassCollectionWrapper schemaClasses)
		{
			_wrapped.AddRange(schemaClasses.Wrapped);
		}
		
		public void AddRange(IReadOnlyActiveDirectorySchemaClassCollectionWrapper schemaClasses)
		{
			_wrapped.AddRange(schemaClasses.Wrapped);
		}
		
		public void Remove(IActiveDirectorySchemaClassWrapper schemaClass)
		{
			_wrapped.Remove(schemaClass.Wrapped);
		}
		
		public void Insert(int index, IActiveDirectorySchemaClassWrapper schemaClass)
		{
			_wrapped.Insert(index, schemaClass.Wrapped);
		}
		
		public bool Contains(IActiveDirectorySchemaClassWrapper schemaClass)
		{
			return _wrapped.Contains(schemaClass.Wrapped);
		}
		
		public void CopyTo(IActiveDirectorySchemaClassWrapper[] schemaClasses, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(schemaClasses, ActiveDirectorySchemaClassWrapper.ConvertWrapper), index);
		}
		
		public int IndexOf(IActiveDirectorySchemaClassWrapper schemaClass)
		{
			return _wrapped.IndexOf(schemaClass.Wrapped);
		}
		
		public void Clear()
		{
			_wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			_wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection ConvertWrapper(IActiveDirectorySchemaClassCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectorySchemaClassCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection wrapped)
		{
			return new ActiveDirectorySchemaClassCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectorySchemaPropertyWrapper : IActiveDirectorySchemaPropertyWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty _wrapped;
		
		public ActiveDirectorySchemaPropertyWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public string CommonName
		{
			get
			{
				return _wrapped.CommonName;
			}
			set
			{
				_wrapped.CommonName = value;
			}
		}
		
		public string Oid
		{
			get
			{
				return _wrapped.Oid;
			}
			set
			{
				_wrapped.Oid = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax Syntax
		{
			get
			{
				return _wrapped.Syntax;
			}
			set
			{
				_wrapped.Syntax = value;
			}
		}
		
		public string Description
		{
			get
			{
				return _wrapped.Description;
			}
			set
			{
				_wrapped.Description = value;
			}
		}
		
		public bool IsSingleValued
		{
			get
			{
				return _wrapped.IsSingleValued;
			}
			set
			{
				_wrapped.IsSingleValued = value;
			}
		}
		
		public bool IsIndexed
		{
			get
			{
				return _wrapped.IsIndexed;
			}
			set
			{
				_wrapped.IsIndexed = value;
			}
		}
		
		public bool IsIndexedOverContainer
		{
			get
			{
				return _wrapped.IsIndexedOverContainer;
			}
			set
			{
				_wrapped.IsIndexedOverContainer = value;
			}
		}
		
		public bool IsInAnr
		{
			get
			{
				return _wrapped.IsInAnr;
			}
			set
			{
				_wrapped.IsInAnr = value;
			}
		}
		
		public bool IsOnTombstonedObject
		{
			get
			{
				return _wrapped.IsOnTombstonedObject;
			}
			set
			{
				_wrapped.IsOnTombstonedObject = value;
			}
		}
		
		public bool IsTupleIndexed
		{
			get
			{
				return _wrapped.IsTupleIndexed;
			}
			set
			{
				_wrapped.IsTupleIndexed = value;
			}
		}
		
		public bool IsInGlobalCatalog
		{
			get
			{
				return _wrapped.IsInGlobalCatalog;
			}
			set
			{
				_wrapped.IsInGlobalCatalog = value;
			}
		}
		
		public System.Int32? RangeLower
		{
			get
			{
				return _wrapped.RangeLower;
			}
			set
			{
				_wrapped.RangeLower = value;
			}
		}
		
		public System.Int32? RangeUpper
		{
			get
			{
				return _wrapped.RangeUpper;
			}
			set
			{
				_wrapped.RangeUpper = value;
			}
		}
		
		public bool IsDefunct
		{
			get
			{
				return _wrapped.IsDefunct;
			}
			set
			{
				_wrapped.IsDefunct = value;
			}
		}
		
		public IActiveDirectorySchemaPropertyWrapper Link
		{
			get
			{
				return new ActiveDirectorySchemaPropertyWrapper(_wrapped.Link);
			}
		}
		
		public System.Int32? LinkId
		{
			get
			{
				return _wrapped.LinkId;
			}
			set
			{
				_wrapped.LinkId = value;
			}
		}
		
		public System.Guid SchemaGuid
		{
			get
			{
				return _wrapped.SchemaGuid;
			}
			set
			{
				_wrapped.SchemaGuid = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public void Save()
		{
			_wrapped.Save();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty ConvertWrapper(IActiveDirectorySchemaPropertyWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectorySchemaPropertyWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty wrapped)
		{
			return new ActiveDirectorySchemaPropertyWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectorySchemaPropertyCollectionWrapper : IActiveDirectorySchemaPropertyCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection _wrapped;
		
		public ActiveDirectorySchemaPropertyCollectionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IActiveDirectorySchemaPropertyWrapper this[int index]
		{
			get
			{
				return new ActiveDirectorySchemaPropertyWrapper(_wrapped[index]);
			}
			set
			{
				_wrapped[index] = value.Wrapped;
			}
		}
		
		public int Capacity
		{
			get
			{
				return _wrapped.Capacity;
			}
			set
			{
				_wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public int Add(IActiveDirectorySchemaPropertyWrapper schemaProperty)
		{
			return _wrapped.Add(schemaProperty.Wrapped);
		}
		
		public void AddRange(IActiveDirectorySchemaPropertyWrapper[] properties)
		{
			_wrapped.AddRange(System.Array.ConvertAll(properties, ActiveDirectorySchemaPropertyWrapper.ConvertWrapper));
		}
		
		public void AddRange(IActiveDirectorySchemaPropertyCollectionWrapper properties)
		{
			_wrapped.AddRange(properties.Wrapped);
		}
		
		public void AddRange(IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper properties)
		{
			_wrapped.AddRange(properties.Wrapped);
		}
		
		public void Remove(IActiveDirectorySchemaPropertyWrapper schemaProperty)
		{
			_wrapped.Remove(schemaProperty.Wrapped);
		}
		
		public void Insert(int index, IActiveDirectorySchemaPropertyWrapper schemaProperty)
		{
			_wrapped.Insert(index, schemaProperty.Wrapped);
		}
		
		public bool Contains(IActiveDirectorySchemaPropertyWrapper schemaProperty)
		{
			return _wrapped.Contains(schemaProperty.Wrapped);
		}
		
		public void CopyTo(IActiveDirectorySchemaPropertyWrapper[] properties, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(properties, ActiveDirectorySchemaPropertyWrapper.ConvertWrapper), index);
		}
		
		public int IndexOf(IActiveDirectorySchemaPropertyWrapper schemaProperty)
		{
			return _wrapped.IndexOf(schemaProperty.Wrapped);
		}
		
		public void Clear()
		{
			_wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			_wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection ConvertWrapper(IActiveDirectorySchemaPropertyCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectorySchemaPropertyCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection wrapped)
		{
			return new ActiveDirectorySchemaPropertyCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectorySite in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectorySiteWrapper : IActiveDirectorySiteWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySite _wrapped;
		
		public ActiveDirectorySiteWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public IDomainCollectionWrapper Domains
		{
			get
			{
				return new DomainCollectionWrapper(_wrapped.Domains);
			}
		}
		
		public IActiveDirectorySubnetCollectionWrapper Subnets
		{
			get
			{
				return new ActiveDirectorySubnetCollectionWrapper(_wrapped.Subnets);
			}
		}
		
		public IReadOnlyDirectoryServerCollectionWrapper Servers
		{
			get
			{
				return new ReadOnlyDirectoryServerCollectionWrapper(_wrapped.Servers);
			}
		}
		
		public IReadOnlySiteCollectionWrapper AdjacentSites
		{
			get
			{
				return new ReadOnlySiteCollectionWrapper(_wrapped.AdjacentSites);
			}
		}
		
		public IReadOnlySiteLinkCollectionWrapper SiteLinks
		{
			get
			{
				return new ReadOnlySiteLinkCollectionWrapper(_wrapped.SiteLinks);
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer InterSiteTopologyGenerator
		{
			get
			{
				return _wrapped.InterSiteTopologyGenerator;
			}
			set
			{
				_wrapped.InterSiteTopologyGenerator = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteOptions Options
		{
			get
			{
				return _wrapped.Options;
			}
			set
			{
				_wrapped.Options = value;
			}
		}
		
		public string Location
		{
			get
			{
				return _wrapped.Location;
			}
			set
			{
				_wrapped.Location = value;
			}
		}
		
		public IReadOnlyDirectoryServerCollectionWrapper BridgeheadServers
		{
			get
			{
				return new ReadOnlyDirectoryServerCollectionWrapper(_wrapped.BridgeheadServers);
			}
		}
		
		public IDirectoryServerCollectionWrapper PreferredSmtpBridgeheadServers
		{
			get
			{
				return new DirectoryServerCollectionWrapper(_wrapped.PreferredSmtpBridgeheadServers);
			}
		}
		
		public IDirectoryServerCollectionWrapper PreferredRpcBridgeheadServers
		{
			get
			{
				return new DirectoryServerCollectionWrapper(_wrapped.PreferredRpcBridgeheadServers);
			}
		}
		
		public IActiveDirectoryScheduleWrapper IntraSiteReplicationSchedule
		{
			get
			{
				return new ActiveDirectoryScheduleWrapper(_wrapped.IntraSiteReplicationSchedule);
			}
			set
			{
				_wrapped.IntraSiteReplicationSchedule = value.Wrapped;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySite Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void Save()
		{
			_wrapped.Save();
		}
		
		public void Delete()
		{
			_wrapped.Delete();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectorySite ConvertWrapper(IActiveDirectorySiteWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectorySiteWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectorySite wrapped)
		{
			return new ActiveDirectorySiteWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectorySiteCollectionWrapper : IActiveDirectorySiteCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection _wrapped;
		
		public ActiveDirectorySiteCollectionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IActiveDirectorySiteWrapper this[int index]
		{
			get
			{
				return new ActiveDirectorySiteWrapper(_wrapped[index]);
			}
			set
			{
				_wrapped[index] = value.Wrapped;
			}
		}
		
		public int Capacity
		{
			get
			{
				return _wrapped.Capacity;
			}
			set
			{
				_wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public int Add(IActiveDirectorySiteWrapper site)
		{
			return _wrapped.Add(site.Wrapped);
		}
		
		public void AddRange(IActiveDirectorySiteWrapper[] sites)
		{
			_wrapped.AddRange(System.Array.ConvertAll(sites, ActiveDirectorySiteWrapper.ConvertWrapper));
		}
		
		public void AddRange(IActiveDirectorySiteCollectionWrapper sites)
		{
			_wrapped.AddRange(sites.Wrapped);
		}
		
		public bool Contains(IActiveDirectorySiteWrapper site)
		{
			return _wrapped.Contains(site.Wrapped);
		}
		
		public void CopyTo(IActiveDirectorySiteWrapper[] array, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(array, ActiveDirectorySiteWrapper.ConvertWrapper), index);
		}
		
		public int IndexOf(IActiveDirectorySiteWrapper site)
		{
			return _wrapped.IndexOf(site.Wrapped);
		}
		
		public void Insert(int index, IActiveDirectorySiteWrapper site)
		{
			_wrapped.Insert(index, site.Wrapped);
		}
		
		public void Remove(IActiveDirectorySiteWrapper site)
		{
			_wrapped.Remove(site.Wrapped);
		}
		
		public void Clear()
		{
			_wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			_wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection ConvertWrapper(IActiveDirectorySiteCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectorySiteCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection wrapped)
		{
			return new ActiveDirectorySiteCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectorySiteLinkWrapper : IActiveDirectorySiteLinkWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink _wrapped;
		
		public ActiveDirectorySiteLinkWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get
			{
				return _wrapped.TransportType;
			}
		}
		
		public IActiveDirectorySiteCollectionWrapper Sites
		{
			get
			{
				return new ActiveDirectorySiteCollectionWrapper(_wrapped.Sites);
			}
		}
		
		public int Cost
		{
			get
			{
				return _wrapped.Cost;
			}
			set
			{
				_wrapped.Cost = value;
			}
		}
		
		public System.TimeSpan ReplicationInterval
		{
			get
			{
				return _wrapped.ReplicationInterval;
			}
			set
			{
				_wrapped.ReplicationInterval = value;
			}
		}
		
		public bool ReciprocalReplicationEnabled
		{
			get
			{
				return _wrapped.ReciprocalReplicationEnabled;
			}
			set
			{
				_wrapped.ReciprocalReplicationEnabled = value;
			}
		}
		
		public bool NotificationEnabled
		{
			get
			{
				return _wrapped.NotificationEnabled;
			}
			set
			{
				_wrapped.NotificationEnabled = value;
			}
		}
		
		public bool DataCompressionEnabled
		{
			get
			{
				return _wrapped.DataCompressionEnabled;
			}
			set
			{
				_wrapped.DataCompressionEnabled = value;
			}
		}
		
		public IActiveDirectoryScheduleWrapper InterSiteReplicationSchedule
		{
			get
			{
				return new ActiveDirectoryScheduleWrapper(_wrapped.InterSiteReplicationSchedule);
			}
			set
			{
				_wrapped.InterSiteReplicationSchedule = value.Wrapped;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void Save()
		{
			_wrapped.Save();
		}
		
		public void Delete()
		{
			_wrapped.Delete();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink ConvertWrapper(IActiveDirectorySiteLinkWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectorySiteLinkWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink wrapped)
		{
			return new ActiveDirectorySiteLinkWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectorySiteLinkBridgeWrapper : IActiveDirectorySiteLinkBridgeWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge _wrapped;
		
		public ActiveDirectorySiteLinkBridgeWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public IActiveDirectorySiteLinkCollectionWrapper SiteLinks
		{
			get
			{
				return new ActiveDirectorySiteLinkCollectionWrapper(_wrapped.SiteLinks);
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get
			{
				return _wrapped.TransportType;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void Save()
		{
			_wrapped.Save();
		}
		
		public void Delete()
		{
			_wrapped.Delete();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge ConvertWrapper(IActiveDirectorySiteLinkBridgeWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectorySiteLinkBridgeWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge wrapped)
		{
			return new ActiveDirectorySiteLinkBridgeWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectorySiteLinkCollectionWrapper : IActiveDirectorySiteLinkCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection _wrapped;
		
		public ActiveDirectorySiteLinkCollectionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IActiveDirectorySiteLinkWrapper this[int index]
		{
			get
			{
				return new ActiveDirectorySiteLinkWrapper(_wrapped[index]);
			}
			set
			{
				_wrapped[index] = value.Wrapped;
			}
		}
		
		public int Capacity
		{
			get
			{
				return _wrapped.Capacity;
			}
			set
			{
				_wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public int Add(IActiveDirectorySiteLinkWrapper link)
		{
			return _wrapped.Add(link.Wrapped);
		}
		
		public void AddRange(IActiveDirectorySiteLinkWrapper[] links)
		{
			_wrapped.AddRange(System.Array.ConvertAll(links, ActiveDirectorySiteLinkWrapper.ConvertWrapper));
		}
		
		public void AddRange(IActiveDirectorySiteLinkCollectionWrapper links)
		{
			_wrapped.AddRange(links.Wrapped);
		}
		
		public bool Contains(IActiveDirectorySiteLinkWrapper link)
		{
			return _wrapped.Contains(link.Wrapped);
		}
		
		public void CopyTo(IActiveDirectorySiteLinkWrapper[] array, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(array, ActiveDirectorySiteLinkWrapper.ConvertWrapper), index);
		}
		
		public int IndexOf(IActiveDirectorySiteLinkWrapper link)
		{
			return _wrapped.IndexOf(link.Wrapped);
		}
		
		public void Insert(int index, IActiveDirectorySiteLinkWrapper link)
		{
			_wrapped.Insert(index, link.Wrapped);
		}
		
		public void Remove(IActiveDirectorySiteLinkWrapper link)
		{
			_wrapped.Remove(link.Wrapped);
		}
		
		public void Clear()
		{
			_wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			_wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection ConvertWrapper(IActiveDirectorySiteLinkCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectorySiteLinkCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection wrapped)
		{
			return new ActiveDirectorySiteLinkCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectorySubnetWrapper : IActiveDirectorySubnetWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet _wrapped;
		
		public ActiveDirectorySubnetWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public IActiveDirectorySiteWrapper Site
		{
			get
			{
				return new ActiveDirectorySiteWrapper(_wrapped.Site);
			}
			set
			{
				_wrapped.Site = value.Wrapped;
			}
		}
		
		public string Location
		{
			get
			{
				return _wrapped.Location;
			}
			set
			{
				_wrapped.Location = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void Save()
		{
			_wrapped.Save();
		}
		
		public void Delete()
		{
			_wrapped.Delete();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet ConvertWrapper(IActiveDirectorySubnetWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectorySubnetWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet wrapped)
		{
			return new ActiveDirectorySubnetWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectorySubnetCollectionWrapper : IActiveDirectorySubnetCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection _wrapped;
		
		public ActiveDirectorySubnetCollectionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IActiveDirectorySubnetWrapper this[int index]
		{
			get
			{
				return new ActiveDirectorySubnetWrapper(_wrapped[index]);
			}
			set
			{
				_wrapped[index] = value.Wrapped;
			}
		}
		
		public int Capacity
		{
			get
			{
				return _wrapped.Capacity;
			}
			set
			{
				_wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public int Add(IActiveDirectorySubnetWrapper subnet)
		{
			return _wrapped.Add(subnet.Wrapped);
		}
		
		public void AddRange(IActiveDirectorySubnetWrapper[] subnets)
		{
			_wrapped.AddRange(System.Array.ConvertAll(subnets, ActiveDirectorySubnetWrapper.ConvertWrapper));
		}
		
		public void AddRange(IActiveDirectorySubnetCollectionWrapper subnets)
		{
			_wrapped.AddRange(subnets.Wrapped);
		}
		
		public bool Contains(IActiveDirectorySubnetWrapper subnet)
		{
			return _wrapped.Contains(subnet.Wrapped);
		}
		
		public void CopyTo(IActiveDirectorySubnetWrapper[] array, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(array, ActiveDirectorySubnetWrapper.ConvertWrapper), index);
		}
		
		public int IndexOf(IActiveDirectorySubnetWrapper subnet)
		{
			return _wrapped.IndexOf(subnet.Wrapped);
		}
		
		public void Insert(int index, IActiveDirectorySubnetWrapper subnet)
		{
			_wrapped.Insert(index, subnet.Wrapped);
		}
		
		public void Remove(IActiveDirectorySubnetWrapper subnet)
		{
			_wrapped.Remove(subnet.Wrapped);
		}
		
		public void Clear()
		{
			_wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			_wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection ConvertWrapper(IActiveDirectorySubnetCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectorySubnetCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection wrapped)
		{
			return new ActiveDirectorySubnetCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.AdamInstance in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class AdamInstanceWrapper : IAdamInstanceWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.AdamInstance _wrapped;
		
		public AdamInstanceWrapper(System.DirectoryServices.ActiveDirectory.AdamInstance wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IConfigurationSetWrapper ConfigurationSet
		{
			get
			{
				return new ConfigurationSetWrapper(_wrapped.ConfigurationSet);
			}
		}
		
		public string HostName
		{
			get
			{
				return _wrapped.HostName;
			}
		}
		
		public int LdapPort
		{
			get
			{
				return _wrapped.LdapPort;
			}
		}
		
		public int SslPort
		{
			get
			{
				return _wrapped.SslPort;
			}
		}
		
		public IAdamRoleCollectionWrapper Roles
		{
			get
			{
				return new AdamRoleCollectionWrapper(_wrapped.Roles);
			}
		}
		
		public string DefaultPartition
		{
			get
			{
				return _wrapped.DefaultPartition;
			}
			set
			{
				_wrapped.DefaultPartition = value;
			}
		}
		
		public string IPAddress
		{
			get
			{
				return _wrapped.IPAddress;
			}
		}
		
		public string SiteName
		{
			get
			{
				return _wrapped.SiteName;
			}
		}
		
		public ISyncUpdateCallbackWrapper SyncFromAllServersCallback
		{
			get
			{
				return new SyncUpdateCallbackWrapper(_wrapped.SyncFromAllServersCallback);
			}
			set
			{
				_wrapped.SyncFromAllServersCallback = value.Wrapped;
			}
		}
		
		public IReplicationConnectionCollectionWrapper InboundConnections
		{
			get
			{
				return new ReplicationConnectionCollectionWrapper(_wrapped.InboundConnections);
			}
		}
		
		public IReplicationConnectionCollectionWrapper OutboundConnections
		{
			get
			{
				return new ReplicationConnectionCollectionWrapper(_wrapped.OutboundConnections);
			}
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public IReadOnlyStringCollectionWrapper Partitions
		{
			get
			{
				return new ReadOnlyStringCollectionWrapper(_wrapped.Partitions);
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamInstance Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void TransferRoleOwnership(System.DirectoryServices.ActiveDirectory.AdamRole role)
		{
			_wrapped.TransferRoleOwnership(role);
		}
		
		public void SeizeRoleOwnership(System.DirectoryServices.ActiveDirectory.AdamRole role)
		{
			_wrapped.SeizeRoleOwnership(role);
		}
		
		public void CheckReplicationConsistency()
		{
			_wrapped.CheckReplicationConsistency();
		}
		
		public IReplicationCursorCollectionWrapper GetReplicationCursors(string partition)
		{
			return new ReplicationCursorCollectionWrapper(_wrapped.GetReplicationCursors(partition));
		}
		
		public IReplicationOperationInformationWrapper GetReplicationOperationInformation()
		{
			return new ReplicationOperationInformationWrapper(_wrapped.GetReplicationOperationInformation());
		}
		
		public IReplicationNeighborCollectionWrapper GetReplicationNeighbors(string partition)
		{
			return new ReplicationNeighborCollectionWrapper(_wrapped.GetReplicationNeighbors(partition));
		}
		
		public IReplicationNeighborCollectionWrapper GetAllReplicationNeighbors()
		{
			return new ReplicationNeighborCollectionWrapper(_wrapped.GetAllReplicationNeighbors());
		}
		
		public IReplicationFailureCollectionWrapper GetReplicationConnectionFailures()
		{
			return new ReplicationFailureCollectionWrapper(_wrapped.GetReplicationConnectionFailures());
		}
		
		public IActiveDirectoryReplicationMetadataWrapper GetReplicationMetadata(string objectPath)
		{
			return new ActiveDirectoryReplicationMetadataWrapper(_wrapped.GetReplicationMetadata(objectPath));
		}
		
		public void SyncReplicaFromServer(string partition, string sourceServer)
		{
			_wrapped.SyncReplicaFromServer(partition, sourceServer);
		}
		
		public void TriggerSyncReplicaFromNeighbors(string partition)
		{
			_wrapped.TriggerSyncReplicaFromNeighbors(partition);
		}
		
		public void SyncReplicaFromAllServers(string partition, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions options)
		{
			_wrapped.SyncReplicaFromAllServers(partition, options);
		}
		
		public void Save()
		{
			_wrapped.Save();
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public void MoveToAnotherSite(string siteName)
		{
			_wrapped.MoveToAnotherSite(siteName);
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.AdamInstance ConvertWrapper(IAdamInstanceWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IAdamInstanceWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.AdamInstance wrapped)
		{
			return new AdamInstanceWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.AdamInstanceCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class AdamInstanceCollectionWrapper : IAdamInstanceCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.AdamInstanceCollection _wrapped;
		
		public AdamInstanceCollectionWrapper(System.DirectoryServices.ActiveDirectory.AdamInstanceCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IAdamInstanceWrapper this[int index]
		{
			get
			{
				return new AdamInstanceWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamInstanceCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IAdamInstanceWrapper adamInstance)
		{
			return _wrapped.Contains(adamInstance.Wrapped);
		}
		
		public int IndexOf(IAdamInstanceWrapper adamInstance)
		{
			return _wrapped.IndexOf(adamInstance.Wrapped);
		}
		
		public void CopyTo(IAdamInstanceWrapper[] adamInstances, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(adamInstances, AdamInstanceWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.AdamInstanceCollection ConvertWrapper(IAdamInstanceCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IAdamInstanceCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.AdamInstanceCollection wrapped)
		{
			return new AdamInstanceCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ApplicationPartition in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ApplicationPartitionWrapper : IApplicationPartitionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ApplicationPartition _wrapped;
		
		public ApplicationPartitionWrapper(System.DirectoryServices.ActiveDirectory.ApplicationPartition wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IDirectoryServerCollectionWrapper DirectoryServers
		{
			get
			{
				return new DirectoryServerCollectionWrapper(_wrapped.DirectoryServers);
			}
		}
		
		public string SecurityReferenceDomain
		{
			get
			{
				return _wrapped.SecurityReferenceDomain;
			}
			set
			{
				_wrapped.SecurityReferenceDomain = value;
			}
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ApplicationPartition Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer()
		{
			return _wrapped.FindDirectoryServer();
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer(string siteName)
		{
			return _wrapped.FindDirectoryServer(siteName);
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer(bool forceRediscovery)
		{
			return _wrapped.FindDirectoryServer(forceRediscovery);
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer FindDirectoryServer(string siteName, bool forceRediscovery)
		{
			return _wrapped.FindDirectoryServer(siteName, forceRediscovery);
		}
		
		public IReadOnlyDirectoryServerCollectionWrapper FindAllDirectoryServers()
		{
			return new ReadOnlyDirectoryServerCollectionWrapper(_wrapped.FindAllDirectoryServers());
		}
		
		public IReadOnlyDirectoryServerCollectionWrapper FindAllDirectoryServers(string siteName)
		{
			return new ReadOnlyDirectoryServerCollectionWrapper(_wrapped.FindAllDirectoryServers(siteName));
		}
		
		public IReadOnlyDirectoryServerCollectionWrapper FindAllDiscoverableDirectoryServers()
		{
			return new ReadOnlyDirectoryServerCollectionWrapper(_wrapped.FindAllDiscoverableDirectoryServers());
		}
		
		public IReadOnlyDirectoryServerCollectionWrapper FindAllDiscoverableDirectoryServers(string siteName)
		{
			return new ReadOnlyDirectoryServerCollectionWrapper(_wrapped.FindAllDiscoverableDirectoryServers(siteName));
		}
		
		public void Delete()
		{
			_wrapped.Delete();
		}
		
		public void Save()
		{
			_wrapped.Save();
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ApplicationPartition ConvertWrapper(IApplicationPartitionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IApplicationPartitionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ApplicationPartition wrapped)
		{
			return new ApplicationPartitionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ApplicationPartitionCollectionWrapper : IApplicationPartitionCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection _wrapped;
		
		public ApplicationPartitionCollectionWrapper(System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IApplicationPartitionWrapper this[int index]
		{
			get
			{
				return new ApplicationPartitionWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IApplicationPartitionWrapper applicationPartition)
		{
			return _wrapped.Contains(applicationPartition.Wrapped);
		}
		
		public int IndexOf(IApplicationPartitionWrapper applicationPartition)
		{
			return _wrapped.IndexOf(applicationPartition.Wrapped);
		}
		
		public void CopyTo(IApplicationPartitionWrapper[] applicationPartitions, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(applicationPartitions, ApplicationPartitionWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection ConvertWrapper(IApplicationPartitionCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IApplicationPartitionCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection wrapped)
		{
			return new ApplicationPartitionCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.AttributeMetadata in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class AttributeMetadataWrapper : IAttributeMetadataWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.AttributeMetadata _wrapped;
		
		public AttributeMetadataWrapper(System.DirectoryServices.ActiveDirectory.AttributeMetadata wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public int Version
		{
			get
			{
				return _wrapped.Version;
			}
		}
		
		public System.DateTime LastOriginatingChangeTime
		{
			get
			{
				return _wrapped.LastOriginatingChangeTime;
			}
		}
		
		public System.Guid LastOriginatingInvocationId
		{
			get
			{
				return _wrapped.LastOriginatingInvocationId;
			}
		}
		
		public long OriginatingChangeUsn
		{
			get
			{
				return _wrapped.OriginatingChangeUsn;
			}
		}
		
		public long LocalChangeUsn
		{
			get
			{
				return _wrapped.LocalChangeUsn;
			}
		}
		
		public string OriginatingServer
		{
			get
			{
				return _wrapped.OriginatingServer;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AttributeMetadata Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.AttributeMetadata ConvertWrapper(IAttributeMetadataWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IAttributeMetadataWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.AttributeMetadata wrapped)
		{
			return new AttributeMetadataWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class AttributeMetadataCollectionWrapper : IAttributeMetadataCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection _wrapped;
		
		public AttributeMetadataCollectionWrapper(System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IAttributeMetadataWrapper this[int index]
		{
			get
			{
				return new AttributeMetadataWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IAttributeMetadataWrapper metadata)
		{
			return _wrapped.Contains(metadata.Wrapped);
		}
		
		public int IndexOf(IAttributeMetadataWrapper metadata)
		{
			return _wrapped.IndexOf(metadata.Wrapped);
		}
		
		public void CopyTo(IAttributeMetadataWrapper[] metadata, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(metadata, AttributeMetadataWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection ConvertWrapper(IAttributeMetadataCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IAttributeMetadataCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection wrapped)
		{
			return new AttributeMetadataCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ConfigurationSet in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ConfigurationSetWrapper : IConfigurationSetWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ConfigurationSet _wrapped;
		
		public ConfigurationSetWrapper(System.DirectoryServices.ActiveDirectory.ConfigurationSet wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public IReadOnlySiteCollectionWrapper Sites
		{
			get
			{
				return new ReadOnlySiteCollectionWrapper(_wrapped.Sites);
			}
		}
		
		public IAdamInstanceCollectionWrapper AdamInstances
		{
			get
			{
				return new AdamInstanceCollectionWrapper(_wrapped.AdamInstances);
			}
		}
		
		public IApplicationPartitionCollectionWrapper ApplicationPartitions
		{
			get
			{
				return new ApplicationPartitionCollectionWrapper(_wrapped.ApplicationPartitions);
			}
		}
		
		public IActiveDirectorySchemaWrapper Schema
		{
			get
			{
				return new ActiveDirectorySchemaWrapper(_wrapped.Schema);
			}
		}
		
		public IAdamInstanceWrapper SchemaRoleOwner
		{
			get
			{
				return new AdamInstanceWrapper(_wrapped.SchemaRoleOwner);
			}
		}
		
		public IAdamInstanceWrapper NamingRoleOwner
		{
			get
			{
				return new AdamInstanceWrapper(_wrapped.NamingRoleOwner);
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ConfigurationSet Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public IAdamInstanceWrapper FindAdamInstance()
		{
			return new AdamInstanceWrapper(_wrapped.FindAdamInstance());
		}
		
		public IAdamInstanceWrapper FindAdamInstance(string partitionName)
		{
			return new AdamInstanceWrapper(_wrapped.FindAdamInstance(partitionName));
		}
		
		public IAdamInstanceWrapper FindAdamInstance(string partitionName, string siteName)
		{
			return new AdamInstanceWrapper(_wrapped.FindAdamInstance(partitionName, siteName));
		}
		
		public IAdamInstanceCollectionWrapper FindAllAdamInstances()
		{
			return new AdamInstanceCollectionWrapper(_wrapped.FindAllAdamInstances());
		}
		
		public IAdamInstanceCollectionWrapper FindAllAdamInstances(string partitionName)
		{
			return new AdamInstanceCollectionWrapper(_wrapped.FindAllAdamInstances(partitionName));
		}
		
		public IAdamInstanceCollectionWrapper FindAllAdamInstances(string partitionName, string siteName)
		{
			return new AdamInstanceCollectionWrapper(_wrapped.FindAllAdamInstances(partitionName, siteName));
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel GetSecurityLevel()
		{
			return _wrapped.GetSecurityLevel();
		}
		
		public void SetSecurityLevel(System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel securityLevel)
		{
			_wrapped.SetSecurityLevel(securityLevel);
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ConfigurationSet ConvertWrapper(IConfigurationSetWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IConfigurationSetWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ConfigurationSet wrapped)
		{
			return new ConfigurationSetWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.DirectoryContext in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DirectoryContextWrapper : IDirectoryContextWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.DirectoryContext _wrapped;
		
		public DirectoryContextWrapper(System.DirectoryServices.ActiveDirectory.DirectoryContext wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public string UserName
		{
			get
			{
				return _wrapped.UserName;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryContextType ContextType
		{
			get
			{
				return _wrapped.ContextType;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryContext Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.DirectoryContext ConvertWrapper(IDirectoryContextWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDirectoryContextWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.DirectoryContext wrapped)
		{
			return new DirectoryContextWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.DirectoryServerCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DirectoryServerCollectionWrapper : IDirectoryServerCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.DirectoryServerCollection _wrapped;
		
		public DirectoryServerCollectionWrapper(System.DirectoryServices.ActiveDirectory.DirectoryServerCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer this[int index]
		{
			get
			{
				return _wrapped[index];
			}
			set
			{
				_wrapped[index] = value;
			}
		}
		
		public int Capacity
		{
			get
			{
				return _wrapped.Capacity;
			}
			set
			{
				_wrapped.Capacity = value;
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServerCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public int Add(System.DirectoryServices.ActiveDirectory.DirectoryServer server)
		{
			return _wrapped.Add(server);
		}
		
		public void AddRange(System.DirectoryServices.ActiveDirectory.DirectoryServer[] servers)
		{
			_wrapped.AddRange(servers);
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.DirectoryServer server)
		{
			return _wrapped.Contains(server);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.DirectoryServer[] array, int index)
		{
			_wrapped.CopyTo(array, index);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.DirectoryServer server)
		{
			return _wrapped.IndexOf(server);
		}
		
		public void Insert(int index, System.DirectoryServices.ActiveDirectory.DirectoryServer server)
		{
			_wrapped.Insert(index, server);
		}
		
		public void Remove(System.DirectoryServices.ActiveDirectory.DirectoryServer server)
		{
			_wrapped.Remove(server);
		}
		
		public void Clear()
		{
			_wrapped.Clear();
		}
		
		public void RemoveAt(int index)
		{
			_wrapped.RemoveAt(index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.DirectoryServerCollection ConvertWrapper(IDirectoryServerCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDirectoryServerCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.DirectoryServerCollection wrapped)
		{
			return new DirectoryServerCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.Domain in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DomainWrapper : IDomainWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.Domain _wrapped;
		
		public DomainWrapper(System.DirectoryServices.ActiveDirectory.Domain wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IForestWrapper Forest
		{
			get
			{
				return new ForestWrapper(_wrapped.Forest);
			}
		}
		
		public IDomainControllerCollectionWrapper DomainControllers
		{
			get
			{
				return new DomainControllerCollectionWrapper(_wrapped.DomainControllers);
			}
		}
		
		public IDomainCollectionWrapper Children
		{
			get
			{
				return new DomainCollectionWrapper(_wrapped.Children);
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainMode DomainMode
		{
			get
			{
				return _wrapped.DomainMode;
			}
		}
		
		public int DomainModeLevel
		{
			get
			{
				return _wrapped.DomainModeLevel;
			}
		}
		
		public IDomainWrapper Parent
		{
			get
			{
				return new DomainWrapper(_wrapped.Parent);
			}
		}
		
		public IDomainControllerWrapper PdcRoleOwner
		{
			get
			{
				return new DomainControllerWrapper(_wrapped.PdcRoleOwner);
			}
		}
		
		public IDomainControllerWrapper RidRoleOwner
		{
			get
			{
				return new DomainControllerWrapper(_wrapped.RidRoleOwner);
			}
		}
		
		public IDomainControllerWrapper InfrastructureRoleOwner
		{
			get
			{
				return new DomainControllerWrapper(_wrapped.InfrastructureRoleOwner);
			}
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.Domain Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void RaiseDomainFunctionalityLevel(int domainMode)
		{
			_wrapped.RaiseDomainFunctionalityLevel(domainMode);
		}
		
		public void RaiseDomainFunctionality(System.DirectoryServices.ActiveDirectory.DomainMode domainMode)
		{
			_wrapped.RaiseDomainFunctionality(domainMode);
		}
		
		public IDomainControllerWrapper FindDomainController()
		{
			return new DomainControllerWrapper(_wrapped.FindDomainController());
		}
		
		public IDomainControllerWrapper FindDomainController(string siteName)
		{
			return new DomainControllerWrapper(_wrapped.FindDomainController(siteName));
		}
		
		public IDomainControllerWrapper FindDomainController(System.DirectoryServices.ActiveDirectory.LocatorOptions flag)
		{
			return new DomainControllerWrapper(_wrapped.FindDomainController(flag));
		}
		
		public IDomainControllerWrapper FindDomainController(string siteName, System.DirectoryServices.ActiveDirectory.LocatorOptions flag)
		{
			return new DomainControllerWrapper(_wrapped.FindDomainController(siteName, flag));
		}
		
		public IDomainControllerCollectionWrapper FindAllDomainControllers()
		{
			return new DomainControllerCollectionWrapper(_wrapped.FindAllDomainControllers());
		}
		
		public IDomainControllerCollectionWrapper FindAllDomainControllers(string siteName)
		{
			return new DomainControllerCollectionWrapper(_wrapped.FindAllDomainControllers(siteName));
		}
		
		public IDomainControllerCollectionWrapper FindAllDiscoverableDomainControllers()
		{
			return new DomainControllerCollectionWrapper(_wrapped.FindAllDiscoverableDomainControllers());
		}
		
		public IDomainControllerCollectionWrapper FindAllDiscoverableDomainControllers(string siteName)
		{
			return new DomainControllerCollectionWrapper(_wrapped.FindAllDiscoverableDomainControllers(siteName));
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public ITrustRelationshipInformationCollectionWrapper GetAllTrustRelationships()
		{
			return new TrustRelationshipInformationCollectionWrapper(_wrapped.GetAllTrustRelationships());
		}
		
		public ITrustRelationshipInformationWrapper GetTrustRelationship(string targetDomainName)
		{
			return new TrustRelationshipInformationWrapper(_wrapped.GetTrustRelationship(targetDomainName));
		}
		
		public bool GetSelectiveAuthenticationStatus(string targetDomainName)
		{
			return _wrapped.GetSelectiveAuthenticationStatus(targetDomainName);
		}
		
		public void SetSelectiveAuthenticationStatus(string targetDomainName, bool enable)
		{
			_wrapped.SetSelectiveAuthenticationStatus(targetDomainName, enable);
		}
		
		public bool GetSidFilteringStatus(string targetDomainName)
		{
			return _wrapped.GetSidFilteringStatus(targetDomainName);
		}
		
		public void SetSidFilteringStatus(string targetDomainName, bool enable)
		{
			_wrapped.SetSidFilteringStatus(targetDomainName, enable);
		}
		
		public void DeleteLocalSideOfTrustRelationship(string targetDomainName)
		{
			_wrapped.DeleteLocalSideOfTrustRelationship(targetDomainName);
		}
		
		public void DeleteTrustRelationship(IDomainWrapper targetDomain)
		{
			_wrapped.DeleteTrustRelationship(targetDomain.Wrapped);
		}
		
		public void VerifyOutboundTrustRelationship(string targetDomainName)
		{
			_wrapped.VerifyOutboundTrustRelationship(targetDomainName);
		}
		
		public void VerifyTrustRelationship(IDomainWrapper targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection direction)
		{
			_wrapped.VerifyTrustRelationship(targetDomain.Wrapped, direction);
		}
		
		public void CreateLocalSideOfTrustRelationship(string targetDomainName, System.DirectoryServices.ActiveDirectory.TrustDirection direction, string trustPassword)
		{
			_wrapped.CreateLocalSideOfTrustRelationship(targetDomainName, direction, trustPassword);
		}
		
		public void CreateTrustRelationship(IDomainWrapper targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection direction)
		{
			_wrapped.CreateTrustRelationship(targetDomain.Wrapped, direction);
		}
		
		public void UpdateLocalSideOfTrustRelationship(string targetDomainName, string newTrustPassword)
		{
			_wrapped.UpdateLocalSideOfTrustRelationship(targetDomainName, newTrustPassword);
		}
		
		public void UpdateLocalSideOfTrustRelationship(string targetDomainName, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection, string newTrustPassword)
		{
			_wrapped.UpdateLocalSideOfTrustRelationship(targetDomainName, newTrustDirection, newTrustPassword);
		}
		
		public void UpdateTrustRelationship(IDomainWrapper targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection)
		{
			_wrapped.UpdateTrustRelationship(targetDomain.Wrapped, newTrustDirection);
		}
		
		public void RepairTrustRelationship(IDomainWrapper targetDomain)
		{
			_wrapped.RepairTrustRelationship(targetDomain.Wrapped);
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.Domain ConvertWrapper(IDomainWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDomainWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.Domain wrapped)
		{
			return new DomainWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.DomainCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DomainCollectionWrapper : IDomainCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.DomainCollection _wrapped;
		
		public DomainCollectionWrapper(System.DirectoryServices.ActiveDirectory.DomainCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IDomainWrapper this[int index]
		{
			get
			{
				return new DomainWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IDomainWrapper domain)
		{
			return _wrapped.Contains(domain.Wrapped);
		}
		
		public int IndexOf(IDomainWrapper domain)
		{
			return _wrapped.IndexOf(domain.Wrapped);
		}
		
		public void CopyTo(IDomainWrapper[] domains, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(domains, DomainWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.DomainCollection ConvertWrapper(IDomainCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDomainCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.DomainCollection wrapped)
		{
			return new DomainCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.SyncUpdateCallback in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class SyncUpdateCallbackWrapper : ISyncUpdateCallbackWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.SyncUpdateCallback _wrapped;
		
		public SyncUpdateCallbackWrapper(System.DirectoryServices.ActiveDirectory.SyncUpdateCallback wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.Reflection.MethodInfo Method
		{
			get
			{
				return _wrapped.Method;
			}
		}
		
		public object Target
		{
			get
			{
				return _wrapped.Target;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.SyncUpdateCallback Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Invoke(System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent eventType, string targetServer, string sourceServer, ISyncFromAllServersOperationExceptionWrapper exception)
		{
			return _wrapped.Invoke(eventType, targetServer, sourceServer, exception.Wrapped);
		}
		
		public System.IAsyncResult BeginInvoke(System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent eventType, string targetServer, string sourceServer, ISyncFromAllServersOperationExceptionWrapper exception, System.AsyncCallback callback, object @object)
		{
			return _wrapped.BeginInvoke(eventType, targetServer, sourceServer, exception.Wrapped, callback, @object);
		}
		
		public bool EndInvoke(System.IAsyncResult result)
		{
			return _wrapped.EndInvoke(result);
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			_wrapped.GetObjectData(info, context);
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public System.Delegate[] GetInvocationList()
		{
			return _wrapped.GetInvocationList();
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public object DynamicInvoke(object[] args)
		{
			return _wrapped.DynamicInvoke(args);
		}
		
		public object Clone()
		{
			return _wrapped.Clone();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public static System.DirectoryServices.ActiveDirectory.SyncUpdateCallback ConvertWrapper(ISyncUpdateCallbackWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static ISyncUpdateCallbackWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.SyncUpdateCallback wrapped)
		{
			return new SyncUpdateCallbackWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.DomainController in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DomainControllerWrapper : IDomainControllerWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.DomainController _wrapped;
		
		public DomainControllerWrapper(System.DirectoryServices.ActiveDirectory.DomainController wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IForestWrapper Forest
		{
			get
			{
				return new ForestWrapper(_wrapped.Forest);
			}
		}
		
		public System.DateTime CurrentTime
		{
			get
			{
				return _wrapped.CurrentTime;
			}
		}
		
		public long HighestCommittedUsn
		{
			get
			{
				return _wrapped.HighestCommittedUsn;
			}
		}
		
		public string OSVersion
		{
			get
			{
				return _wrapped.OSVersion;
			}
		}
		
		public IActiveDirectoryRoleCollectionWrapper Roles
		{
			get
			{
				return new ActiveDirectoryRoleCollectionWrapper(_wrapped.Roles);
			}
		}
		
		public IDomainWrapper Domain
		{
			get
			{
				return new DomainWrapper(_wrapped.Domain);
			}
		}
		
		public string IPAddress
		{
			get
			{
				return _wrapped.IPAddress;
			}
		}
		
		public string SiteName
		{
			get
			{
				return _wrapped.SiteName;
			}
		}
		
		public ISyncUpdateCallbackWrapper SyncFromAllServersCallback
		{
			get
			{
				return new SyncUpdateCallbackWrapper(_wrapped.SyncFromAllServersCallback);
			}
			set
			{
				_wrapped.SyncFromAllServersCallback = value.Wrapped;
			}
		}
		
		public IReplicationConnectionCollectionWrapper InboundConnections
		{
			get
			{
				return new ReplicationConnectionCollectionWrapper(_wrapped.InboundConnections);
			}
		}
		
		public IReplicationConnectionCollectionWrapper OutboundConnections
		{
			get
			{
				return new ReplicationConnectionCollectionWrapper(_wrapped.OutboundConnections);
			}
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public IReadOnlyStringCollectionWrapper Partitions
		{
			get
			{
				return new ReadOnlyStringCollectionWrapper(_wrapped.Partitions);
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainController Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public IGlobalCatalogWrapper EnableGlobalCatalog()
		{
			return new GlobalCatalogWrapper(_wrapped.EnableGlobalCatalog());
		}
		
		public bool IsGlobalCatalog()
		{
			return _wrapped.IsGlobalCatalog();
		}
		
		public void TransferRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role)
		{
			_wrapped.TransferRoleOwnership(role);
		}
		
		public void SeizeRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role)
		{
			_wrapped.SeizeRoleOwnership(role);
		}
		
		public IDirectorySearcherWrapper GetDirectorySearcher()
		{
			return new DirectorySearcherWrapper(_wrapped.GetDirectorySearcher());
		}
		
		public void CheckReplicationConsistency()
		{
			_wrapped.CheckReplicationConsistency();
		}
		
		public IReplicationCursorCollectionWrapper GetReplicationCursors(string partition)
		{
			return new ReplicationCursorCollectionWrapper(_wrapped.GetReplicationCursors(partition));
		}
		
		public IReplicationOperationInformationWrapper GetReplicationOperationInformation()
		{
			return new ReplicationOperationInformationWrapper(_wrapped.GetReplicationOperationInformation());
		}
		
		public IReplicationNeighborCollectionWrapper GetReplicationNeighbors(string partition)
		{
			return new ReplicationNeighborCollectionWrapper(_wrapped.GetReplicationNeighbors(partition));
		}
		
		public IReplicationNeighborCollectionWrapper GetAllReplicationNeighbors()
		{
			return new ReplicationNeighborCollectionWrapper(_wrapped.GetAllReplicationNeighbors());
		}
		
		public IReplicationFailureCollectionWrapper GetReplicationConnectionFailures()
		{
			return new ReplicationFailureCollectionWrapper(_wrapped.GetReplicationConnectionFailures());
		}
		
		public IActiveDirectoryReplicationMetadataWrapper GetReplicationMetadata(string objectPath)
		{
			return new ActiveDirectoryReplicationMetadataWrapper(_wrapped.GetReplicationMetadata(objectPath));
		}
		
		public void SyncReplicaFromServer(string partition, string sourceServer)
		{
			_wrapped.SyncReplicaFromServer(partition, sourceServer);
		}
		
		public void TriggerSyncReplicaFromNeighbors(string partition)
		{
			_wrapped.TriggerSyncReplicaFromNeighbors(partition);
		}
		
		public void SyncReplicaFromAllServers(string partition, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions options)
		{
			_wrapped.SyncReplicaFromAllServers(partition, options);
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public void MoveToAnotherSite(string siteName)
		{
			_wrapped.MoveToAnotherSite(siteName);
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.DomainController ConvertWrapper(IDomainControllerWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDomainControllerWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.DomainController wrapped)
		{
			return new DomainControllerWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.DomainControllerCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class DomainControllerCollectionWrapper : IDomainControllerCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.DomainControllerCollection _wrapped;
		
		public DomainControllerCollectionWrapper(System.DirectoryServices.ActiveDirectory.DomainControllerCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IDomainControllerWrapper this[int index]
		{
			get
			{
				return new DomainControllerWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainControllerCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IDomainControllerWrapper domainController)
		{
			return _wrapped.Contains(domainController.Wrapped);
		}
		
		public int IndexOf(IDomainControllerWrapper domainController)
		{
			return _wrapped.IndexOf(domainController.Wrapped);
		}
		
		public void CopyTo(IDomainControllerWrapper[] domainControllers, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(domainControllers, DomainControllerWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.DomainControllerCollection ConvertWrapper(IDomainControllerCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IDomainControllerCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.DomainControllerCollection wrapped)
		{
			return new DomainControllerCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class SyncFromAllServersErrorInformationWrapper : ISyncFromAllServersErrorInformationWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation _wrapped;
		
		public SyncFromAllServersErrorInformationWrapper(System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorCategory ErrorCategory
		{
			get
			{
				return _wrapped.ErrorCategory;
			}
		}
		
		public int ErrorCode
		{
			get
			{
				return _wrapped.ErrorCode;
			}
		}
		
		public string ErrorMessage
		{
			get
			{
				return _wrapped.ErrorMessage;
			}
		}
		
		public string TargetServer
		{
			get
			{
				return _wrapped.TargetServer;
			}
		}
		
		public string SourceServer
		{
			get
			{
				return _wrapped.SourceServer;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation ConvertWrapper(ISyncFromAllServersErrorInformationWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static ISyncFromAllServersErrorInformationWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation wrapped)
		{
			return new SyncFromAllServersErrorInformationWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectoryObjectNotFoundExceptionWrapper : IActiveDirectoryObjectNotFoundExceptionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException _wrapped;
		
		public ActiveDirectoryObjectNotFoundExceptionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.Type Type
		{
			get
			{
				return _wrapped.Type;
			}
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public string Message
		{
			get
			{
				return _wrapped.Message;
			}
		}
		
		public System.Collections.IDictionary Data
		{
			get
			{
				return _wrapped.Data;
			}
		}
		
		public System.Exception InnerException
		{
			get
			{
				return _wrapped.InnerException;
			}
		}
		
		public System.Reflection.MethodBase TargetSite
		{
			get
			{
				return _wrapped.TargetSite;
			}
		}
		
		public string StackTrace
		{
			get
			{
				return _wrapped.StackTrace;
			}
		}
		
		public string HelpLink
		{
			get
			{
				return _wrapped.HelpLink;
			}
			set
			{
				_wrapped.HelpLink = value;
			}
		}
		
		public string Source
		{
			get
			{
				return _wrapped.Source;
			}
			set
			{
				_wrapped.Source = value;
			}
		}
		
		public int HResult
		{
			get
			{
				return _wrapped.HResult;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
		{
			_wrapped.GetObjectData(serializationInfo, streamingContext);
		}
		
		public System.Exception GetBaseException()
		{
			return _wrapped.GetBaseException();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException ConvertWrapper(IActiveDirectoryObjectNotFoundExceptionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectoryObjectNotFoundExceptionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException wrapped)
		{
			return new ActiveDirectoryObjectNotFoundExceptionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectoryOperationExceptionWrapper : IActiveDirectoryOperationExceptionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException _wrapped;
		
		public ActiveDirectoryOperationExceptionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException wrapped)
		{
			_wrapped = wrapped;
		}
		
		public int ErrorCode
		{
			get
			{
				return _wrapped.ErrorCode;
			}
		}
		
		public string Message
		{
			get
			{
				return _wrapped.Message;
			}
		}
		
		public System.Collections.IDictionary Data
		{
			get
			{
				return _wrapped.Data;
			}
		}
		
		public System.Exception InnerException
		{
			get
			{
				return _wrapped.InnerException;
			}
		}
		
		public System.Reflection.MethodBase TargetSite
		{
			get
			{
				return _wrapped.TargetSite;
			}
		}
		
		public string StackTrace
		{
			get
			{
				return _wrapped.StackTrace;
			}
		}
		
		public string HelpLink
		{
			get
			{
				return _wrapped.HelpLink;
			}
			set
			{
				_wrapped.HelpLink = value;
			}
		}
		
		public string Source
		{
			get
			{
				return _wrapped.Source;
			}
			set
			{
				_wrapped.Source = value;
			}
		}
		
		public int HResult
		{
			get
			{
				return _wrapped.HResult;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
		{
			_wrapped.GetObjectData(serializationInfo, streamingContext);
		}
		
		public System.Exception GetBaseException()
		{
			return _wrapped.GetBaseException();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException ConvertWrapper(IActiveDirectoryOperationExceptionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectoryOperationExceptionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException wrapped)
		{
			return new ActiveDirectoryOperationExceptionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectoryServerDownExceptionWrapper : IActiveDirectoryServerDownExceptionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException _wrapped;
		
		public ActiveDirectoryServerDownExceptionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException wrapped)
		{
			_wrapped = wrapped;
		}
		
		public int ErrorCode
		{
			get
			{
				return _wrapped.ErrorCode;
			}
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public string Message
		{
			get
			{
				return _wrapped.Message;
			}
		}
		
		public System.Collections.IDictionary Data
		{
			get
			{
				return _wrapped.Data;
			}
		}
		
		public System.Exception InnerException
		{
			get
			{
				return _wrapped.InnerException;
			}
		}
		
		public System.Reflection.MethodBase TargetSite
		{
			get
			{
				return _wrapped.TargetSite;
			}
		}
		
		public string StackTrace
		{
			get
			{
				return _wrapped.StackTrace;
			}
		}
		
		public string HelpLink
		{
			get
			{
				return _wrapped.HelpLink;
			}
			set
			{
				_wrapped.HelpLink = value;
			}
		}
		
		public string Source
		{
			get
			{
				return _wrapped.Source;
			}
			set
			{
				_wrapped.Source = value;
			}
		}
		
		public int HResult
		{
			get
			{
				return _wrapped.HResult;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
		{
			_wrapped.GetObjectData(serializationInfo, streamingContext);
		}
		
		public System.Exception GetBaseException()
		{
			return _wrapped.GetBaseException();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException ConvertWrapper(IActiveDirectoryServerDownExceptionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectoryServerDownExceptionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException wrapped)
		{
			return new ActiveDirectoryServerDownExceptionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectoryObjectExistsExceptionWrapper : IActiveDirectoryObjectExistsExceptionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException _wrapped;
		
		public ActiveDirectoryObjectExistsExceptionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Message
		{
			get
			{
				return _wrapped.Message;
			}
		}
		
		public System.Collections.IDictionary Data
		{
			get
			{
				return _wrapped.Data;
			}
		}
		
		public System.Exception InnerException
		{
			get
			{
				return _wrapped.InnerException;
			}
		}
		
		public System.Reflection.MethodBase TargetSite
		{
			get
			{
				return _wrapped.TargetSite;
			}
		}
		
		public string StackTrace
		{
			get
			{
				return _wrapped.StackTrace;
			}
		}
		
		public string HelpLink
		{
			get
			{
				return _wrapped.HelpLink;
			}
			set
			{
				_wrapped.HelpLink = value;
			}
		}
		
		public string Source
		{
			get
			{
				return _wrapped.Source;
			}
			set
			{
				_wrapped.Source = value;
			}
		}
		
		public int HResult
		{
			get
			{
				return _wrapped.HResult;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public System.Exception GetBaseException()
		{
			return _wrapped.GetBaseException();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			_wrapped.GetObjectData(info, context);
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException ConvertWrapper(IActiveDirectoryObjectExistsExceptionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectoryObjectExistsExceptionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException wrapped)
		{
			return new ActiveDirectoryObjectExistsExceptionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class SyncFromAllServersOperationExceptionWrapper : ISyncFromAllServersOperationExceptionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException _wrapped;
		
		public SyncFromAllServersOperationExceptionWrapper(System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException wrapped)
		{
			_wrapped = wrapped;
		}
		
		public ISyncFromAllServersErrorInformationWrapper[] ErrorInformation
		{
			get
			{
				return System.Array.ConvertAll(_wrapped.ErrorInformation, SyncFromAllServersErrorInformationWrapper.ConvertWrapped);
			}
		}
		
		public int ErrorCode
		{
			get
			{
				return _wrapped.ErrorCode;
			}
		}
		
		public string Message
		{
			get
			{
				return _wrapped.Message;
			}
		}
		
		public System.Collections.IDictionary Data
		{
			get
			{
				return _wrapped.Data;
			}
		}
		
		public System.Exception InnerException
		{
			get
			{
				return _wrapped.InnerException;
			}
		}
		
		public System.Reflection.MethodBase TargetSite
		{
			get
			{
				return _wrapped.TargetSite;
			}
		}
		
		public string StackTrace
		{
			get
			{
				return _wrapped.StackTrace;
			}
		}
		
		public string HelpLink
		{
			get
			{
				return _wrapped.HelpLink;
			}
			set
			{
				_wrapped.HelpLink = value;
			}
		}
		
		public string Source
		{
			get
			{
				return _wrapped.Source;
			}
			set
			{
				_wrapped.Source = value;
			}
		}
		
		public int HResult
		{
			get
			{
				return _wrapped.HResult;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
		{
			_wrapped.GetObjectData(serializationInfo, streamingContext);
		}
		
		public System.Exception GetBaseException()
		{
			return _wrapped.GetBaseException();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException ConvertWrapper(ISyncFromAllServersOperationExceptionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static ISyncFromAllServersOperationExceptionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException wrapped)
		{
			return new SyncFromAllServersOperationExceptionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ForestTrustCollisionExceptionWrapper : IForestTrustCollisionExceptionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException _wrapped;
		
		public ForestTrustCollisionExceptionWrapper(System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IForestTrustRelationshipCollisionCollectionWrapper Collisions
		{
			get
			{
				return new ForestTrustRelationshipCollisionCollectionWrapper(_wrapped.Collisions);
			}
		}
		
		public int ErrorCode
		{
			get
			{
				return _wrapped.ErrorCode;
			}
		}
		
		public string Message
		{
			get
			{
				return _wrapped.Message;
			}
		}
		
		public System.Collections.IDictionary Data
		{
			get
			{
				return _wrapped.Data;
			}
		}
		
		public System.Exception InnerException
		{
			get
			{
				return _wrapped.InnerException;
			}
		}
		
		public System.Reflection.MethodBase TargetSite
		{
			get
			{
				return _wrapped.TargetSite;
			}
		}
		
		public string StackTrace
		{
			get
			{
				return _wrapped.StackTrace;
			}
		}
		
		public string HelpLink
		{
			get
			{
				return _wrapped.HelpLink;
			}
			set
			{
				_wrapped.HelpLink = value;
			}
		}
		
		public string Source
		{
			get
			{
				return _wrapped.Source;
			}
			set
			{
				_wrapped.Source = value;
			}
		}
		
		public int HResult
		{
			get
			{
				return _wrapped.HResult;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
		{
			_wrapped.GetObjectData(serializationInfo, streamingContext);
		}
		
		public System.Exception GetBaseException()
		{
			return _wrapped.GetBaseException();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException ConvertWrapper(IForestTrustCollisionExceptionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IForestTrustCollisionExceptionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException wrapped)
		{
			return new ForestTrustCollisionExceptionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.Forest in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ForestWrapper : IForestWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.Forest _wrapped;
		
		public ForestWrapper(System.DirectoryServices.ActiveDirectory.Forest wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public IReadOnlySiteCollectionWrapper Sites
		{
			get
			{
				return new ReadOnlySiteCollectionWrapper(_wrapped.Sites);
			}
		}
		
		public IDomainCollectionWrapper Domains
		{
			get
			{
				return new DomainCollectionWrapper(_wrapped.Domains);
			}
		}
		
		public IGlobalCatalogCollectionWrapper GlobalCatalogs
		{
			get
			{
				return new GlobalCatalogCollectionWrapper(_wrapped.GlobalCatalogs);
			}
		}
		
		public IApplicationPartitionCollectionWrapper ApplicationPartitions
		{
			get
			{
				return new ApplicationPartitionCollectionWrapper(_wrapped.ApplicationPartitions);
			}
		}
		
		public int ForestModeLevel
		{
			get
			{
				return _wrapped.ForestModeLevel;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestMode ForestMode
		{
			get
			{
				return _wrapped.ForestMode;
			}
		}
		
		public IDomainWrapper RootDomain
		{
			get
			{
				return new DomainWrapper(_wrapped.RootDomain);
			}
		}
		
		public IActiveDirectorySchemaWrapper Schema
		{
			get
			{
				return new ActiveDirectorySchemaWrapper(_wrapped.Schema);
			}
		}
		
		public IDomainControllerWrapper SchemaRoleOwner
		{
			get
			{
				return new DomainControllerWrapper(_wrapped.SchemaRoleOwner);
			}
		}
		
		public IDomainControllerWrapper NamingRoleOwner
		{
			get
			{
				return new DomainControllerWrapper(_wrapped.NamingRoleOwner);
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.Forest Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public void RaiseForestFunctionalityLevel(int forestMode)
		{
			_wrapped.RaiseForestFunctionalityLevel(forestMode);
		}
		
		public void RaiseForestFunctionality(System.DirectoryServices.ActiveDirectory.ForestMode forestMode)
		{
			_wrapped.RaiseForestFunctionality(forestMode);
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public IGlobalCatalogWrapper FindGlobalCatalog()
		{
			return new GlobalCatalogWrapper(_wrapped.FindGlobalCatalog());
		}
		
		public IGlobalCatalogWrapper FindGlobalCatalog(string siteName)
		{
			return new GlobalCatalogWrapper(_wrapped.FindGlobalCatalog(siteName));
		}
		
		public IGlobalCatalogWrapper FindGlobalCatalog(System.DirectoryServices.ActiveDirectory.LocatorOptions flag)
		{
			return new GlobalCatalogWrapper(_wrapped.FindGlobalCatalog(flag));
		}
		
		public IGlobalCatalogWrapper FindGlobalCatalog(string siteName, System.DirectoryServices.ActiveDirectory.LocatorOptions flag)
		{
			return new GlobalCatalogWrapper(_wrapped.FindGlobalCatalog(siteName, flag));
		}
		
		public IGlobalCatalogCollectionWrapper FindAllGlobalCatalogs()
		{
			return new GlobalCatalogCollectionWrapper(_wrapped.FindAllGlobalCatalogs());
		}
		
		public IGlobalCatalogCollectionWrapper FindAllGlobalCatalogs(string siteName)
		{
			return new GlobalCatalogCollectionWrapper(_wrapped.FindAllGlobalCatalogs(siteName));
		}
		
		public IGlobalCatalogCollectionWrapper FindAllDiscoverableGlobalCatalogs()
		{
			return new GlobalCatalogCollectionWrapper(_wrapped.FindAllDiscoverableGlobalCatalogs());
		}
		
		public IGlobalCatalogCollectionWrapper FindAllDiscoverableGlobalCatalogs(string siteName)
		{
			return new GlobalCatalogCollectionWrapper(_wrapped.FindAllDiscoverableGlobalCatalogs(siteName));
		}
		
		public ITrustRelationshipInformationCollectionWrapper GetAllTrustRelationships()
		{
			return new TrustRelationshipInformationCollectionWrapper(_wrapped.GetAllTrustRelationships());
		}
		
		public IForestTrustRelationshipInformationWrapper GetTrustRelationship(string targetForestName)
		{
			return new ForestTrustRelationshipInformationWrapper(_wrapped.GetTrustRelationship(targetForestName));
		}
		
		public bool GetSelectiveAuthenticationStatus(string targetForestName)
		{
			return _wrapped.GetSelectiveAuthenticationStatus(targetForestName);
		}
		
		public void SetSelectiveAuthenticationStatus(string targetForestName, bool enable)
		{
			_wrapped.SetSelectiveAuthenticationStatus(targetForestName, enable);
		}
		
		public bool GetSidFilteringStatus(string targetForestName)
		{
			return _wrapped.GetSidFilteringStatus(targetForestName);
		}
		
		public void SetSidFilteringStatus(string targetForestName, bool enable)
		{
			_wrapped.SetSidFilteringStatus(targetForestName, enable);
		}
		
		public void DeleteLocalSideOfTrustRelationship(string targetForestName)
		{
			_wrapped.DeleteLocalSideOfTrustRelationship(targetForestName);
		}
		
		public void DeleteTrustRelationship(IForestWrapper targetForest)
		{
			_wrapped.DeleteTrustRelationship(targetForest.Wrapped);
		}
		
		public void VerifyOutboundTrustRelationship(string targetForestName)
		{
			_wrapped.VerifyOutboundTrustRelationship(targetForestName);
		}
		
		public void VerifyTrustRelationship(IForestWrapper targetForest, System.DirectoryServices.ActiveDirectory.TrustDirection direction)
		{
			_wrapped.VerifyTrustRelationship(targetForest.Wrapped, direction);
		}
		
		public void CreateLocalSideOfTrustRelationship(string targetForestName, System.DirectoryServices.ActiveDirectory.TrustDirection direction, string trustPassword)
		{
			_wrapped.CreateLocalSideOfTrustRelationship(targetForestName, direction, trustPassword);
		}
		
		public void CreateTrustRelationship(IForestWrapper targetForest, System.DirectoryServices.ActiveDirectory.TrustDirection direction)
		{
			_wrapped.CreateTrustRelationship(targetForest.Wrapped, direction);
		}
		
		public void UpdateLocalSideOfTrustRelationship(string targetForestName, string newTrustPassword)
		{
			_wrapped.UpdateLocalSideOfTrustRelationship(targetForestName, newTrustPassword);
		}
		
		public void UpdateLocalSideOfTrustRelationship(string targetForestName, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection, string newTrustPassword)
		{
			_wrapped.UpdateLocalSideOfTrustRelationship(targetForestName, newTrustDirection, newTrustPassword);
		}
		
		public void UpdateTrustRelationship(IForestWrapper targetForest, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection)
		{
			_wrapped.UpdateTrustRelationship(targetForest.Wrapped, newTrustDirection);
		}
		
		public void RepairTrustRelationship(IForestWrapper targetForest)
		{
			_wrapped.RepairTrustRelationship(targetForest.Wrapped);
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.Forest ConvertWrapper(IForestWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IForestWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.Forest wrapped)
		{
			return new ForestWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ForestTrustRelationshipCollisionWrapper : IForestTrustRelationshipCollisionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision _wrapped;
		
		public ForestTrustRelationshipCollisionWrapper(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustCollisionType CollisionType
		{
			get
			{
				return _wrapped.CollisionType;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TopLevelNameCollisionOptions TopLevelNameCollisionOption
		{
			get
			{
				return _wrapped.TopLevelNameCollisionOption;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.DomainCollisionOptions DomainCollisionOption
		{
			get
			{
				return _wrapped.DomainCollisionOption;
			}
		}
		
		public string CollisionRecord
		{
			get
			{
				return _wrapped.CollisionRecord;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision ConvertWrapper(IForestTrustRelationshipCollisionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IForestTrustRelationshipCollisionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision wrapped)
		{
			return new ForestTrustRelationshipCollisionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ForestTrustRelationshipCollisionCollectionWrapper : IForestTrustRelationshipCollisionCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection _wrapped;
		
		public ForestTrustRelationshipCollisionCollectionWrapper(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IForestTrustRelationshipCollisionWrapper this[int index]
		{
			get
			{
				return new ForestTrustRelationshipCollisionWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IForestTrustRelationshipCollisionWrapper collision)
		{
			return _wrapped.Contains(collision.Wrapped);
		}
		
		public int IndexOf(IForestTrustRelationshipCollisionWrapper collision)
		{
			return _wrapped.IndexOf(collision.Wrapped);
		}
		
		public void CopyTo(IForestTrustRelationshipCollisionWrapper[] array, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(array, ForestTrustRelationshipCollisionWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection ConvertWrapper(IForestTrustRelationshipCollisionCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IForestTrustRelationshipCollisionCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection wrapped)
		{
			return new ForestTrustRelationshipCollisionCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ForestTrustDomainInfoCollectionWrapper : IForestTrustDomainInfoCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection _wrapped;
		
		public ForestTrustDomainInfoCollectionWrapper(System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IForestTrustDomainInformationWrapper this[int index]
		{
			get
			{
				return new ForestTrustDomainInformationWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IForestTrustDomainInformationWrapper information)
		{
			return _wrapped.Contains(information.Wrapped);
		}
		
		public int IndexOf(IForestTrustDomainInformationWrapper information)
		{
			return _wrapped.IndexOf(information.Wrapped);
		}
		
		public void CopyTo(IForestTrustDomainInformationWrapper[] array, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(array, ForestTrustDomainInformationWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection ConvertWrapper(IForestTrustDomainInfoCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IForestTrustDomainInfoCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection wrapped)
		{
			return new ForestTrustDomainInfoCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ForestTrustDomainInformationWrapper : IForestTrustDomainInformationWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation _wrapped;
		
		public ForestTrustDomainInformationWrapper(System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string DnsName
		{
			get
			{
				return _wrapped.DnsName;
			}
		}
		
		public string NetBiosName
		{
			get
			{
				return _wrapped.NetBiosName;
			}
		}
		
		public string DomainSid
		{
			get
			{
				return _wrapped.DomainSid;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustDomainStatus Status
		{
			get
			{
				return _wrapped.Status;
			}
			set
			{
				_wrapped.Status = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation ConvertWrapper(IForestTrustDomainInformationWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IForestTrustDomainInformationWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation wrapped)
		{
			return new ForestTrustDomainInformationWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ForestTrustRelationshipInformationWrapper : IForestTrustRelationshipInformationWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation _wrapped;
		
		public ForestTrustRelationshipInformationWrapper(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation wrapped)
		{
			_wrapped = wrapped;
		}
		
		public ITopLevelNameCollectionWrapper TopLevelNames
		{
			get
			{
				return new TopLevelNameCollectionWrapper(_wrapped.TopLevelNames);
			}
		}
		
		public System.Collections.Specialized.StringCollection ExcludedTopLevelNames
		{
			get
			{
				return _wrapped.ExcludedTopLevelNames;
			}
		}
		
		public IForestTrustDomainInfoCollectionWrapper TrustedDomainInformation
		{
			get
			{
				return new ForestTrustDomainInfoCollectionWrapper(_wrapped.TrustedDomainInformation);
			}
		}
		
		public string SourceName
		{
			get
			{
				return _wrapped.SourceName;
			}
		}
		
		public string TargetName
		{
			get
			{
				return _wrapped.TargetName;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustType TrustType
		{
			get
			{
				return _wrapped.TrustType;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustDirection TrustDirection
		{
			get
			{
				return _wrapped.TrustDirection;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void Save()
		{
			_wrapped.Save();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation ConvertWrapper(IForestTrustRelationshipInformationWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IForestTrustRelationshipInformationWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation wrapped)
		{
			return new ForestTrustRelationshipInformationWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.GlobalCatalog in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class GlobalCatalogWrapper : IGlobalCatalogWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.GlobalCatalog _wrapped;
		
		public GlobalCatalogWrapper(System.DirectoryServices.ActiveDirectory.GlobalCatalog wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IForestWrapper Forest
		{
			get
			{
				return new ForestWrapper(_wrapped.Forest);
			}
		}
		
		public System.DateTime CurrentTime
		{
			get
			{
				return _wrapped.CurrentTime;
			}
		}
		
		public long HighestCommittedUsn
		{
			get
			{
				return _wrapped.HighestCommittedUsn;
			}
		}
		
		public string OSVersion
		{
			get
			{
				return _wrapped.OSVersion;
			}
		}
		
		public IActiveDirectoryRoleCollectionWrapper Roles
		{
			get
			{
				return new ActiveDirectoryRoleCollectionWrapper(_wrapped.Roles);
			}
		}
		
		public IDomainWrapper Domain
		{
			get
			{
				return new DomainWrapper(_wrapped.Domain);
			}
		}
		
		public string IPAddress
		{
			get
			{
				return _wrapped.IPAddress;
			}
		}
		
		public string SiteName
		{
			get
			{
				return _wrapped.SiteName;
			}
		}
		
		public ISyncUpdateCallbackWrapper SyncFromAllServersCallback
		{
			get
			{
				return new SyncUpdateCallbackWrapper(_wrapped.SyncFromAllServersCallback);
			}
			set
			{
				_wrapped.SyncFromAllServersCallback = value.Wrapped;
			}
		}
		
		public IReplicationConnectionCollectionWrapper InboundConnections
		{
			get
			{
				return new ReplicationConnectionCollectionWrapper(_wrapped.InboundConnections);
			}
		}
		
		public IReplicationConnectionCollectionWrapper OutboundConnections
		{
			get
			{
				return new ReplicationConnectionCollectionWrapper(_wrapped.OutboundConnections);
			}
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public IReadOnlyStringCollectionWrapper Partitions
		{
			get
			{
				return new ReadOnlyStringCollectionWrapper(_wrapped.Partitions);
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalog Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public IGlobalCatalogWrapper EnableGlobalCatalog()
		{
			return new GlobalCatalogWrapper(_wrapped.EnableGlobalCatalog());
		}
		
		public IDomainControllerWrapper DisableGlobalCatalog()
		{
			return new DomainControllerWrapper(_wrapped.DisableGlobalCatalog());
		}
		
		public bool IsGlobalCatalog()
		{
			return _wrapped.IsGlobalCatalog();
		}
		
		public IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper FindAllProperties()
		{
			return new ReadOnlyActiveDirectorySchemaPropertyCollectionWrapper(_wrapped.FindAllProperties());
		}
		
		public IDirectorySearcherWrapper GetDirectorySearcher()
		{
			return new DirectorySearcherWrapper(_wrapped.GetDirectorySearcher());
		}
		
		public void TransferRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role)
		{
			_wrapped.TransferRoleOwnership(role);
		}
		
		public void SeizeRoleOwnership(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role)
		{
			_wrapped.SeizeRoleOwnership(role);
		}
		
		public void CheckReplicationConsistency()
		{
			_wrapped.CheckReplicationConsistency();
		}
		
		public IReplicationCursorCollectionWrapper GetReplicationCursors(string partition)
		{
			return new ReplicationCursorCollectionWrapper(_wrapped.GetReplicationCursors(partition));
		}
		
		public IReplicationOperationInformationWrapper GetReplicationOperationInformation()
		{
			return new ReplicationOperationInformationWrapper(_wrapped.GetReplicationOperationInformation());
		}
		
		public IReplicationNeighborCollectionWrapper GetReplicationNeighbors(string partition)
		{
			return new ReplicationNeighborCollectionWrapper(_wrapped.GetReplicationNeighbors(partition));
		}
		
		public IReplicationNeighborCollectionWrapper GetAllReplicationNeighbors()
		{
			return new ReplicationNeighborCollectionWrapper(_wrapped.GetAllReplicationNeighbors());
		}
		
		public IReplicationFailureCollectionWrapper GetReplicationConnectionFailures()
		{
			return new ReplicationFailureCollectionWrapper(_wrapped.GetReplicationConnectionFailures());
		}
		
		public IActiveDirectoryReplicationMetadataWrapper GetReplicationMetadata(string objectPath)
		{
			return new ActiveDirectoryReplicationMetadataWrapper(_wrapped.GetReplicationMetadata(objectPath));
		}
		
		public void SyncReplicaFromServer(string partition, string sourceServer)
		{
			_wrapped.SyncReplicaFromServer(partition, sourceServer);
		}
		
		public void TriggerSyncReplicaFromNeighbors(string partition)
		{
			_wrapped.TriggerSyncReplicaFromNeighbors(partition);
		}
		
		public void SyncReplicaFromAllServers(string partition, System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions options)
		{
			_wrapped.SyncReplicaFromAllServers(partition, options);
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public void MoveToAnotherSite(string siteName)
		{
			_wrapped.MoveToAnotherSite(siteName);
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.GlobalCatalog ConvertWrapper(IGlobalCatalogWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IGlobalCatalogWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.GlobalCatalog wrapped)
		{
			return new GlobalCatalogWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class GlobalCatalogCollectionWrapper : IGlobalCatalogCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection _wrapped;
		
		public GlobalCatalogCollectionWrapper(System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IGlobalCatalogWrapper this[int index]
		{
			get
			{
				return new GlobalCatalogWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IGlobalCatalogWrapper globalCatalog)
		{
			return _wrapped.Contains(globalCatalog.Wrapped);
		}
		
		public int IndexOf(IGlobalCatalogWrapper globalCatalog)
		{
			return _wrapped.IndexOf(globalCatalog.Wrapped);
		}
		
		public void CopyTo(IGlobalCatalogWrapper[] globalCatalogs, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(globalCatalogs, GlobalCatalogWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection ConvertWrapper(IGlobalCatalogCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IGlobalCatalogCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection wrapped)
		{
			return new GlobalCatalogCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReadOnlyActiveDirectorySchemaClassCollectionWrapper : IReadOnlyActiveDirectorySchemaClassCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection _wrapped;
		
		public ReadOnlyActiveDirectorySchemaClassCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IActiveDirectorySchemaClassWrapper this[int index]
		{
			get
			{
				return new ActiveDirectorySchemaClassWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IActiveDirectorySchemaClassWrapper schemaClass)
		{
			return _wrapped.Contains(schemaClass.Wrapped);
		}
		
		public int IndexOf(IActiveDirectorySchemaClassWrapper schemaClass)
		{
			return _wrapped.IndexOf(schemaClass.Wrapped);
		}
		
		public void CopyTo(IActiveDirectorySchemaClassWrapper[] classes, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(classes, ActiveDirectorySchemaClassWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection ConvertWrapper(IReadOnlyActiveDirectorySchemaClassCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReadOnlyActiveDirectorySchemaClassCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection wrapped)
		{
			return new ReadOnlyActiveDirectorySchemaClassCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReadOnlyActiveDirectorySchemaPropertyCollectionWrapper : IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection _wrapped;
		
		public ReadOnlyActiveDirectorySchemaPropertyCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IActiveDirectorySchemaPropertyWrapper this[int index]
		{
			get
			{
				return new ActiveDirectorySchemaPropertyWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IActiveDirectorySchemaPropertyWrapper schemaProperty)
		{
			return _wrapped.Contains(schemaProperty.Wrapped);
		}
		
		public int IndexOf(IActiveDirectorySchemaPropertyWrapper schemaProperty)
		{
			return _wrapped.IndexOf(schemaProperty.Wrapped);
		}
		
		public void CopyTo(IActiveDirectorySchemaPropertyWrapper[] properties, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(properties, ActiveDirectorySchemaPropertyWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection ConvertWrapper(IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReadOnlyActiveDirectorySchemaPropertyCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection wrapped)
		{
			return new ReadOnlyActiveDirectorySchemaPropertyCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReadOnlyDirectoryServerCollectionWrapper : IReadOnlyDirectoryServerCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection _wrapped;
		
		public ReadOnlyDirectoryServerCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.DirectoryServer this[int index]
		{
			get
			{
				return _wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.DirectoryServer directoryServer)
		{
			return _wrapped.Contains(directoryServer);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.DirectoryServer directoryServer)
		{
			return _wrapped.IndexOf(directoryServer);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.DirectoryServer[] directoryServers, int index)
		{
			_wrapped.CopyTo(directoryServers, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection ConvertWrapper(IReadOnlyDirectoryServerCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReadOnlyDirectoryServerCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection wrapped)
		{
			return new ReadOnlyDirectoryServerCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReadOnlySiteCollectionWrapper : IReadOnlySiteCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection _wrapped;
		
		public ReadOnlySiteCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IActiveDirectorySiteWrapper this[int index]
		{
			get
			{
				return new ActiveDirectorySiteWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IActiveDirectorySiteWrapper site)
		{
			return _wrapped.Contains(site.Wrapped);
		}
		
		public int IndexOf(IActiveDirectorySiteWrapper site)
		{
			return _wrapped.IndexOf(site.Wrapped);
		}
		
		public void CopyTo(IActiveDirectorySiteWrapper[] sites, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(sites, ActiveDirectorySiteWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection ConvertWrapper(IReadOnlySiteCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReadOnlySiteCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection wrapped)
		{
			return new ReadOnlySiteCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReadOnlySiteLinkBridgeCollectionWrapper : IReadOnlySiteLinkBridgeCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection _wrapped;
		
		public ReadOnlySiteLinkBridgeCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IActiveDirectorySiteLinkBridgeWrapper this[int index]
		{
			get
			{
				return new ActiveDirectorySiteLinkBridgeWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IActiveDirectorySiteLinkBridgeWrapper bridge)
		{
			return _wrapped.Contains(bridge.Wrapped);
		}
		
		public int IndexOf(IActiveDirectorySiteLinkBridgeWrapper bridge)
		{
			return _wrapped.IndexOf(bridge.Wrapped);
		}
		
		public void CopyTo(IActiveDirectorySiteLinkBridgeWrapper[] bridges, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(bridges, ActiveDirectorySiteLinkBridgeWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection ConvertWrapper(IReadOnlySiteLinkBridgeCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReadOnlySiteLinkBridgeCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection wrapped)
		{
			return new ReadOnlySiteLinkBridgeCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReadOnlySiteLinkCollectionWrapper : IReadOnlySiteLinkCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection _wrapped;
		
		public ReadOnlySiteLinkCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IActiveDirectorySiteLinkWrapper this[int index]
		{
			get
			{
				return new ActiveDirectorySiteLinkWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IActiveDirectorySiteLinkWrapper link)
		{
			return _wrapped.Contains(link.Wrapped);
		}
		
		public int IndexOf(IActiveDirectorySiteLinkWrapper link)
		{
			return _wrapped.IndexOf(link.Wrapped);
		}
		
		public void CopyTo(IActiveDirectorySiteLinkWrapper[] links, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(links, ActiveDirectorySiteLinkWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection ConvertWrapper(IReadOnlySiteLinkCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReadOnlySiteLinkCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection wrapped)
		{
			return new ReadOnlySiteLinkCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReadOnlyStringCollectionWrapper : IReadOnlyStringCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection _wrapped;
		
		public ReadOnlyStringCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string this[int index]
		{
			get
			{
				return _wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(string value)
		{
			return _wrapped.Contains(value);
		}
		
		public int IndexOf(string value)
		{
			return _wrapped.IndexOf(value);
		}
		
		public void CopyTo(string[] values, int index)
		{
			_wrapped.CopyTo(values, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection ConvertWrapper(IReadOnlyStringCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReadOnlyStringCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection wrapped)
		{
			return new ReadOnlyStringCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReplicationConnection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReplicationConnectionWrapper : IReplicationConnectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationConnection _wrapped;
		
		public ReplicationConnectionWrapper(System.DirectoryServices.ActiveDirectory.ReplicationConnection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public string SourceServer
		{
			get
			{
				return _wrapped.SourceServer;
			}
		}
		
		public string DestinationServer
		{
			get
			{
				return _wrapped.DestinationServer;
			}
		}
		
		public bool Enabled
		{
			get
			{
				return _wrapped.Enabled;
			}
			set
			{
				_wrapped.Enabled = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get
			{
				return _wrapped.TransportType;
			}
		}
		
		public bool GeneratedByKcc
		{
			get
			{
				return _wrapped.GeneratedByKcc;
			}
			set
			{
				_wrapped.GeneratedByKcc = value;
			}
		}
		
		public bool ReciprocalReplicationEnabled
		{
			get
			{
				return _wrapped.ReciprocalReplicationEnabled;
			}
			set
			{
				_wrapped.ReciprocalReplicationEnabled = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.NotificationStatus ChangeNotificationStatus
		{
			get
			{
				return _wrapped.ChangeNotificationStatus;
			}
			set
			{
				_wrapped.ChangeNotificationStatus = value;
			}
		}
		
		public bool DataCompressionEnabled
		{
			get
			{
				return _wrapped.DataCompressionEnabled;
			}
			set
			{
				_wrapped.DataCompressionEnabled = value;
			}
		}
		
		public bool ReplicationScheduleOwnedByUser
		{
			get
			{
				return _wrapped.ReplicationScheduleOwnedByUser;
			}
			set
			{
				_wrapped.ReplicationScheduleOwnedByUser = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationSpan ReplicationSpan
		{
			get
			{
				return _wrapped.ReplicationSpan;
			}
		}
		
		public IActiveDirectoryScheduleWrapper ReplicationSchedule
		{
			get
			{
				return new ActiveDirectoryScheduleWrapper(_wrapped.ReplicationSchedule);
			}
			set
			{
				_wrapped.ReplicationSchedule = value.Wrapped;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationConnection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public void Delete()
		{
			_wrapped.Delete();
		}
		
		public void Save()
		{
			_wrapped.Save();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReplicationConnection ConvertWrapper(IReplicationConnectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReplicationConnectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReplicationConnection wrapped)
		{
			return new ReplicationConnectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReplicationConnectionCollectionWrapper : IReplicationConnectionCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection _wrapped;
		
		public ReplicationConnectionCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IReplicationConnectionWrapper this[int index]
		{
			get
			{
				return new ReplicationConnectionWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IReplicationConnectionWrapper connection)
		{
			return _wrapped.Contains(connection.Wrapped);
		}
		
		public int IndexOf(IReplicationConnectionWrapper connection)
		{
			return _wrapped.IndexOf(connection.Wrapped);
		}
		
		public void CopyTo(IReplicationConnectionWrapper[] connections, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(connections, ReplicationConnectionWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection ConvertWrapper(IReplicationConnectionCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReplicationConnectionCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection wrapped)
		{
			return new ReplicationConnectionCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReplicationCursor in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReplicationCursorWrapper : IReplicationCursorWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationCursor _wrapped;
		
		public ReplicationCursorWrapper(System.DirectoryServices.ActiveDirectory.ReplicationCursor wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string PartitionName
		{
			get
			{
				return _wrapped.PartitionName;
			}
		}
		
		public System.Guid SourceInvocationId
		{
			get
			{
				return _wrapped.SourceInvocationId;
			}
		}
		
		public long UpToDatenessUsn
		{
			get
			{
				return _wrapped.UpToDatenessUsn;
			}
		}
		
		public string SourceServer
		{
			get
			{
				return _wrapped.SourceServer;
			}
		}
		
		public System.DateTime LastSuccessfulSyncTime
		{
			get
			{
				return _wrapped.LastSuccessfulSyncTime;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationCursor Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReplicationCursor ConvertWrapper(IReplicationCursorWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReplicationCursorWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReplicationCursor wrapped)
		{
			return new ReplicationCursorWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReplicationCursorCollectionWrapper : IReplicationCursorCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection _wrapped;
		
		public ReplicationCursorCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IReplicationCursorWrapper this[int index]
		{
			get
			{
				return new ReplicationCursorWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IReplicationCursorWrapper cursor)
		{
			return _wrapped.Contains(cursor.Wrapped);
		}
		
		public int IndexOf(IReplicationCursorWrapper cursor)
		{
			return _wrapped.IndexOf(cursor.Wrapped);
		}
		
		public void CopyTo(IReplicationCursorWrapper[] values, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(values, ReplicationCursorWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection ConvertWrapper(IReplicationCursorCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReplicationCursorCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection wrapped)
		{
			return new ReplicationCursorCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReplicationFailure in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReplicationFailureWrapper : IReplicationFailureWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationFailure _wrapped;
		
		public ReplicationFailureWrapper(System.DirectoryServices.ActiveDirectory.ReplicationFailure wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string SourceServer
		{
			get
			{
				return _wrapped.SourceServer;
			}
		}
		
		public System.DateTime FirstFailureTime
		{
			get
			{
				return _wrapped.FirstFailureTime;
			}
		}
		
		public int ConsecutiveFailureCount
		{
			get
			{
				return _wrapped.ConsecutiveFailureCount;
			}
		}
		
		public int LastErrorCode
		{
			get
			{
				return _wrapped.LastErrorCode;
			}
		}
		
		public string LastErrorMessage
		{
			get
			{
				return _wrapped.LastErrorMessage;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationFailure Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReplicationFailure ConvertWrapper(IReplicationFailureWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReplicationFailureWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReplicationFailure wrapped)
		{
			return new ReplicationFailureWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReplicationFailureCollectionWrapper : IReplicationFailureCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection _wrapped;
		
		public ReplicationFailureCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IReplicationFailureWrapper this[int index]
		{
			get
			{
				return new ReplicationFailureWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IReplicationFailureWrapper failure)
		{
			return _wrapped.Contains(failure.Wrapped);
		}
		
		public int IndexOf(IReplicationFailureWrapper failure)
		{
			return _wrapped.IndexOf(failure.Wrapped);
		}
		
		public void CopyTo(IReplicationFailureWrapper[] failures, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(failures, ReplicationFailureWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection ConvertWrapper(IReplicationFailureCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReplicationFailureCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection wrapped)
		{
			return new ReplicationFailureCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReplicationNeighbor in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReplicationNeighborWrapper : IReplicationNeighborWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationNeighbor _wrapped;
		
		public ReplicationNeighborWrapper(System.DirectoryServices.ActiveDirectory.ReplicationNeighbor wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string PartitionName
		{
			get
			{
				return _wrapped.PartitionName;
			}
		}
		
		public string SourceServer
		{
			get
			{
				return _wrapped.SourceServer;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get
			{
				return _wrapped.TransportType;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationNeighbor.ReplicationNeighborOptions ReplicationNeighborOption
		{
			get
			{
				return _wrapped.ReplicationNeighborOption;
			}
		}
		
		public System.Guid SourceInvocationId
		{
			get
			{
				return _wrapped.SourceInvocationId;
			}
		}
		
		public long UsnLastObjectChangeSynced
		{
			get
			{
				return _wrapped.UsnLastObjectChangeSynced;
			}
		}
		
		public long UsnAttributeFilter
		{
			get
			{
				return _wrapped.UsnAttributeFilter;
			}
		}
		
		public System.DateTime LastSuccessfulSync
		{
			get
			{
				return _wrapped.LastSuccessfulSync;
			}
		}
		
		public System.DateTime LastAttemptedSync
		{
			get
			{
				return _wrapped.LastAttemptedSync;
			}
		}
		
		public int LastSyncResult
		{
			get
			{
				return _wrapped.LastSyncResult;
			}
		}
		
		public string LastSyncMessage
		{
			get
			{
				return _wrapped.LastSyncMessage;
			}
		}
		
		public int ConsecutiveFailureCount
		{
			get
			{
				return _wrapped.ConsecutiveFailureCount;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationNeighbor Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReplicationNeighbor ConvertWrapper(IReplicationNeighborWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReplicationNeighborWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReplicationNeighbor wrapped)
		{
			return new ReplicationNeighborWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReplicationNeighborCollectionWrapper : IReplicationNeighborCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection _wrapped;
		
		public ReplicationNeighborCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IReplicationNeighborWrapper this[int index]
		{
			get
			{
				return new ReplicationNeighborWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IReplicationNeighborWrapper neighbor)
		{
			return _wrapped.Contains(neighbor.Wrapped);
		}
		
		public int IndexOf(IReplicationNeighborWrapper neighbor)
		{
			return _wrapped.IndexOf(neighbor.Wrapped);
		}
		
		public void CopyTo(IReplicationNeighborWrapper[] neighbors, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(neighbors, ReplicationNeighborWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection ConvertWrapper(IReplicationNeighborCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReplicationNeighborCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection wrapped)
		{
			return new ReplicationNeighborCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReplicationOperation in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReplicationOperationWrapper : IReplicationOperationWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationOperation _wrapped;
		
		public ReplicationOperationWrapper(System.DirectoryServices.ActiveDirectory.ReplicationOperation wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DateTime TimeEnqueued
		{
			get
			{
				return _wrapped.TimeEnqueued;
			}
		}
		
		public int OperationNumber
		{
			get
			{
				return _wrapped.OperationNumber;
			}
		}
		
		public int Priority
		{
			get
			{
				return _wrapped.Priority;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationOperationType OperationType
		{
			get
			{
				return _wrapped.OperationType;
			}
		}
		
		public string PartitionName
		{
			get
			{
				return _wrapped.PartitionName;
			}
		}
		
		public string SourceServer
		{
			get
			{
				return _wrapped.SourceServer;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationOperation Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReplicationOperation ConvertWrapper(IReplicationOperationWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReplicationOperationWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReplicationOperation wrapped)
		{
			return new ReplicationOperationWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReplicationOperationCollectionWrapper : IReplicationOperationCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection _wrapped;
		
		public ReplicationOperationCollectionWrapper(System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public IReplicationOperationWrapper this[int index]
		{
			get
			{
				return new ReplicationOperationWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(IReplicationOperationWrapper operation)
		{
			return _wrapped.Contains(operation.Wrapped);
		}
		
		public int IndexOf(IReplicationOperationWrapper operation)
		{
			return _wrapped.IndexOf(operation.Wrapped);
		}
		
		public void CopyTo(IReplicationOperationWrapper[] operations, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(operations, ReplicationOperationWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection ConvertWrapper(IReplicationOperationCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReplicationOperationCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection wrapped)
		{
			return new ReplicationOperationCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ReplicationOperationInformationWrapper : IReplicationOperationInformationWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation _wrapped;
		
		public ReplicationOperationInformationWrapper(System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DateTime OperationStartTime
		{
			get
			{
				return _wrapped.OperationStartTime;
			}
		}
		
		public IReplicationOperationWrapper CurrentOperation
		{
			get
			{
				return new ReplicationOperationWrapper(_wrapped.CurrentOperation);
			}
		}
		
		public IReplicationOperationCollectionWrapper PendingOperations
		{
			get
			{
				return new ReplicationOperationCollectionWrapper(_wrapped.PendingOperations);
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation ConvertWrapper(IReplicationOperationInformationWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IReplicationOperationInformationWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation wrapped)
		{
			return new ReplicationOperationInformationWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectoryInterSiteTransportWrapper : IActiveDirectoryInterSiteTransportWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport _wrapped;
		
		public ActiveDirectoryInterSiteTransportWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType TransportType
		{
			get
			{
				return _wrapped.TransportType;
			}
		}
		
		public bool IgnoreReplicationSchedule
		{
			get
			{
				return _wrapped.IgnoreReplicationSchedule;
			}
			set
			{
				_wrapped.IgnoreReplicationSchedule = value;
			}
		}
		
		public bool BridgeAllSiteLinks
		{
			get
			{
				return _wrapped.BridgeAllSiteLinks;
			}
			set
			{
				_wrapped.BridgeAllSiteLinks = value;
			}
		}
		
		public IReadOnlySiteLinkCollectionWrapper SiteLinks
		{
			get
			{
				return new ReadOnlySiteLinkCollectionWrapper(_wrapped.SiteLinks);
			}
		}
		
		public IReadOnlySiteLinkBridgeCollectionWrapper SiteLinkBridges
		{
			get
			{
				return new ReadOnlySiteLinkBridgeCollectionWrapper(_wrapped.SiteLinkBridges);
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public void Save()
		{
			_wrapped.Save();
		}
		
		public IDirectoryEntryWrapper GetDirectoryEntry()
		{
			return new DirectoryEntryWrapper(_wrapped.GetDirectoryEntry());
		}
		
		public void Dispose()
		{
			_wrapped.Dispose();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport ConvertWrapper(IActiveDirectoryInterSiteTransportWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectoryInterSiteTransportWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport wrapped)
		{
			return new ActiveDirectoryInterSiteTransportWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class ActiveDirectoryRoleCollectionWrapper : IActiveDirectoryRoleCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection _wrapped;
		
		public ActiveDirectoryRoleCollectionWrapper(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole this[int index]
		{
			get
			{
				return _wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role)
		{
			return _wrapped.Contains(role);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole role)
		{
			return _wrapped.IndexOf(role);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole[] roles, int index)
		{
			_wrapped.CopyTo(roles, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection ConvertWrapper(IActiveDirectoryRoleCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IActiveDirectoryRoleCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection wrapped)
		{
			return new ActiveDirectoryRoleCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.AdamRoleCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class AdamRoleCollectionWrapper : IAdamRoleCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.AdamRoleCollection _wrapped;
		
		public AdamRoleCollectionWrapper(System.DirectoryServices.ActiveDirectory.AdamRoleCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamRole this[int index]
		{
			get
			{
				return _wrapped[index];
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.AdamRoleCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(System.DirectoryServices.ActiveDirectory.AdamRole role)
		{
			return _wrapped.Contains(role);
		}
		
		public int IndexOf(System.DirectoryServices.ActiveDirectory.AdamRole role)
		{
			return _wrapped.IndexOf(role);
		}
		
		public void CopyTo(System.DirectoryServices.ActiveDirectory.AdamRole[] roles, int index)
		{
			_wrapped.CopyTo(roles, index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.AdamRoleCollection ConvertWrapper(IAdamRoleCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static IAdamRoleCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.AdamRoleCollection wrapped)
		{
			return new AdamRoleCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.TopLevelName in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class TopLevelNameWrapper : ITopLevelNameWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.TopLevelName _wrapped;
		
		public TopLevelNameWrapper(System.DirectoryServices.ActiveDirectory.TopLevelName wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string Name
		{
			get
			{
				return _wrapped.Name;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TopLevelNameStatus Status
		{
			get
			{
				return _wrapped.Status;
			}
			set
			{
				_wrapped.Status = value;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TopLevelName Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.TopLevelName ConvertWrapper(ITopLevelNameWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static ITopLevelNameWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.TopLevelName wrapped)
		{
			return new TopLevelNameWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.TopLevelNameCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class TopLevelNameCollectionWrapper : ITopLevelNameCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.TopLevelNameCollection _wrapped;
		
		public TopLevelNameCollectionWrapper(System.DirectoryServices.ActiveDirectory.TopLevelNameCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public ITopLevelNameWrapper this[int index]
		{
			get
			{
				return new TopLevelNameWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TopLevelNameCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(ITopLevelNameWrapper name)
		{
			return _wrapped.Contains(name.Wrapped);
		}
		
		public int IndexOf(ITopLevelNameWrapper name)
		{
			return _wrapped.IndexOf(name.Wrapped);
		}
		
		public void CopyTo(ITopLevelNameWrapper[] names, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(names, TopLevelNameWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.TopLevelNameCollection ConvertWrapper(ITopLevelNameCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static ITopLevelNameCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.TopLevelNameCollection wrapped)
		{
			return new TopLevelNameCollectionWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class TrustRelationshipInformationWrapper : ITrustRelationshipInformationWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation _wrapped;
		
		public TrustRelationshipInformationWrapper(System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation wrapped)
		{
			_wrapped = wrapped;
		}
		
		public string SourceName
		{
			get
			{
				return _wrapped.SourceName;
			}
		}
		
		public string TargetName
		{
			get
			{
				return _wrapped.TargetName;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustType TrustType
		{
			get
			{
				return _wrapped.TrustType;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustDirection TrustDirection
		{
			get
			{
				return _wrapped.TrustDirection;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation ConvertWrapper(ITrustRelationshipInformationWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static ITrustRelationshipInformationWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation wrapped)
		{
			return new TrustRelationshipInformationWrapper(wrapped);
		}
	}
	
	// wrapper for System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection in System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public sealed partial class TrustRelationshipInformationCollectionWrapper : ITrustRelationshipInformationCollectionWrapper
	{
		
		private readonly System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection _wrapped;
		
		public TrustRelationshipInformationCollectionWrapper(System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection wrapped)
		{
			_wrapped = wrapped;
		}
		
		public ITrustRelationshipInformationWrapper this[int index]
		{
			get
			{
				return new TrustRelationshipInformationWrapper(_wrapped[index]);
			}
		}
		
		public int Count
		{
			get
			{
				return _wrapped.Count;
			}
		}
		
		public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection Wrapped
		{
			get
			{
				return _wrapped;
			}
		}
		
		public bool Contains(ITrustRelationshipInformationWrapper information)
		{
			return _wrapped.Contains(information.Wrapped);
		}
		
		public int IndexOf(ITrustRelationshipInformationWrapper information)
		{
			return _wrapped.IndexOf(information.Wrapped);
		}
		
		public void CopyTo(ITrustRelationshipInformationWrapper[] array, int index)
		{
			_wrapped.CopyTo(System.Array.ConvertAll(array, TrustRelationshipInformationWrapper.ConvertWrapper), index);
		}
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return _wrapped.GetEnumerator();
		}
		
		public override string ToString()
		{
			return _wrapped.ToString();
		}
		
		public override bool Equals(object obj)
		{
			return _wrapped.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return _wrapped.GetHashCode();
		}
		
		public static System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection ConvertWrapper(ITrustRelationshipInformationCollectionWrapper wrapper)
		{
			return wrapper.Wrapped;
		}
		
		public static ITrustRelationshipInformationCollectionWrapper ConvertWrapped(System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection wrapped)
		{
			return new TrustRelationshipInformationCollectionWrapper(wrapped);
		}
	}
}
